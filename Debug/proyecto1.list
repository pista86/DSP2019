
proyecto1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006700  08006700  00016700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e54  20000070  0800683c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008ec4  0800683c  00028ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac5b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032b8  00000000  00000000  0003acfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015e8  00000000  00000000  0003dfb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a0  00000000  00000000  0003f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004a79  00000000  00000000  00040a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010cbb  00000000  00000000  000454b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000987e2  00000000  00000000  00056174  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee956  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a4  00000000  00000000  000ee9d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066e8 	.word	0x080066e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080066e8 	.word	0x080066e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d013      	beq.n	8000520 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000500:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00b      	beq.n	8000520 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000508:	e000      	b.n	800050c <ITM_SendChar+0x2c>
    {
      __NOP();
 800050a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000516:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	ITM_SendChar( ch );
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffd0 	bl	80004e0 <ITM_SendChar>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
 8000540:	1d39      	adds	r1, r7, #4
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <__io_putchar+0x28>)
 800054a:	f002 fc36 	bl	8002dba <HAL_UART_Transmit>
	return ch;
 800054e:	687b      	ldr	r3, [r7, #4]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20008df8 	.word	0x20008df8

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fcc9 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f843 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f905 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f8ab 	bl	80006c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8d7 	bl	8000724 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = HAL_I2C_Mem_Read(&hi2c1, 0x32, 0x0F, 1, &value, 1, 10000);
 8000576:	f242 7310 	movw	r3, #10000	; 0x2710
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0x78>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	220f      	movs	r2, #15
 8000588:	2132      	movs	r1, #50	; 0x32
 800058a:	4813      	ldr	r0, [pc, #76]	; (80005d8 <main+0x7c>)
 800058c:	f001 f8b6 	bl	80016fc <HAL_I2C_Mem_Read>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <main+0x80>)
 8000596:	701a      	strb	r2, [r3, #0]



  /* USER CODE END 2 */

  osKernelInitialize();
 8000598:	f002 fefc 	bl	8003394 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2224      	movs	r2, #36	; 0x24
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fc2f 	bl	8005e06 <memset>
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x84>)
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b0:	61bb      	str	r3, [r7, #24]
 80005b2:	2318      	movs	r3, #24
 80005b4:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	461a      	mov	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <main+0x88>)
 80005be:	f002 ff51 	bl	8003464 <osThreadNew>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <main+0x8c>)
 80005c6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	printf("iniciando threads \n");
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x90>)
 80005ca:	f005 fc81 	bl	8005ed0 <puts>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ce:	f002 ff15 	bl	80033fc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005d2:	e7fe      	b.n	80005d2 <main+0x76>
 80005d4:	20008e39 	.word	0x20008e39
 80005d8:	20008da4 	.word	0x20008da4
 80005dc:	20008e38 	.word	0x20008e38
 80005e0:	08006700 	.word	0x08006700
 80005e4:	08000a39 	.word	0x08000a39
 80005e8:	20008da0 	.word	0x20008da0
 80005ec:	0800670c 	.word	0x0800670c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 fc01 	bl	8005e06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd4>)
 800063e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000664:	2308      	movs	r3, #8
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000668:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800066c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800066e:	2304      	movs	r3, #4
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000672:	2307      	movs	r3, #7
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fcd0 	bl	8002020 <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f9fd 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2102      	movs	r1, #2
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fefc 	bl	80024a4 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b2:	f000 f9e7 	bl	8000a84 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <MX_I2C1_Init+0x54>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x50>)
 80006d4:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_I2C1_Init+0x58>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_I2C1_Init+0x50>)
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_I2C1_Init+0x50>)
 8000706:	f000 fed1 	bl	80014ac <HAL_I2C_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000710:	f000 f9b8 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20008da4 	.word	0x20008da4
 800071c:	40005400 	.word	0x40005400
 8000720:	000186a0 	.word	0x000186a0

08000724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	; (8000774 <MX_USART2_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART2_UART_Init+0x4c>)
 800075c:	f002 fae0 	bl	8002d20 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f98d 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20008df8 	.word	0x20008df8
 8000774:	40004400 	.word	0x40004400

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	4ba2      	ldr	r3, [pc, #648]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4aa1      	ldr	r2, [pc, #644]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0310 	orr.w	r3, r3, #16
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b9f      	ldr	r3, [pc, #636]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0310 	and.w	r3, r3, #16
 80007a6:	61bb      	str	r3, [r7, #24]
 80007a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	4b9b      	ldr	r3, [pc, #620]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a9a      	ldr	r2, [pc, #616]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b98      	ldr	r3, [pc, #608]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b94      	ldr	r3, [pc, #592]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a93      	ldr	r2, [pc, #588]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b91      	ldr	r3, [pc, #580]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b8d      	ldr	r3, [pc, #564]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a8c      	ldr	r2, [pc, #560]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b8a      	ldr	r3, [pc, #552]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a85      	ldr	r2, [pc, #532]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b83      	ldr	r3, [pc, #524]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b7f      	ldr	r3, [pc, #508]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7e      	ldr	r2, [pc, #504]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 8000824:	f043 0308 	orr.w	r3, r3, #8
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b7c      	ldr	r3, [pc, #496]	; (8000a1c <MX_GPIO_Init+0x2a4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4879      	ldr	r0, [pc, #484]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 800083c:	f000 fe02 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2101      	movs	r1, #1
 8000844:	4877      	ldr	r0, [pc, #476]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fdfd 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800084a:	2200      	movs	r2, #0
 800084c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000850:	4875      	ldr	r0, [pc, #468]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 8000852:	f000 fdf7 	bl	8001444 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	4874      	ldr	r0, [pc, #464]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 800085c:	f000 fdf2 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000860:	2304      	movs	r3, #4
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	486b      	ldr	r0, [pc, #428]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000874:	f000 fc64 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000878:	2308      	movs	r3, #8
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4864      	ldr	r0, [pc, #400]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 8000890:	f000 fc56 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000894:	2332      	movs	r3, #50	; 0x32
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000898:	4b65      	ldr	r3, [pc, #404]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	485e      	ldr	r0, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x2a8>)
 80008a8:	f000 fc4a 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4858      	ldr	r0, [pc, #352]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008c4:	f000 fc3c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c8:	2308      	movs	r3, #8
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d8:	2305      	movs	r3, #5
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4850      	ldr	r0, [pc, #320]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 80008e4:	f000 fc2c 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ec:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <MX_GPIO_Init+0x2b8>)
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	484e      	ldr	r0, [pc, #312]	; (8000a34 <MX_GPIO_Init+0x2bc>)
 80008fc:	f000 fc20 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000900:	2310      	movs	r3, #16
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000910:	2306      	movs	r3, #6
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4846      	ldr	r0, [pc, #280]	; (8000a34 <MX_GPIO_Init+0x2bc>)
 800091c:	f000 fc10 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000920:	23e0      	movs	r3, #224	; 0xe0
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000930:	2305      	movs	r3, #5
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	483e      	ldr	r0, [pc, #248]	; (8000a34 <MX_GPIO_Init+0x2bc>)
 800093c:	f000 fc00 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4833      	ldr	r0, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fbef 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000962:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482b      	ldr	r0, [pc, #172]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fbe0 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4821      	ldr	r0, [pc, #132]	; (8000a24 <MX_GPIO_Init+0x2ac>)
 800099e:	f000 fbcf 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	481f      	ldr	r0, [pc, #124]	; (8000a34 <MX_GPIO_Init+0x2bc>)
 80009b8:	f000 fbc2 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <MX_GPIO_Init+0x2bc>)
 80009da:	f000 fbb1 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_GPIO_Init+0x2b0>)
 80009f2:	f000 fba5 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin;
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009fa:	2311      	movs	r3, #17
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4807      	ldr	r0, [pc, #28]	; (8000a2c <MX_GPIO_Init+0x2b4>)
 8000a0e:	f000 fb97 	bl	8001140 <HAL_GPIO_Init>

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40020800 	.word	0x40020800
 8000a28:	40020c00 	.word	0x40020c00
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	10120000 	.word	0x10120000
 8000a34:	40020000 	.word	0x40020000

08000a38 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(5000);
 8000a40:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a44:	f002 fdb8 	bl	80035b8 <osDelay>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <StartDefaultTask+0x20>)
 8000a4c:	f000 fd13 	bl	8001476 <HAL_GPIO_TogglePin>

		printf("pepe  \n");
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <StartDefaultTask+0x24>)
 8000a52:	f005 fa3d 	bl	8005ed0 <puts>
		osDelay(5000);
 8000a56:	e7f3      	b.n	8000a40 <StartDefaultTask+0x8>
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	08006720 	.word	0x08006720

08000a60 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a72:	f000 fa63 	bl	8000f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40010000 	.word	0x40010000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210f      	movs	r1, #15
 8000ad6:	f06f 0001 	mvn.w	r0, #1
 8000ada:	f000 fb07 	bl	80010ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_I2C_MspInit+0x84>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d12c      	bne.n	8000b68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <HAL_I2C_MspInit+0x8c>)
 8000b48:	f000 fafa 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_I2C_MspInit+0x88>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005400 	.word	0x40005400
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020400 	.word	0x40020400

08000b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12b      	bne.n	8000bf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000be6:	2307      	movs	r3, #7
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf2:	f000 faa5 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	; 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2019      	movs	r0, #25
 8000c22:	f000 fa63 	bl	80010ec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c26:	2019      	movs	r0, #25
 8000c28:	f000 fa7c 	bl	8001124 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <HAL_InitTick+0xa0>)
 8000c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <HAL_InitTick+0xa0>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_InitTick+0xa0>)
 8000c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c48:	f107 0210 	add.w	r2, r7, #16
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f001 fe14 	bl	8002880 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c58:	f001 fdfe 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8000c5c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <HAL_InitTick+0xa4>)
 8000c62:	fba2 2303 	umull	r2, r3, r2, r3
 8000c66:	0c9b      	lsrs	r3, r3, #18
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_InitTick+0xac>)
 8000c70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c78:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c8c:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c8e:	f001 fe29 	bl	80028e4 <HAL_TIM_Base_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d104      	bne.n	8000ca2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <HAL_InitTick+0xa8>)
 8000c9a:	f001 fe58 	bl	800294e <HAL_TIM_Base_Start_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3730      	adds	r7, #48	; 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	431bde83 	.word	0x431bde83
 8000cb4:	20008e3c 	.word	0x20008e3c
 8000cb8:	40010000 	.word	0x40010000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cf6:	f001 fe4e 	bl	8002996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20008e3c 	.word	0x20008e3c

08000d04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	e00a      	b.n	8000d2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d16:	f3af 8000 	nop.w
 8000d1a:	4601      	mov	r1, r0
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	b2ca      	uxtb	r2, r1
 8000d24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf0      	blt.n	8000d16 <_read+0x12>
	}

return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e009      	b.n	8000d64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fbe9 	bl	8000530 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3301      	adds	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	dbf1      	blt.n	8000d50 <_write+0x12>
	}
	return len;
 8000d6c:	687b      	ldr	r3, [r7, #4]
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <_close>:

int _close(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
 8000d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_isatty>:

int _isatty(int file)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	return 0;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
	...

08000de0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x16>
		heap_end = &end;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <_sbrk+0x50>)
 8000df2:	4a10      	ldr	r2, [pc, #64]	; (8000e34 <_sbrk+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <_sbrk+0x50>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <_sbrk+0x50>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4413      	add	r3, r2
 8000e04:	466a      	mov	r2, sp
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d907      	bls.n	8000e1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e0a:	f004 ffc7 	bl	8005d9c <__errno>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	230c      	movs	r3, #12
 8000e12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e006      	b.n	8000e28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <_sbrk+0x50>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <_sbrk+0x50>)
 8000e24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000008c 	.word	0x2000008c
 8000e34:	20008ec8 	.word	0x20008ec8

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <SystemInit+0x60>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <SystemInit+0x60>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <SystemInit+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <SystemInit+0x64>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <SystemInit+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <SystemInit+0x64>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <SystemInit+0x64>)
 8000e64:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <SystemInit+0x64>)
 8000e70:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <SystemInit+0x68>)
 8000e72:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <SystemInit+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <SystemInit+0x64>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SystemInit+0x60>)
 8000e88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e8c:	609a      	str	r2, [r3, #8]
#endif
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	24003010 	.word	0x24003010

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eaa:	e003      	b.n	8000eb4 <LoopCopyDataInit>

08000eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eb2:	3104      	adds	r1, #4

08000eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ebc:	d3f6      	bcc.n	8000eac <CopyDataInit>
  ldr  r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec0:	e002      	b.n	8000ec8 <LoopFillZerobss>

08000ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ec4:	f842 3b04 	str.w	r3, [r2], #4

08000ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ecc:	d3f9      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffb3 	bl	8000e38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f004 ff69 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fb41 	bl	800055c <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000ee0:	080067cc 	.word	0x080067cc
  ldr  r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ee8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000eec:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ef0:	20008ec4 	.word	0x20008ec4

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f8d8 	bl	80010d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fe70 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fdb2 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20008e7c 	.word	0x20008e7c

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20008e7c 	.word	0x20008e7c

08000f7c <__NVIC_SetPriorityGrouping>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4907      	ldr	r1, [pc, #28]	; (8001018 <__NVIC_EnableIRQ+0x38>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100

0800101c <__NVIC_SetPriority>:
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ff4c 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fe:	f7ff ff61 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001102:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	68b9      	ldr	r1, [r7, #8]
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f7ff ffb1 	bl	8001070 <NVIC_EncodePriority>
 800110e:	4602      	mov	r2, r0
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4611      	mov	r1, r2
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff80 	bl	800101c <__NVIC_SetPriority>
}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff54 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e159      	b.n	8001410 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8148 	bne.w	800140a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x4a>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b12      	cmp	r3, #18
 8001188:	d123      	bne.n	80011d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	08da      	lsrs	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3208      	adds	r2, #8
 8001192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	691a      	ldr	r2, [r3, #16]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	08da      	lsrs	r2, r3, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3208      	adds	r2, #8
 80011cc:	69b9      	ldr	r1, [r7, #24]
 80011ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0203 	and.w	r2, r3, #3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d00b      	beq.n	8001226 <HAL_GPIO_Init+0xe6>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800121a:	2b11      	cmp	r3, #17
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b12      	cmp	r3, #18
 8001224:	d130      	bne.n	8001288 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68da      	ldr	r2, [r3, #12]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800125c:	2201      	movs	r2, #1
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	091b      	lsrs	r3, r3, #4
 8001272:	f003 0201 	and.w	r2, r3, #1
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a2 	beq.w	800140a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b53      	ldr	r3, [pc, #332]	; (8001424 <HAL_GPIO_Init+0x2e4>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a51      	ldr	r2, [pc, #324]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <HAL_GPIO_Init+0x2ec>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x202>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a47      	ldr	r2, [pc, #284]	; (8001430 <HAL_GPIO_Init+0x2f0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x1fe>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a46      	ldr	r2, [pc, #280]	; (8001434 <HAL_GPIO_Init+0x2f4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x1fa>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a45      	ldr	r2, [pc, #276]	; (8001438 <HAL_GPIO_Init+0x2f8>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x1f6>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a44      	ldr	r2, [pc, #272]	; (800143c <HAL_GPIO_Init+0x2fc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x1f2>
 800132e:	2304      	movs	r3, #4
 8001330:	e008      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001332:	2307      	movs	r3, #7
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001336:	2303      	movs	r3, #3
 8001338:	e004      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133a:	2302      	movs	r3, #2
 800133c:	e002      	b.n	8001344 <HAL_GPIO_Init+0x204>
 800133e:	2301      	movs	r3, #1
 8001340:	e000      	b.n	8001344 <HAL_GPIO_Init+0x204>
 8001342:	2300      	movs	r3, #0
 8001344:	69fa      	ldr	r2, [r7, #28]
 8001346:	f002 0203 	and.w	r2, r2, #3
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	4093      	lsls	r3, r2
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001354:	4934      	ldr	r1, [pc, #208]	; (8001428 <HAL_GPIO_Init+0x2e8>)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001386:	4a2e      	ldr	r2, [pc, #184]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800138c:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_GPIO_Init+0x300>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_GPIO_Init+0x300>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <HAL_GPIO_Init+0x300>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3301      	adds	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	f67f aea2 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001418:	bf00      	nop
 800141a:	3724      	adds	r7, #36	; 0x24
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	401a      	ands	r2, r3
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	429a      	cmp	r2, r3
 800148e:	d104      	bne.n	800149a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e10f      	b.n	80016de <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fb0a 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f0:	f001 f99e 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	4a7b      	ldr	r2, [pc, #492]	; (80016e8 <HAL_I2C_Init+0x23c>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d807      	bhi.n	8001510 <HAL_I2C_Init+0x64>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_I2C_Init+0x240>)
 8001504:	4293      	cmp	r3, r2
 8001506:	bf94      	ite	ls
 8001508:	2301      	movls	r3, #1
 800150a:	2300      	movhi	r3, #0
 800150c:	b2db      	uxtb	r3, r3
 800150e:	e006      	b.n	800151e <HAL_I2C_Init+0x72>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a77      	ldr	r2, [pc, #476]	; (80016f0 <HAL_I2C_Init+0x244>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e0db      	b.n	80016de <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4a72      	ldr	r2, [pc, #456]	; (80016f4 <HAL_I2C_Init+0x248>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	4a64      	ldr	r2, [pc, #400]	; (80016e8 <HAL_I2C_Init+0x23c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d802      	bhi.n	8001560 <HAL_I2C_Init+0xb4>
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3301      	adds	r3, #1
 800155e:	e009      	b.n	8001574 <HAL_I2C_Init+0xc8>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a63      	ldr	r2, [pc, #396]	; (80016f8 <HAL_I2C_Init+0x24c>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	3301      	adds	r3, #1
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	430b      	orrs	r3, r1
 800157a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4956      	ldr	r1, [pc, #344]	; (80016e8 <HAL_I2C_Init+0x23c>)
 8001590:	428b      	cmp	r3, r1
 8001592:	d80d      	bhi.n	80015b0 <HAL_I2C_Init+0x104>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	1e59      	subs	r1, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	bf38      	it	cc
 80015ac:	2304      	movcc	r3, #4
 80015ae:	e04f      	b.n	8001650 <HAL_I2C_Init+0x1a4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d111      	bne.n	80015dc <HAL_I2C_Init+0x130>
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1e58      	subs	r0, r3, #1
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	440b      	add	r3, r1
 80015c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ca:	3301      	adds	r3, #1
 80015cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	e012      	b.n	8001602 <HAL_I2C_Init+0x156>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1e58      	subs	r0, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6859      	ldr	r1, [r3, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	0099      	lsls	r1, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Init+0x15e>
 8001606:	2301      	movs	r3, #1
 8001608:	e022      	b.n	8001650 <HAL_I2C_Init+0x1a4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10e      	bne.n	8001630 <HAL_I2C_Init+0x184>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1e58      	subs	r0, r3, #1
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	440b      	add	r3, r1
 8001620:	fbb0 f3f3 	udiv	r3, r0, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800162e:	e00f      	b.n	8001650 <HAL_I2C_Init+0x1a4>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	1e58      	subs	r0, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	0099      	lsls	r1, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	fbb0 f3f3 	udiv	r3, r0, r3
 8001646:	3301      	adds	r3, #1
 8001648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	6809      	ldr	r1, [r1, #0]
 8001654:	4313      	orrs	r3, r2
 8001656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69da      	ldr	r2, [r3, #28]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800167e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6911      	ldr	r1, [r2, #16]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68d2      	ldr	r2, [r2, #12]
 800168a:	4311      	orrs	r1, r2
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	430b      	orrs	r3, r1
 8001692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	000186a0 	.word	0x000186a0
 80016ec:	001e847f 	.word	0x001e847f
 80016f0:	003d08ff 	.word	0x003d08ff
 80016f4:	431bde83 	.word	0x431bde83
 80016f8:	10624dd3 	.word	0x10624dd3

080016fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	; 0x30
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	4608      	mov	r0, r1
 8001706:	4611      	mov	r1, r2
 8001708:	461a      	mov	r2, r3
 800170a:	4603      	mov	r3, r0
 800170c:	817b      	strh	r3, [r7, #10]
 800170e:	460b      	mov	r3, r1
 8001710:	813b      	strh	r3, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001716:	f7ff fc25 	bl	8000f64 <HAL_GetTick>
 800171a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b20      	cmp	r3, #32
 8001726:	f040 8208 	bne.w	8001b3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2319      	movs	r3, #25
 8001730:	2201      	movs	r2, #1
 8001732:	497b      	ldr	r1, [pc, #492]	; (8001920 <HAL_I2C_Mem_Read+0x224>)
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f000 fad7 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
 8001742:	e1fb      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174a:	2b01      	cmp	r3, #1
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Mem_Read+0x56>
 800174e:	2302      	movs	r3, #2
 8001750:	e1f4      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d007      	beq.n	8001778 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001786:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2222      	movs	r2, #34	; 0x22
 800178c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2240      	movs	r2, #64	; 0x40
 8001794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80017a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4a5b      	ldr	r2, [pc, #364]	; (8001924 <HAL_I2C_Mem_Read+0x228>)
 80017b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017ba:	88f8      	ldrh	r0, [r7, #6]
 80017bc:	893a      	ldrh	r2, [r7, #8]
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	4603      	mov	r3, r0
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f9bc 	bl	8001b48 <I2C_RequestMemoryRead>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1b0      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d113      	bne.n	800180a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e184      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800180e:	2b01      	cmp	r3, #1
 8001810:	d11b      	bne.n	800184a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	61fb      	str	r3, [r7, #28]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	e164      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	2b02      	cmp	r3, #2
 8001850:	d11b      	bne.n	800188a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001860:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	e144      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018a0:	e138      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	f200 80f1 	bhi.w	8001a8e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d123      	bne.n	80018fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f000 fb2c 	bl	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e139      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	1c5a      	adds	r2, r3, #1
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018fa:	e10b      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	2b02      	cmp	r3, #2
 8001902:	d14e      	bne.n	80019a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800190a:	2200      	movs	r2, #0
 800190c:	4906      	ldr	r1, [pc, #24]	; (8001928 <HAL_I2C_Mem_Read+0x22c>)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f9ea 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e10e      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
 800191e:	bf00      	nop
 8001920:	00100002 	.word	0x00100002
 8001924:	ffff0000 	.word	0xffff0000
 8001928:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	691a      	ldr	r2, [r3, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	3b01      	subs	r3, #1
 8001968:	b29a      	uxth	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	3b01      	subs	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019a0:	e0b8      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a8:	2200      	movs	r2, #0
 80019aa:	4966      	ldr	r1, [pc, #408]	; (8001b44 <HAL_I2C_Mem_Read+0x448>)
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f99b 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0bf      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a04:	2200      	movs	r2, #0
 8001a06:	494f      	ldr	r1, [pc, #316]	; (8001b44 <HAL_I2C_Mem_Read+0x448>)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 f96d 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e091      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	3b01      	subs	r3, #1
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a8c:	e042      	b.n	8001b14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa3f 	bl	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e04c      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0304 	and.w	r3, r3, #4
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d118      	bne.n	8001b14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afe:	3b01      	subs	r3, #1
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f47f aec2 	bne.w	80018a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2220      	movs	r2, #32
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	00010004 	.word	0x00010004

08001b48 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4603      	mov	r3, r0
 8001b58:	817b      	strh	r3, [r7, #10]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	813b      	strh	r3, [r7, #8]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b70:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6a3b      	ldr	r3, [r7, #32]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f8aa 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e09e      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001bac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	6a3a      	ldr	r2, [r7, #32]
 8001bb2:	494c      	ldr	r1, [pc, #304]	; (8001ce4 <I2C_RequestMemoryRead+0x19c>)
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f8ee 	bl	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e08b      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 f958 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00d      	beq.n	8001c06 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d107      	bne.n	8001c02 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06a      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c0c:	893b      	ldrh	r3, [r7, #8]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	e021      	b.n	8001c5c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c18:	893b      	ldrh	r3, [r7, #8]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c28:	6a39      	ldr	r1, [r7, #32]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f932 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00d      	beq.n	8001c52 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d107      	bne.n	8001c4e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e044      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c52:	893b      	ldrh	r3, [r7, #8]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	6a39      	ldr	r1, [r7, #32]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f917 	bl	8001e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e029      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f81f 	bl	8001ce8 <I2C_WaitOnFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e013      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001cb4:	897b      	ldrh	r3, [r7, #10]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	4906      	ldr	r1, [pc, #24]	; (8001ce4 <I2C_RequestMemoryRead+0x19c>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f863 	bl	8001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	00010002 	.word	0x00010002

08001ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf8:	e025      	b.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d021      	beq.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7ff f92f 	bl	8000f64 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d116      	bne.n	8001d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2220      	movs	r2, #32
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f043 0220 	orr.w	r2, r3, #32
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e023      	b.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10d      	bne.n	8001d6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	e00c      	b.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4013      	ands	r3, r2
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2301      	moveq	r3, #1
 8001d80:	2300      	movne	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d0b6      	beq.n	8001cfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da4:	e051      	b.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db4:	d123      	bne.n	8001dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0204 	orr.w	r2, r3, #4
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e046      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d021      	beq.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e06:	f7ff f8ad 	bl	8000f64 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d302      	bcc.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e020      	b.n	8001e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10c      	bne.n	8001e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	e00b      	b.n	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	43da      	mvns	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d18d      	bne.n	8001da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ea0:	e02d      	b.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f88d 	bl	8001fc2 <I2C_IsAcknowledgeFailed>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e02d      	b.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb8:	d021      	beq.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eba:	f7ff f853 	bl	8000f64 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d302      	bcc.n	8001ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d116      	bne.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2220      	movs	r2, #32
 8001eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0220 	orr.w	r2, r3, #32
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e007      	b.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f08:	2b80      	cmp	r3, #128	; 0x80
 8001f0a:	d1ca      	bne.n	8001ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b084      	sub	sp, #16
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	60b9      	str	r1, [r7, #8]
 8001f20:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f22:	e042      	b.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d119      	bne.n	8001f66 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0210 	mvn.w	r2, #16
 8001f3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2220      	movs	r2, #32
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e029      	b.n	8001fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f66:	f7fe fffd 	bl	8000f64 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d302      	bcc.n	8001f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e007      	b.n	8001fba <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d1b5      	bne.n	8001f24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd8:	d11b      	bne.n	8002012 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fe2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f043 0204 	orr.w	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e22d      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d075      	beq.n	800212a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203e:	4ba3      	ldr	r3, [pc, #652]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 030c 	and.w	r3, r3, #12
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00c      	beq.n	8002064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4ba0      	ldr	r3, [pc, #640]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002052:	2b08      	cmp	r3, #8
 8002054:	d112      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002062:	d10b      	bne.n	800207c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4b99      	ldr	r3, [pc, #612]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d05b      	beq.n	8002128 <HAL_RCC_OscConfig+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d157      	bne.n	8002128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e208      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x74>
 8002086:	4b91      	ldr	r3, [pc, #580]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a90      	ldr	r2, [pc, #576]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e01d      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x98>
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a87      	ldr	r2, [pc, #540]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0xb0>
 80020b8:	4b84      	ldr	r3, [pc, #528]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a83      	ldr	r2, [pc, #524]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a80      	ldr	r2, [pc, #512]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d013      	beq.n	8002100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff44 	bl	8000f64 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe ff40 	bl	8000f64 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	; 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1cd      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4b76      	ldr	r3, [pc, #472]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020fe:	e014      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe ff30 	bl	8000f64 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002108:	f7fe ff2c 	bl	8000f64 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b64      	cmp	r3, #100	; 0x64
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1b9      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211a:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0xe8>
 8002126:	e000      	b.n	800212a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d063      	beq.n	80021fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002136:	4b65      	ldr	r3, [pc, #404]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b62      	ldr	r3, [pc, #392]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214a:	2b08      	cmp	r3, #8
 800214c:	d11c      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d001      	beq.n	8002172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e18d      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002172:	4b56      	ldr	r3, [pc, #344]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4952      	ldr	r1, [pc, #328]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	e03a      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d020      	beq.n	80021d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x2b0>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe fee5 	bl	8000f64 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7fe fee1 	bl	8000f64 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e16e      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021bc:	4b43      	ldr	r3, [pc, #268]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	4940      	ldr	r1, [pc, #256]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	e015      	b.n	80021fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x2b0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fec4 	bl	8000f64 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7fe fec0 	bl	8000f64 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e14d      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d030      	beq.n	800226c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d016      	beq.n	8002240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <HAL_RCC_OscConfig+0x2b4>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002218:	f7fe fea4 	bl	8000f64 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7fe fea0 	bl	8000f64 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e12d      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x200>
 800223e:	e015      	b.n	800226c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <HAL_RCC_OscConfig+0x2b4>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002246:	f7fe fe8d 	bl	8000f64 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224e:	f7fe fe89 	bl	8000f64 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e116      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b1a      	ldr	r3, [pc, #104]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80a0 	beq.w	80023ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <HAL_RCC_OscConfig+0x2ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d121      	bne.n	80022fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_RCC_OscConfig+0x2b8>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fe4f 	bl	8000f64 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e011      	b.n	80022ee <HAL_RCC_OscConfig+0x2ce>
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800
 80022d0:	42470000 	.word	0x42470000
 80022d4:	42470e80 	.word	0x42470e80
 80022d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022dc:	f7fe fe42 	bl	8000f64 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0cf      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x478>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x2f0>
 8002302:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002306:	4a65      	ldr	r2, [pc, #404]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	6713      	str	r3, [r2, #112]	; 0x70
 800230e:	e01c      	b.n	800234a <HAL_RCC_OscConfig+0x32a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b05      	cmp	r3, #5
 8002316:	d10c      	bne.n	8002332 <HAL_RCC_OscConfig+0x312>
 8002318:	4b60      	ldr	r3, [pc, #384]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a5f      	ldr	r2, [pc, #380]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	4b5d      	ldr	r3, [pc, #372]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002328:	4a5c      	ldr	r2, [pc, #368]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	; 0x70
 8002330:	e00b      	b.n	800234a <HAL_RCC_OscConfig+0x32a>
 8002332:	4b5a      	ldr	r3, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	4a59      	ldr	r2, [pc, #356]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6713      	str	r3, [r2, #112]	; 0x70
 800233e:	4b57      	ldr	r3, [pc, #348]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002344:	f023 0304 	bic.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d015      	beq.n	800237e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7fe fe07 	bl	8000f64 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fe03 	bl	8000f64 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e08e      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0ee      	beq.n	800235a <HAL_RCC_OscConfig+0x33a>
 800237c:	e014      	b.n	80023a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7fe fdf1 	bl	8000f64 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7fe fded 	bl	8000f64 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e078      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ee      	bne.n	8002386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d105      	bne.n	80023ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ae:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	4a3a      	ldr	r2, [pc, #232]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 80023b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d064      	beq.n	800248c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d05c      	beq.n	8002488 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d141      	bne.n	800245a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x480>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fdc2 	bl	8000f64 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fdbe 	bl	8000f64 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e04b      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	3b01      	subs	r3, #1
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	491d      	ldr	r1, [pc, #116]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <HAL_RCC_OscConfig+0x480>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe fd97 	bl	8000f64 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fd93 	bl	8000f64 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e020      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x41a>
 8002458:	e018      	b.n	800248c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_RCC_OscConfig+0x480>)
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe fd80 	bl	8000f64 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fd7c 	bl	8000f64 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e009      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCC_OscConfig+0x47c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x448>
 8002486:	e001      	b.n	800248c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40007000 	.word	0x40007000
 800249c:	40023800 	.word	0x40023800
 80024a0:	42470060 	.word	0x42470060

080024a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0ca      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b8:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d90c      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b64      	ldr	r3, [pc, #400]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b62      	ldr	r3, [pc, #392]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0b6      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d020      	beq.n	800252e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f8:	4b58      	ldr	r3, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002510:	4b52      	ldr	r3, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a51      	ldr	r2, [pc, #324]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800251a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	494c      	ldr	r1, [pc, #304]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d044      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d119      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e07d      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d003      	beq.n	8002562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	2b03      	cmp	r3, #3
 8002560:	d107      	bne.n	8002572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06d      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002572:	4b3a      	ldr	r3, [pc, #232]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e065      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f023 0203 	bic.w	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4933      	ldr	r1, [pc, #204]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002594:	f7fe fce6 	bl	8000f64 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	e00a      	b.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259c:	f7fe fce2 	bl	8000f64 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e04d      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 020c 	and.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d1eb      	bne.n	800259c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 030f 	and.w	r3, r3, #15
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d20c      	bcs.n	80025ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_RCC_ClockConfig+0x1b4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 030f 	and.w	r3, r3, #15
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e030      	b.n	800264e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d008      	beq.n	800260a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	4915      	ldr	r1, [pc, #84]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	490d      	ldr	r1, [pc, #52]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262a:	f000 f81d 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 800262e:	4601      	mov	r1, r0
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	fa21 f303 	lsr.w	r3, r1, r3
 8002642:	4a08      	ldr	r2, [pc, #32]	; (8002664 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fae0 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00
 800265c:	40023800 	.word	0x40023800
 8002660:	08006740 	.word	0x08006740
 8002664:	20000000 	.word	0x20000000

08002668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800267e:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b04      	cmp	r3, #4
 8002688:	d007      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x32>
 800268a:	2b08      	cmp	r3, #8
 800268c:	d008      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x38>
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80b4 	bne.w	80027fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b5e      	ldr	r3, [pc, #376]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002696:	60bb      	str	r3, [r7, #8]
       break;
 8002698:	e0b3      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800269c:	60bb      	str	r3, [r7, #8]
      break;
 800269e:	e0b0      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b5a      	ldr	r3, [pc, #360]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b58      	ldr	r3, [pc, #352]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d04a      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	ea03 0501 	and.w	r5, r3, r1
 80026cc:	ea04 0602 	and.w	r6, r4, r2
 80026d0:	4629      	mov	r1, r5
 80026d2:	4632      	mov	r2, r6
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	f04f 0400 	mov.w	r4, #0
 80026dc:	0154      	lsls	r4, r2, #5
 80026de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026e2:	014b      	lsls	r3, r1, #5
 80026e4:	4619      	mov	r1, r3
 80026e6:	4622      	mov	r2, r4
 80026e8:	1b49      	subs	r1, r1, r5
 80026ea:	eb62 0206 	sbc.w	r2, r2, r6
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	f04f 0400 	mov.w	r4, #0
 80026f6:	0194      	lsls	r4, r2, #6
 80026f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026fc:	018b      	lsls	r3, r1, #6
 80026fe:	1a5b      	subs	r3, r3, r1
 8002700:	eb64 0402 	sbc.w	r4, r4, r2
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	00e2      	lsls	r2, r4, #3
 800270e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002712:	00d9      	lsls	r1, r3, #3
 8002714:	460b      	mov	r3, r1
 8002716:	4614      	mov	r4, r2
 8002718:	195b      	adds	r3, r3, r5
 800271a:	eb44 0406 	adc.w	r4, r4, r6
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	0262      	lsls	r2, r4, #9
 8002728:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800272c:	0259      	lsls	r1, r3, #9
 800272e:	460b      	mov	r3, r1
 8002730:	4614      	mov	r4, r2
 8002732:	4618      	mov	r0, r3
 8002734:	4621      	mov	r1, r4
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 0400 	mov.w	r4, #0
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	f7fd fd4e 	bl	80001e0 <__aeabi_uldivmod>
 8002744:	4603      	mov	r3, r0
 8002746:	460c      	mov	r4, r1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e049      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b2f      	ldr	r3, [pc, #188]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	f04f 0400 	mov.w	r4, #0
 8002756:	f240 11ff 	movw	r1, #511	; 0x1ff
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea03 0501 	and.w	r5, r3, r1
 8002762:	ea04 0602 	and.w	r6, r4, r2
 8002766:	4629      	mov	r1, r5
 8002768:	4632      	mov	r2, r6
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	f04f 0400 	mov.w	r4, #0
 8002772:	0154      	lsls	r4, r2, #5
 8002774:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002778:	014b      	lsls	r3, r1, #5
 800277a:	4619      	mov	r1, r3
 800277c:	4622      	mov	r2, r4
 800277e:	1b49      	subs	r1, r1, r5
 8002780:	eb62 0206 	sbc.w	r2, r2, r6
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f04f 0400 	mov.w	r4, #0
 800278c:	0194      	lsls	r4, r2, #6
 800278e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002792:	018b      	lsls	r3, r1, #6
 8002794:	1a5b      	subs	r3, r3, r1
 8002796:	eb64 0402 	sbc.w	r4, r4, r2
 800279a:	f04f 0100 	mov.w	r1, #0
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	00e2      	lsls	r2, r4, #3
 80027a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027a8:	00d9      	lsls	r1, r3, #3
 80027aa:	460b      	mov	r3, r1
 80027ac:	4614      	mov	r4, r2
 80027ae:	195b      	adds	r3, r3, r5
 80027b0:	eb44 0406 	adc.w	r4, r4, r6
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	02a2      	lsls	r2, r4, #10
 80027be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027c2:	0299      	lsls	r1, r3, #10
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	4618      	mov	r0, r3
 80027ca:	4621      	mov	r1, r4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f04f 0400 	mov.w	r4, #0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4623      	mov	r3, r4
 80027d6:	f7fd fd03 	bl	80001e0 <__aeabi_uldivmod>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	3301      	adds	r3, #1
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e002      	b.n	8002802 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80027fe:	60bb      	str	r3, [r7, #8]
      break;
 8002800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002802:	68bb      	ldr	r3, [r7, #8]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400
 8002814:	007a1200 	.word	0x007a1200

08002818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_RCC_GetHCLKFreq+0x14>)
 800281e:	681b      	ldr	r3, [r3, #0]
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	20000000 	.word	0x20000000

08002830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002834:	f7ff fff0 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002838:	4601      	mov	r1, r0
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	0a9b      	lsrs	r3, r3, #10
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	08006750 	.word	0x08006750

08002858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800285c:	f7ff ffdc 	bl	8002818 <HAL_RCC_GetHCLKFreq>
 8002860:	4601      	mov	r1, r0
 8002862:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0b5b      	lsrs	r3, r3, #13
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_RCC_GetPCLK2Freq+0x24>)
 800286e:	5cd3      	ldrb	r3, [r2, r3]
 8002870:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40023800 	.word	0x40023800
 800287c:	08006750 	.word	0x08006750

08002880 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	220f      	movs	r2, #15
 800288e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_GetClockConfig+0x5c>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_RCC_GetClockConfig+0x60>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 020f 	and.w	r2, r3, #15
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	601a      	str	r2, [r3, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e01d      	b.n	8002932 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f815 	bl	800293a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4610      	mov	r0, r2
 8002924:	f000 f968 	bl	8002bf8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b06      	cmp	r3, #6
 8002976:	d007      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d122      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11b      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0202 	mvn.w	r2, #2
 80029c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f8ee 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 80029de:	e005      	b.n	80029ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8e0 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8f1 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d122      	bne.n	8002a46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d11b      	bne.n	8002a46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0204 	mvn.w	r2, #4
 8002a16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f8c4 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a32:	e005      	b.n	8002a40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8b6 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f8c7 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d122      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11b      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0208 	mvn.w	r2, #8
 8002a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2204      	movs	r2, #4
 8002a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f89a 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002a86:	e005      	b.n	8002a94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f88c 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f89d 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d122      	bne.n	8002aee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d11b      	bne.n	8002aee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f06f 0210 	mvn.w	r2, #16
 8002abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f870 	bl	8002bba <HAL_TIM_IC_CaptureCallback>
 8002ada:	e005      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f862 	bl	8002ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f873 	bl	8002bce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d10e      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0201 	mvn.w	r2, #1
 8002b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7fd ffa3 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d107      	bne.n	8002b46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8e3 	bl	8002d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d10e      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f838 	bl	8002be2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d10e      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d107      	bne.n	8002b9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f06f 0220 	mvn.w	r2, #32
 8002b96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8ad 	bl	8002cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a34      	ldr	r2, [pc, #208]	; (8002cdc <TIM_Base_SetConfig+0xe4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00f      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c16:	d00b      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a31      	ldr	r2, [pc, #196]	; (8002ce0 <TIM_Base_SetConfig+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <TIM_Base_SetConfig+0xec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_Base_SetConfig+0x38>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <TIM_Base_SetConfig+0xf0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d108      	bne.n	8002c42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <TIM_Base_SetConfig+0xe4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01b      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d017      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a22      	ldr	r2, [pc, #136]	; (8002ce0 <TIM_Base_SetConfig+0xe8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a21      	ldr	r2, [pc, #132]	; (8002ce4 <TIM_Base_SetConfig+0xec>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00f      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a20      	ldr	r2, [pc, #128]	; (8002ce8 <TIM_Base_SetConfig+0xf0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00b      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <TIM_Base_SetConfig+0xf4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <TIM_Base_SetConfig+0xf8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d003      	beq.n	8002c82 <TIM_Base_SetConfig+0x8a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <TIM_Base_SetConfig+0xfc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d108      	bne.n	8002c94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a08      	ldr	r2, [pc, #32]	; (8002cdc <TIM_Base_SetConfig+0xe4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d103      	bne.n	8002cc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40000400 	.word	0x40000400
 8002ce4:	40000800 	.word	0x40000800
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	40014000 	.word	0x40014000
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	40014800 	.word	0x40014800

08002cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e03f      	b.n	8002db2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7fd ff18 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2224      	movs	r2, #36	; 0x24
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f90b 	bl	8002f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b088      	sub	sp, #32
 8002dbe:	af02      	add	r7, sp, #8
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	f040 8083 	bne.w	8002ee2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_UART_Transmit+0x2e>
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e07b      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Transmit+0x40>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e074      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2221      	movs	r2, #33	; 0x21
 8002e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e10:	f7fe f8a8 	bl	8000f64 <HAL_GetTick>
 8002e14:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e22:	e042      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3a:	d122      	bne.n	8002e82 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2180      	movs	r1, #128	; 0x80
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f850 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e046      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	3302      	adds	r3, #2
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	e017      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	e013      	b.n	8002eaa <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f82d 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e023      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	60ba      	str	r2, [r7, #8]
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1b7      	bne.n	8002e24 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2140      	movs	r1, #64	; 0x40
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f814 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e00a      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e000      	b.n	8002ee4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ee2:	2302      	movs	r3, #2
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efc:	e02c      	b.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d028      	beq.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f0c:	f7fe f82a 	bl	8000f64 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d21d      	bcs.n	8002f58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e00f      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d0c3      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fc0:	f023 030c 	bic.w	r3, r3, #12
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fec:	f040 80e4 	bne.w	80031b8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4aab      	ldr	r2, [pc, #684]	; (80032a4 <UART_SetConfig+0x324>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <UART_SetConfig+0x84>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4aaa      	ldr	r2, [pc, #680]	; (80032a8 <UART_SetConfig+0x328>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d16c      	bne.n	80030de <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003004:	f7ff fc28 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003008:	4602      	mov	r2, r0
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009a      	lsls	r2, r3, #2
 8003012:	441a      	add	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	4aa3      	ldr	r2, [pc, #652]	; (80032ac <UART_SetConfig+0x32c>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	011c      	lsls	r4, r3, #4
 8003028:	f7ff fc16 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800302c:	4602      	mov	r2, r0
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003042:	f7ff fc09 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003046:	4602      	mov	r2, r0
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	009a      	lsls	r2, r3, #2
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	4a93      	ldr	r2, [pc, #588]	; (80032ac <UART_SetConfig+0x32c>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2264      	movs	r2, #100	; 0x64
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	1aeb      	subs	r3, r5, r3
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	3332      	adds	r3, #50	; 0x32
 8003070:	4a8e      	ldr	r2, [pc, #568]	; (80032ac <UART_SetConfig+0x32c>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800307e:	441c      	add	r4, r3
 8003080:	f7ff fbea 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003084:	4602      	mov	r2, r0
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009a      	lsls	r2, r3, #2
 800308e:	441a      	add	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fbb2 f5f3 	udiv	r5, r2, r3
 800309a:	f7ff fbdd 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009a      	lsls	r2, r3, #2
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a7d      	ldr	r2, [pc, #500]	; (80032ac <UART_SetConfig+0x32c>)
 80030b6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2264      	movs	r2, #100	; 0x64
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	1aeb      	subs	r3, r5, r3
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	3332      	adds	r3, #50	; 0x32
 80030c8:	4a78      	ldr	r2, [pc, #480]	; (80032ac <UART_SetConfig+0x32c>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4422      	add	r2, r4
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	e154      	b.n	8003388 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80030de:	f7ff fba7 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009a      	lsls	r2, r3, #2
 80030ec:	441a      	add	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f8:	4a6c      	ldr	r2, [pc, #432]	; (80032ac <UART_SetConfig+0x32c>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	011c      	lsls	r4, r3, #4
 8003102:	f7ff fb95 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003106:	4602      	mov	r2, r0
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb2 f5f3 	udiv	r5, r2, r3
 800311c:	f7ff fb88 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003120:	4602      	mov	r2, r0
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb2 f3f3 	udiv	r3, r2, r3
 8003136:	4a5d      	ldr	r2, [pc, #372]	; (80032ac <UART_SetConfig+0x32c>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	2264      	movs	r2, #100	; 0x64
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	1aeb      	subs	r3, r5, r3
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3332      	adds	r3, #50	; 0x32
 800314a:	4a58      	ldr	r2, [pc, #352]	; (80032ac <UART_SetConfig+0x32c>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003158:	441c      	add	r4, r3
 800315a:	f7ff fb69 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800315e:	4602      	mov	r2, r0
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fbb2 f5f3 	udiv	r5, r2, r3
 8003174:	f7ff fb5c 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003178:	4602      	mov	r2, r0
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009a      	lsls	r2, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	4a47      	ldr	r2, [pc, #284]	; (80032ac <UART_SetConfig+0x32c>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	2264      	movs	r2, #100	; 0x64
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	1aeb      	subs	r3, r5, r3
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	3332      	adds	r3, #50	; 0x32
 80031a2:	4a42      	ldr	r2, [pc, #264]	; (80032ac <UART_SetConfig+0x32c>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	f003 0207 	and.w	r2, r3, #7
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4422      	add	r2, r4
 80031b4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80031b6:	e0e7      	b.n	8003388 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a39      	ldr	r2, [pc, #228]	; (80032a4 <UART_SetConfig+0x324>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <UART_SetConfig+0x24c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <UART_SetConfig+0x328>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d171      	bne.n	80032b0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80031cc:	f7ff fb44 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009a      	lsls	r2, r3, #2
 80031da:	441a      	add	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e6:	4a31      	ldr	r2, [pc, #196]	; (80032ac <UART_SetConfig+0x32c>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	011c      	lsls	r4, r3, #4
 80031f0:	f7ff fb32 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	fbb2 f5f3 	udiv	r5, r2, r3
 800320a:	f7ff fb25 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800320e:	4602      	mov	r2, r0
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	4a21      	ldr	r2, [pc, #132]	; (80032ac <UART_SetConfig+0x32c>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2264      	movs	r2, #100	; 0x64
 800322e:	fb02 f303 	mul.w	r3, r2, r3
 8003232:	1aeb      	subs	r3, r5, r3
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	3332      	adds	r3, #50	; 0x32
 8003238:	4a1c      	ldr	r2, [pc, #112]	; (80032ac <UART_SetConfig+0x32c>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003244:	441c      	add	r4, r3
 8003246:	f7ff fb07 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 800324a:	4602      	mov	r2, r0
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	009a      	lsls	r2, r3, #2
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003260:	f7ff fafa 	bl	8002858 <HAL_RCC_GetPCLK2Freq>
 8003264:	4602      	mov	r2, r0
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009a      	lsls	r2, r3, #2
 800326e:	441a      	add	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <UART_SetConfig+0x32c>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2264      	movs	r2, #100	; 0x64
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	1aeb      	subs	r3, r5, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	3332      	adds	r3, #50	; 0x32
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <UART_SetConfig+0x32c>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4422      	add	r2, r4
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	e071      	b.n	8003388 <UART_SetConfig+0x408>
 80032a4:	40011000 	.word	0x40011000
 80032a8:	40011400 	.word	0x40011400
 80032ac:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032b0:	f7ff fabe 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	009a      	lsls	r2, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4a31      	ldr	r2, [pc, #196]	; (8003390 <UART_SetConfig+0x410>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	011c      	lsls	r4, r3, #4
 80032d4:	f7ff faac 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80032d8:	4602      	mov	r2, r0
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	009a      	lsls	r2, r3, #2
 80032e2:	441a      	add	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80032ee:	f7ff fa9f 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009a      	lsls	r2, r3, #2
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	4a21      	ldr	r2, [pc, #132]	; (8003390 <UART_SetConfig+0x410>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	; 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1aeb      	subs	r3, r5, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	; 0x32
 800331c:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <UART_SetConfig+0x410>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003328:	441c      	add	r4, r3
 800332a:	f7ff fa81 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 800332e:	4602      	mov	r2, r0
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009a      	lsls	r2, r3, #2
 8003338:	441a      	add	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fbb2 f5f3 	udiv	r5, r2, r3
 8003344:	f7ff fa74 	bl	8002830 <HAL_RCC_GetPCLK1Freq>
 8003348:	4602      	mov	r2, r0
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009a      	lsls	r2, r3, #2
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <UART_SetConfig+0x410>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2264      	movs	r2, #100	; 0x64
 8003368:	fb02 f303 	mul.w	r3, r2, r3
 800336c:	1aeb      	subs	r3, r5, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a07      	ldr	r2, [pc, #28]	; (8003390 <UART_SetConfig+0x410>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4422      	add	r2, r4
 8003384:	609a      	str	r2, [r3, #8]
}
 8003386:	e7ff      	b.n	8003388 <UART_SetConfig+0x408>
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bdb0      	pop	{r4, r5, r7, pc}
 8003390:	51eb851f 	.word	0x51eb851f

08003394 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800339a:	f3ef 8305 	mrs	r3, IPSR
 800339e:	60bb      	str	r3, [r7, #8]
  return(result);
 80033a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10f      	bne.n	80033c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a6:	f3ef 8310 	mrs	r3, PRIMASK
 80033aa:	607b      	str	r3, [r7, #4]
  return(result);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <osKernelInitialize+0x32>
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <osKernelInitialize+0x64>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d109      	bne.n	80033ce <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033ba:	f3ef 8311 	mrs	r3, BASEPRI
 80033be:	603b      	str	r3, [r7, #0]
  return(result);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80033c6:	f06f 0305 	mvn.w	r3, #5
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	e00c      	b.n	80033e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80033ce:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <osKernelInitialize+0x64>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d105      	bne.n	80033e2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80033d6:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <osKernelInitialize+0x64>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	e002      	b.n	80033e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80033e8:	68fb      	ldr	r3, [r7, #12]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000090 	.word	0x20000090

080033fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003402:	f3ef 8305 	mrs	r3, IPSR
 8003406:	60bb      	str	r3, [r7, #8]
  return(result);
 8003408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10f      	bne.n	800342e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	607b      	str	r3, [r7, #4]
  return(result);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <osKernelStart+0x32>
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <osKernelStart+0x64>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d109      	bne.n	8003436 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003422:	f3ef 8311 	mrs	r3, BASEPRI
 8003426:	603b      	str	r3, [r7, #0]
  return(result);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <osKernelStart+0x3a>
    stat = osErrorISR;
 800342e:	f06f 0305 	mvn.w	r3, #5
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e00e      	b.n	8003454 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <osKernelStart+0x64>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <osKernelStart+0x64>)
 8003440:	2202      	movs	r2, #2
 8003442:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003444:	f001 f86a 	bl	800451c <vTaskStartScheduler>
      stat = osOK;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <osKernelStart+0x58>
    } else {
      stat = osError;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003454:	68fb      	ldr	r3, [r7, #12]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000090 	.word	0x20000090

08003464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b092      	sub	sp, #72	; 0x48
 8003468:	af04      	add	r7, sp, #16
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003474:	f3ef 8305 	mrs	r3, IPSR
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 8094 	bne.w	80035aa <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003482:	f3ef 8310 	mrs	r3, PRIMASK
 8003486:	623b      	str	r3, [r7, #32]
  return(result);
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 808d 	bne.w	80035aa <osThreadNew+0x146>
 8003490:	4b48      	ldr	r3, [pc, #288]	; (80035b4 <osThreadNew+0x150>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d106      	bne.n	80034a6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003498:	f3ef 8311 	mrs	r3, BASEPRI
 800349c:	61fb      	str	r3, [r7, #28]
  return(result);
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 8082 	bne.w	80035aa <osThreadNew+0x146>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d07e      	beq.n	80035aa <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80034b0:	2318      	movs	r3, #24
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80034b4:	2300      	movs	r3, #0
 80034b6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80034b8:	f107 031b 	add.w	r3, r7, #27
 80034bc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d045      	beq.n	8003556 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <osThreadNew+0x74>
        name = attr->name;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d002      	beq.n	80034e6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <osThreadNew+0x9a>
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	2b38      	cmp	r3, #56	; 0x38
 80034f0:	d805      	bhi.n	80034fe <osThreadNew+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <osThreadNew+0x9e>
        return (NULL);
 80034fe:	2300      	movs	r3, #0
 8003500:	e054      	b.n	80035ac <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00e      	beq.n	8003538 <osThreadNew+0xd4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b5b      	cmp	r3, #91	; 0x5b
 8003520:	d90a      	bls.n	8003538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <osThreadNew+0xd4>
        mem = 1;
 8003532:	2301      	movs	r3, #1
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
 8003536:	e010      	b.n	800355a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10c      	bne.n	800355a <osThreadNew+0xf6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d108      	bne.n	800355a <osThreadNew+0xf6>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <osThreadNew+0xf6>
          mem = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	62bb      	str	r3, [r7, #40]	; 0x28
 8003554:	e001      	b.n	800355a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	2b01      	cmp	r3, #1
 800355e:	d110      	bne.n	8003582 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003568:	9202      	str	r2, [sp, #8]
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fe08 	bl	800418c <xTaskCreateStatic>
 800357c:	4603      	mov	r3, r0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e013      	b.n	80035aa <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	2b00      	cmp	r3, #0
 8003586:	d110      	bne.n	80035aa <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358a:	b29a      	uxth	r2, r3
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fe4f 	bl	800423e <xTaskCreate>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d001      	beq.n	80035aa <osThreadNew+0x146>
          hTask = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035aa:	697b      	ldr	r3, [r7, #20]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3738      	adds	r7, #56	; 0x38
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000090 	.word	0x20000090

080035b8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035c0:	f3ef 8305 	mrs	r3, IPSR
 80035c4:	613b      	str	r3, [r7, #16]
  return(result);
 80035c6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d109      	bne.n	80035ec <osDelay+0x34>
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <osDelay+0x58>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d109      	bne.n	80035f4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035e0:	f3ef 8311 	mrs	r3, BASEPRI
 80035e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <osDelay+0x3c>
    stat = osErrorISR;
 80035ec:	f06f 0305 	mvn.w	r3, #5
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e007      	b.n	8003604 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <osDelay+0x4c>
      vTaskDelay(ticks);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 ff58 	bl	80044b4 <vTaskDelay>
    }
  }

  return (stat);
 8003604:	697b      	ldr	r3, [r7, #20]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000090 	.word	0x20000090

08003614 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <vApplicationGetIdleTaskMemory+0x2c>)
 8003624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4a06      	ldr	r2, [pc, #24]	; (8003644 <vApplicationGetIdleTaskMemory+0x30>)
 800362a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2280      	movs	r2, #128	; 0x80
 8003630:	601a      	str	r2, [r3, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000094 	.word	0x20000094
 8003644:	200000f0 	.word	0x200000f0

08003648 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a07      	ldr	r2, [pc, #28]	; (8003674 <vApplicationGetTimerTaskMemory+0x2c>)
 8003658:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a06      	ldr	r2, [pc, #24]	; (8003678 <vApplicationGetTimerTaskMemory+0x30>)
 800365e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	200002f0 	.word	0x200002f0
 8003678:	2000034c 	.word	0x2000034c

0800367c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f103 0208 	add.w	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0208 	add.w	r2, r3, #8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f103 0208 	add.w	r2, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1c5a      	adds	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
 8003726:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d103      	bne.n	800373e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	60fb      	str	r3, [r7, #12]
 800373c:	e00c      	b.n	8003758 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3308      	adds	r3, #8
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e002      	b.n	800374c <vListInsert+0x2e>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d2f6      	bcs.n	8003746 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	601a      	str	r2, [r3, #0]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6892      	ldr	r2, [r2, #8]
 80037a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6852      	ldr	r2, [r2, #4]
 80037b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d103      	bne.n	80037c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	1e5a      	subs	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d109      	bne.n	800380c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	e7fe      	b.n	800380a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800380c:	f001 ffd6 	bl	80057bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	3b01      	subs	r3, #1
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	22ff      	movs	r2, #255	; 0xff
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d114      	bne.n	800388c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d01a      	beq.n	80038a0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3310      	adds	r3, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f8da 	bl	8004a28 <xTaskRemoveFromEventList>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800387a:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <xQueueGenericReset+0xcc>)
 800387c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	e009      	b.n	80038a0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3310      	adds	r3, #16
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fef3 	bl	800367c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	3324      	adds	r3, #36	; 0x24
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff feee 	bl	800367c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038a0:	f001 ffba 	bl	8005818 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038a4:	2301      	movs	r3, #1
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	e000ed04 	.word	0xe000ed04

080038b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08e      	sub	sp, #56	; 0x38
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <xQueueGenericCreateStatic+0x28>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038da:	e7fe      	b.n	80038da <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <xQueueGenericCreateStatic+0x42>
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
 80038f4:	e7fe      	b.n	80038f4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <xQueueGenericCreateStatic+0x4e>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <xQueueGenericCreateStatic+0x52>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <xQueueGenericCreateStatic+0x54>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <xQueueGenericCreateStatic+0x6c>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	623b      	str	r3, [r7, #32]
 800391e:	e7fe      	b.n	800391e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <xQueueGenericCreateStatic+0x78>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <xQueueGenericCreateStatic+0x7c>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <xQueueGenericCreateStatic+0x7e>
 8003930:	2300      	movs	r3, #0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <xQueueGenericCreateStatic+0x96>
 8003936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393a:	f383 8811 	msr	BASEPRI, r3
 800393e:	f3bf 8f6f 	isb	sy
 8003942:	f3bf 8f4f 	dsb	sy
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e7fe      	b.n	8003948 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800394a:	2350      	movs	r3, #80	; 0x50
 800394c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b50      	cmp	r3, #80	; 0x50
 8003952:	d009      	beq.n	8003968 <xQueueGenericCreateStatic+0xb4>
 8003954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e7fe      	b.n	8003966 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800397a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f805 	bl	8003998 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003990:	4618      	mov	r0, r3
 8003992:	3730      	adds	r7, #48	; 0x30
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e002      	b.n	80039ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80039c6:	2101      	movs	r1, #1
 80039c8:	69b8      	ldr	r0, [r7, #24]
 80039ca:	f7ff ff0b 	bl	80037e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
 80039ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039ee:	2300      	movs	r3, #0
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80039f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d109      	bne.n	8003a10 <xQueueGenericSend+0x30>
 80039fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0e:	e7fe      	b.n	8003a0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <xQueueGenericSend+0x3e>
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <xQueueGenericSend+0x42>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <xQueueGenericSend+0x44>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <xQueueGenericSend+0x5c>
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	e7fe      	b.n	8003a3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d103      	bne.n	8003a4a <xQueueGenericSend+0x6a>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d101      	bne.n	8003a4e <xQueueGenericSend+0x6e>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <xQueueGenericSend+0x70>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d109      	bne.n	8003a68 <xQueueGenericSend+0x88>
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
 8003a66:	e7fe      	b.n	8003a66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a68:	f001 f99a 	bl	8004da0 <xTaskGetSchedulerState>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <xQueueGenericSend+0x98>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <xQueueGenericSend+0x9c>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <xQueueGenericSend+0x9e>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <xQueueGenericSend+0xb6>
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a96:	f001 fe91 	bl	80057bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <xQueueGenericSend+0xcc>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d129      	bne.n	8003b00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab2:	f000 f9ff 	bl	8003eb4 <prvCopyDataToQueue>
 8003ab6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	3324      	adds	r3, #36	; 0x24
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 ffaf 	bl	8004a28 <xTaskRemoveFromEventList>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	; (8003bd0 <xQueueGenericSend+0x1f0>)
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	e00a      	b.n	8003af8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003ae8:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <xQueueGenericSend+0x1f0>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003af8:	f001 fe8e 	bl	8005818 <vPortExitCritical>
				return pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e063      	b.n	8003bc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b06:	f001 fe87 	bl	8005818 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e05c      	b.n	8003bc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ffe7 	bl	8004aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b22:	f001 fe79 	bl	8005818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b26:	f000 fd5d 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2a:	f001 fe47 	bl	80057bc <vPortEnterCritical>
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <xQueueGenericSend+0x164>
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSend+0x17a>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b5a:	f001 fe5d 	bl	8005818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 ffd6 	bl	8004b18 <xTaskCheckForTimeOut>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d124      	bne.n	8003bbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b74:	f000 fa96 	bl	80040a4 <prvIsQueueFull>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	3310      	adds	r3, #16
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ff00 	bl	800498c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8e:	f000 fa21 	bl	8003fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b92:	f000 fd35 	bl	8004600 <xTaskResumeAll>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f47f af7c 	bne.w	8003a96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <xQueueGenericSend+0x1f0>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e772      	b.n	8003a96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bb2:	f000 fa0f 	bl	8003fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb6:	f000 fd23 	bl	8004600 <xTaskResumeAll>
 8003bba:	e76c      	b.n	8003a96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bbe:	f000 fa09 	bl	8003fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc2:	f000 fd1d 	bl	8004600 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003bc6:	2300      	movs	r3, #0
		}
	}
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3738      	adds	r7, #56	; 0x38
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08e      	sub	sp, #56	; 0x38
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <xQueueGenericSendFromISR+0x2c>
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <xQueueGenericSendFromISR+0x3a>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <xQueueGenericSendFromISR+0x3e>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <xQueueGenericSendFromISR+0x40>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d109      	bne.n	8003c2c <xQueueGenericSendFromISR+0x58>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	e7fe      	b.n	8003c2a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSendFromISR+0x66>
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <xQueueGenericSendFromISR+0x6a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <xQueueGenericSendFromISR+0x6c>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d109      	bne.n	8003c58 <xQueueGenericSendFromISR+0x84>
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e7fe      	b.n	8003c56 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c58:	f001 fe8c 	bl	8005974 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c5c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	61ba      	str	r2, [r7, #24]
 8003c72:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c74:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d302      	bcc.n	8003c8a <xQueueGenericSendFromISR+0xb6>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d12c      	bne.n	8003ce4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c9a:	f000 f90b 	bl	8003eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d112      	bne.n	8003cce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	3324      	adds	r3, #36	; 0x24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 feb7 	bl	8004a28 <xTaskRemoveFromEventList>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00e      	beq.n	8003cde <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e007      	b.n	8003cde <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	b25a      	sxtb	r2, r3
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003ce2:	e001      	b.n	8003ce8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	; 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08c      	sub	sp, #48	; 0x30
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d109      	bne.n	8003d2a <xQueueReceive+0x2e>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	623b      	str	r3, [r7, #32]
 8003d28:	e7fe      	b.n	8003d28 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <xQueueReceive+0x3c>
 8003d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <xQueueReceive+0x40>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <xQueueReceive+0x42>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <xQueueReceive+0x5a>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	e7fe      	b.n	8003d54 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d56:	f001 f823 	bl	8004da0 <xTaskGetSchedulerState>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <xQueueReceive+0x6a>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <xQueueReceive+0x6e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <xQueueReceive+0x70>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d109      	bne.n	8003d84 <xQueueReceive+0x88>
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	61bb      	str	r3, [r7, #24]
 8003d82:	e7fe      	b.n	8003d82 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d84:	f001 fd1a 	bl	80057bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01f      	beq.n	8003dd4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d98:	f000 f8f6 	bl	8003f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00f      	beq.n	8003dcc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	3310      	adds	r3, #16
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe39 	bl	8004a28 <xTaskRemoveFromEventList>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003dbc:	4b3c      	ldr	r3, [pc, #240]	; (8003eb0 <xQueueReceive+0x1b4>)
 8003dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003dcc:	f001 fd24 	bl	8005818 <vPortExitCritical>
				return pdPASS;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e069      	b.n	8003ea8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003dda:	f001 fd1d 	bl	8005818 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e062      	b.n	8003ea8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003de8:	f107 0310 	add.w	r3, r7, #16
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fe7d 	bl	8004aec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003df6:	f001 fd0f 	bl	8005818 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003dfa:	f000 fbf3 	bl	80045e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003dfe:	f001 fcdd 	bl	80057bc <vPortEnterCritical>
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0e:	d103      	bne.n	8003e18 <xQueueReceive+0x11c>
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e1e:	b25b      	sxtb	r3, r3
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d103      	bne.n	8003e2e <xQueueReceive+0x132>
 8003e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e2e:	f001 fcf3 	bl	8005818 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e32:	1d3a      	adds	r2, r7, #4
 8003e34:	f107 0310 	add.w	r3, r7, #16
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fe6c 	bl	8004b18 <xTaskCheckForTimeOut>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d123      	bne.n	8003e8e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e48:	f000 f916 	bl	8004078 <prvIsQueueEmpty>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	3324      	adds	r3, #36	; 0x24
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fd96 	bl	800498c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e62:	f000 f8b7 	bl	8003fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003e66:	f000 fbcb 	bl	8004600 <xTaskResumeAll>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d189      	bne.n	8003d84 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <xQueueReceive+0x1b4>)
 8003e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	e780      	b.n	8003d84 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e84:	f000 f8a6 	bl	8003fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e88:	f000 fbba 	bl	8004600 <xTaskResumeAll>
 8003e8c:	e77a      	b.n	8003d84 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e90:	f000 f8a0 	bl	8003fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e94:	f000 fbb4 	bl	8004600 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e9a:	f000 f8ed 	bl	8004078 <prvIsQueueEmpty>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f43f af6f 	beq.w	8003d84 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ea6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3730      	adds	r7, #48	; 0x30
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d14d      	bne.n	8003f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff7c 	bl	8004ddc <xTaskPriorityDisinherit>
 8003ee4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	e043      	b.n	8003f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d119      	bne.n	8003f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6898      	ldr	r0, [r3, #8]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	461a      	mov	r2, r3
 8003efe:	68b9      	ldr	r1, [r7, #8]
 8003f00:	f001 ff76 	bl	8005df0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	441a      	add	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d32b      	bcc.n	8003f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	e026      	b.n	8003f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68d8      	ldr	r0, [r3, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	f001 ff5c 	bl	8005df0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	425b      	negs	r3, r3
 8003f42:	441a      	add	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d207      	bcs.n	8003f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	425b      	negs	r3, r3
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d105      	bne.n	8003f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f7e:	697b      	ldr	r3, [r7, #20]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68da      	ldr	r2, [r3, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	441a      	add	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d303      	bcc.n	8003fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68d9      	ldr	r1, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6838      	ldr	r0, [r7, #0]
 8003fc8:	f001 ff12 	bl	8005df0 <memcpy>
	}
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fdc:	f001 fbee 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe8:	e011      	b.n	800400e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d012      	beq.n	8004018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3324      	adds	r3, #36	; 0x24
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd16 	bl	8004a28 <xTaskRemoveFromEventList>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004002:	f000 fde9 	bl	8004bd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	3b01      	subs	r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	dce9      	bgt.n	8003fea <prvUnlockQueue+0x16>
 8004016:	e000      	b.n	800401a <prvUnlockQueue+0x46>
					break;
 8004018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004022:	f001 fbf9 	bl	8005818 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004026:	f001 fbc9 	bl	80057bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004032:	e011      	b.n	8004058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d012      	beq.n	8004062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3310      	adds	r3, #16
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fcf1 	bl	8004a28 <xTaskRemoveFromEventList>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800404c:	f000 fdc4 	bl	8004bd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004050:	7bbb      	ldrb	r3, [r7, #14]
 8004052:	3b01      	subs	r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800405c:	2b00      	cmp	r3, #0
 800405e:	dce9      	bgt.n	8004034 <prvUnlockQueue+0x60>
 8004060:	e000      	b.n	8004064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	22ff      	movs	r2, #255	; 0xff
 8004068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800406c:	f001 fbd4 	bl	8005818 <vPortExitCritical>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004080:	f001 fb9c 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	e001      	b.n	8004096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004096:	f001 fbbf 	bl	8005818 <vPortExitCritical>

	return xReturn;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040ac:	f001 fb86 	bl	80057bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d102      	bne.n	80040c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	e001      	b.n	80040c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040c6:	f001 fba7 	bl	8005818 <vPortExitCritical>

	return xReturn;
 80040ca:	68fb      	ldr	r3, [r7, #12]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	e014      	b.n	800410e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040e4:	4a0e      	ldr	r2, [pc, #56]	; (8004120 <vQueueAddToRegistry+0x4c>)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10b      	bne.n	8004108 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040f0:	490b      	ldr	r1, [pc, #44]	; (8004120 <vQueueAddToRegistry+0x4c>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040fa:	4a09      	ldr	r2, [pc, #36]	; (8004120 <vQueueAddToRegistry+0x4c>)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004106:	e005      	b.n	8004114 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b07      	cmp	r3, #7
 8004112:	d9e7      	bls.n	80040e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20008e80 	.word	0x20008e80

08004124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004134:	f001 fb42 	bl	80057bc <vPortEnterCritical>
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800413e:	b25b      	sxtb	r3, r3
 8004140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004144:	d103      	bne.n	800414e <vQueueWaitForMessageRestricted+0x2a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004154:	b25b      	sxtb	r3, r3
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d103      	bne.n	8004164 <vQueueWaitForMessageRestricted+0x40>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004164:	f001 fb58 	bl	8005818 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3324      	adds	r3, #36	; 0x24
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fc2b 	bl	80049d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800417e:	6978      	ldr	r0, [r7, #20]
 8004180:	f7ff ff28 	bl	8003fd4 <prvUnlockQueue>
	}
 8004184:	bf00      	nop
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08e      	sub	sp, #56	; 0x38
 8004190:	af04      	add	r7, sp, #16
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
 8004198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800419a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <xTaskCreateStatic+0x28>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	623b      	str	r3, [r7, #32]
 80041b2:	e7fe      	b.n	80041b2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <xTaskCreateStatic+0x42>
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e7fe      	b.n	80041cc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041ce:	235c      	movs	r3, #92	; 0x5c
 80041d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b5c      	cmp	r3, #92	; 0x5c
 80041d6:	d009      	beq.n	80041ec <xTaskCreateStatic+0x60>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e7fe      	b.n	80041ea <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d01e      	beq.n	8004230 <xTaskCreateStatic+0xa4>
 80041f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004200:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800420a:	2300      	movs	r3, #0
 800420c:	9303      	str	r3, [sp, #12]
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	9301      	str	r3, [sp, #4]
 8004218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68b9      	ldr	r1, [r7, #8]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f850 	bl	80042c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800422a:	f000 f8d3 	bl	80043d4 <prvAddNewTaskToReadyList>
 800422e:	e001      	b.n	8004234 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004234:	697b      	ldr	r3, [r7, #20]
	}
 8004236:	4618      	mov	r0, r3
 8004238:	3728      	adds	r7, #40	; 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08c      	sub	sp, #48	; 0x30
 8004242:	af04      	add	r7, sp, #16
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4618      	mov	r0, r3
 8004254:	f001 fbcc 	bl	80059f0 <pvPortMalloc>
 8004258:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004260:	205c      	movs	r0, #92	; 0x5c
 8004262:	f001 fbc5 	bl	80059f0 <pvPortMalloc>
 8004266:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	631a      	str	r2, [r3, #48]	; 0x30
 8004274:	e005      	b.n	8004282 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f001 fc7c 	bl	8005b74 <vPortFree>
 800427c:	e001      	b.n	8004282 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004290:	88fa      	ldrh	r2, [r7, #6]
 8004292:	2300      	movs	r3, #0
 8004294:	9303      	str	r3, [sp, #12]
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	9302      	str	r3, [sp, #8]
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f80e 	bl	80042c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042ac:	69f8      	ldr	r0, [r7, #28]
 80042ae:	f000 f891 	bl	80043d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042b2:	2301      	movs	r3, #1
 80042b4:	61bb      	str	r3, [r7, #24]
 80042b6:	e002      	b.n	80042be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042b8:	f04f 33ff 	mov.w	r3, #4294967295
 80042bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042be:	69bb      	ldr	r3, [r7, #24]
	}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3720      	adds	r7, #32
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	461a      	mov	r2, r3
 80042e0:	21a5      	movs	r1, #165	; 0xa5
 80042e2:	f001 fd90 	bl	8005e06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042f0:	3b01      	subs	r3, #1
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f023 0307 	bic.w	r3, r3, #7
 80042fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <prvInitialiseNewTask+0x56>
 800430a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	e7fe      	b.n	800431c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800431e:	2300      	movs	r3, #0
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	e012      	b.n	800434a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	4413      	add	r3, r2
 800432a:	7819      	ldrb	r1, [r3, #0]
 800432c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	4413      	add	r3, r2
 8004332:	3334      	adds	r3, #52	; 0x34
 8004334:	460a      	mov	r2, r1
 8004336:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d006      	beq.n	8004352 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b0f      	cmp	r3, #15
 800434e:	d9e9      	bls.n	8004324 <prvInitialiseNewTask+0x5c>
 8004350:	e000      	b.n	8004354 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004352:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800435c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435e:	2b37      	cmp	r3, #55	; 0x37
 8004360:	d901      	bls.n	8004366 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004362:	2337      	movs	r3, #55	; 0x37
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004370:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2200      	movs	r2, #0
 8004376:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	3304      	adds	r3, #4
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff f99d 	bl	80036bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	3318      	adds	r3, #24
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff f998 	bl	80036bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004390:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800439c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	2200      	movs	r2, #0
 80043a6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	69b8      	ldr	r0, [r7, #24]
 80043b6:	f001 f8db 	bl	8005570 <pxPortInitialiseStack>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043cc:	bf00      	nop
 80043ce:	3720      	adds	r7, #32
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043dc:	f001 f9ee 	bl	80057bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e0:	4b2d      	ldr	r3, [pc, #180]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ea:	4b2c      	ldr	r3, [pc, #176]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f2:	4a2a      	ldr	r2, [pc, #168]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f8:	4b27      	ldr	r3, [pc, #156]	; (8004498 <prvAddNewTaskToReadyList+0xc4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d110      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004400:	f000 fc0e 	bl	8004c20 <prvInitialiseTaskLists>
 8004404:	e00d      	b.n	8004422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004406:	4b26      	ldr	r3, [pc, #152]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d109      	bne.n	8004422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800440e:	4b23      	ldr	r3, [pc, #140]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	429a      	cmp	r2, r3
 800441a:	d802      	bhi.n	8004422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004422:	4b20      	ldr	r3, [pc, #128]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a1e      	ldr	r2, [pc, #120]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <prvAddNewTaskToReadyList+0xd0>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d903      	bls.n	8004448 <prvAddNewTaskToReadyList+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <prvAddNewTaskToReadyList+0xd4>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <prvAddNewTaskToReadyList+0xd8>)
 8004456:	441a      	add	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7ff f939 	bl	80036d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004464:	f001 f9d8 	bl	8005818 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <prvAddNewTaskToReadyList+0xcc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <prvAddNewTaskToReadyList+0xc8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447a:	429a      	cmp	r2, r3
 800447c:	d207      	bcs.n	800448e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <prvAddNewTaskToReadyList+0xdc>)
 8004480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000c20 	.word	0x20000c20
 800449c:	2000074c 	.word	0x2000074c
 80044a0:	20000c2c 	.word	0x20000c2c
 80044a4:	20000c3c 	.word	0x20000c3c
 80044a8:	20000c28 	.word	0x20000c28
 80044ac:	20000750 	.word	0x20000750
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d016      	beq.n	80044f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044c6:	4b13      	ldr	r3, [pc, #76]	; (8004514 <vTaskDelay+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <vTaskDelay+0x2e>
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60bb      	str	r3, [r7, #8]
 80044e0:	e7fe      	b.n	80044e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044e2:	f000 f87f 	bl	80045e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 fce3 	bl	8004eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044ee:	f000 f887 	bl	8004600 <xTaskResumeAll>
 80044f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044fa:	4b07      	ldr	r3, [pc, #28]	; (8004518 <vTaskDelay+0x64>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000c48 	.word	0x20000c48
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800452a:	463a      	mov	r2, r7
 800452c:	1d39      	adds	r1, r7, #4
 800452e:	f107 0308 	add.w	r3, r7, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f86e 	bl	8003614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	9202      	str	r2, [sp, #8]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	2300      	movs	r3, #0
 8004548:	460a      	mov	r2, r1
 800454a:	4920      	ldr	r1, [pc, #128]	; (80045cc <vTaskStartScheduler+0xb0>)
 800454c:	4820      	ldr	r0, [pc, #128]	; (80045d0 <vTaskStartScheduler+0xb4>)
 800454e:	f7ff fe1d 	bl	800418c <xTaskCreateStatic>
 8004552:	4602      	mov	r2, r0
 8004554:	4b1f      	ldr	r3, [pc, #124]	; (80045d4 <vTaskStartScheduler+0xb8>)
 8004556:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004558:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <vTaskStartScheduler+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d002      	beq.n	8004566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004560:	2301      	movs	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e001      	b.n	800456a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004570:	f000 fcf4 	bl	8004f5c <xTimerCreateTimerTask>
 8004574:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d115      	bne.n	80045a8 <vTaskStartScheduler+0x8c>
 800457c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <vTaskStartScheduler+0xbc>)
 8004590:	f04f 32ff 	mov.w	r2, #4294967295
 8004594:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <vTaskStartScheduler+0xc0>)
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <vTaskStartScheduler+0xc4>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045a2:	f001 f86d 	bl	8005680 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045a6:	e00d      	b.n	80045c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d109      	bne.n	80045c4 <vTaskStartScheduler+0xa8>
 80045b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e7fe      	b.n	80045c2 <vTaskStartScheduler+0xa6>
}
 80045c4:	bf00      	nop
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	08006728 	.word	0x08006728
 80045d0:	08004bf1 	.word	0x08004bf1
 80045d4:	20000c44 	.word	0x20000c44
 80045d8:	20000c40 	.word	0x20000c40
 80045dc:	20000c2c 	.word	0x20000c2c
 80045e0:	20000c24 	.word	0x20000c24

080045e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <vTaskSuspendAll+0x18>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3301      	adds	r3, #1
 80045ee:	4a03      	ldr	r2, [pc, #12]	; (80045fc <vTaskSuspendAll+0x18>)
 80045f0:	6013      	str	r3, [r2, #0]
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	20000c48 	.word	0x20000c48

08004600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <xTaskResumeAll+0x114>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <xTaskResumeAll+0x2a>
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	603b      	str	r3, [r7, #0]
 8004628:	e7fe      	b.n	8004628 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800462a:	f001 f8c7 	bl	80057bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800462e:	4b39      	ldr	r3, [pc, #228]	; (8004714 <xTaskResumeAll+0x114>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3b01      	subs	r3, #1
 8004634:	4a37      	ldr	r2, [pc, #220]	; (8004714 <xTaskResumeAll+0x114>)
 8004636:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <xTaskResumeAll+0x114>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d162      	bne.n	8004706 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <xTaskResumeAll+0x118>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d05e      	beq.n	8004706 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004648:	e02f      	b.n	80046aa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800464a:	4b34      	ldr	r3, [pc, #208]	; (800471c <xTaskResumeAll+0x11c>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3318      	adds	r3, #24
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f89a 	bl	8003790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f895 	bl	8003790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <xTaskResumeAll+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	429a      	cmp	r2, r3
 8004670:	d903      	bls.n	800467a <xTaskResumeAll+0x7a>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <xTaskResumeAll+0x120>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a27      	ldr	r2, [pc, #156]	; (8004724 <xTaskResumeAll+0x124>)
 8004688:	441a      	add	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7ff f820 	bl	80036d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469a:	4b23      	ldr	r3, [pc, #140]	; (8004728 <xTaskResumeAll+0x128>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <xTaskResumeAll+0x12c>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <xTaskResumeAll+0x11c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1cb      	bne.n	800464a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046b8:	f000 fb4c 	bl	8004d54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046bc:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <xTaskResumeAll+0x130>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d010      	beq.n	80046ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046c8:	f000 f846 	bl	8004758 <xTaskIncrementTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046d2:	4b16      	ldr	r3, [pc, #88]	; (800472c <xTaskResumeAll+0x12c>)
 80046d4:	2201      	movs	r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3b01      	subs	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f1      	bne.n	80046c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <xTaskResumeAll+0x130>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <xTaskResumeAll+0x12c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d009      	beq.n	8004706 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80046f2:	2301      	movs	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80046f6:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <xTaskResumeAll+0x134>)
 80046f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004706:	f001 f887 	bl	8005818 <vPortExitCritical>

	return xAlreadyYielded;
 800470a:	68bb      	ldr	r3, [r7, #8]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000c48 	.word	0x20000c48
 8004718:	20000c20 	.word	0x20000c20
 800471c:	20000be0 	.word	0x20000be0
 8004720:	20000c28 	.word	0x20000c28
 8004724:	20000750 	.word	0x20000750
 8004728:	2000074c 	.word	0x2000074c
 800472c:	20000c34 	.word	0x20000c34
 8004730:	20000c30 	.word	0x20000c30
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <xTaskGetTickCount+0x1c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004744:	687b      	ldr	r3, [r7, #4]
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	20000c24 	.word	0x20000c24

08004758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004762:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <xTaskIncrementTick+0x150>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 808d 	bne.w	8004886 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800476c:	4b4f      	ldr	r3, [pc, #316]	; (80048ac <xTaskIncrementTick+0x154>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004774:	4a4d      	ldr	r2, [pc, #308]	; (80048ac <xTaskIncrementTick+0x154>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11f      	bne.n	80047c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004780:	4b4b      	ldr	r3, [pc, #300]	; (80048b0 <xTaskIncrementTick+0x158>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d009      	beq.n	800479e <xTaskIncrementTick+0x46>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	e7fe      	b.n	800479c <xTaskIncrementTick+0x44>
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <xTaskIncrementTick+0x15c>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a41      	ldr	r2, [pc, #260]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4a41      	ldr	r2, [pc, #260]	; (80048b4 <xTaskIncrementTick+0x15c>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <xTaskIncrementTick+0x160>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3301      	adds	r3, #1
 80047b8:	4a3f      	ldr	r2, [pc, #252]	; (80048b8 <xTaskIncrementTick+0x160>)
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	f000 faca 	bl	8004d54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <xTaskIncrementTick+0x164>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d34e      	bcc.n	8004868 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xTaskIncrementTick+0x80>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <xTaskIncrementTick+0x82>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047de:	4b37      	ldr	r3, [pc, #220]	; (80048bc <xTaskIncrementTick+0x164>)
 80047e0:	f04f 32ff 	mov.w	r2, #4294967295
 80047e4:	601a      	str	r2, [r3, #0]
					break;
 80047e6:	e03f      	b.n	8004868 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047e8:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <xTaskIncrementTick+0x158>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d203      	bcs.n	8004808 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004800:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <xTaskIncrementTick+0x164>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6013      	str	r3, [r2, #0]
						break;
 8004806:	e02f      	b.n	8004868 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe ffbf 	bl	8003790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3318      	adds	r3, #24
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe ffb6 	bl	8003790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <xTaskIncrementTick+0x168>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d903      	bls.n	8004838 <xTaskIncrementTick+0xe0>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <xTaskIncrementTick+0x168>)
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004846:	441a      	add	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f7fe ff41 	bl	80036d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <xTaskIncrementTick+0x170>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	429a      	cmp	r2, r3
 8004860:	d3b3      	bcc.n	80047ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004862:	2301      	movs	r3, #1
 8004864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004866:	e7b0      	b.n	80047ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <xTaskIncrementTick+0x170>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4915      	ldr	r1, [pc, #84]	; (80048c4 <xTaskIncrementTick+0x16c>)
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d907      	bls.n	8004890 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004880:	2301      	movs	r3, #1
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e004      	b.n	8004890 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <xTaskIncrementTick+0x174>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0f      	ldr	r2, [pc, #60]	; (80048cc <xTaskIncrementTick+0x174>)
 800488e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004890:	4b0f      	ldr	r3, [pc, #60]	; (80048d0 <xTaskIncrementTick+0x178>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800489c:	697b      	ldr	r3, [r7, #20]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000c48 	.word	0x20000c48
 80048ac:	20000c24 	.word	0x20000c24
 80048b0:	20000bd8 	.word	0x20000bd8
 80048b4:	20000bdc 	.word	0x20000bdc
 80048b8:	20000c38 	.word	0x20000c38
 80048bc:	20000c40 	.word	0x20000c40
 80048c0:	20000c28 	.word	0x20000c28
 80048c4:	20000750 	.word	0x20000750
 80048c8:	2000074c 	.word	0x2000074c
 80048cc:	20000c30 	.word	0x20000c30
 80048d0:	20000c34 	.word	0x20000c34

080048d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <vTaskSwitchContext+0xa4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048e2:	4b26      	ldr	r3, [pc, #152]	; (800497c <vTaskSwitchContext+0xa8>)
 80048e4:	2201      	movs	r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048e8:	e040      	b.n	800496c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <vTaskSwitchContext+0xa8>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80048f0:	4b23      	ldr	r3, [pc, #140]	; (8004980 <vTaskSwitchContext+0xac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	e00f      	b.n	8004918 <vTaskSwitchContext+0x44>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <vTaskSwitchContext+0x3e>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e7fe      	b.n	8004910 <vTaskSwitchContext+0x3c>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b01      	subs	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	491a      	ldr	r1, [pc, #104]	; (8004984 <vTaskSwitchContext+0xb0>)
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0e5      	beq.n	80048f8 <vTaskSwitchContext+0x24>
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <vTaskSwitchContext+0xb0>)
 8004938:	4413      	add	r3, r2
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	605a      	str	r2, [r3, #4]
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3308      	adds	r3, #8
 800494e:	429a      	cmp	r2, r3
 8004950:	d104      	bne.n	800495c <vTaskSwitchContext+0x88>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	4a09      	ldr	r2, [pc, #36]	; (8004988 <vTaskSwitchContext+0xb4>)
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4a06      	ldr	r2, [pc, #24]	; (8004980 <vTaskSwitchContext+0xac>)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6013      	str	r3, [r2, #0]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	20000c48 	.word	0x20000c48
 800497c:	20000c34 	.word	0x20000c34
 8004980:	20000c28 	.word	0x20000c28
 8004984:	20000750 	.word	0x20000750
 8004988:	2000074c 	.word	0x2000074c

0800498c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <vTaskPlaceOnEventList+0x24>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e7fe      	b.n	80049ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <vTaskPlaceOnEventList+0x44>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f7fe feb0 	bl	800371e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049be:	2101      	movs	r1, #1
 80049c0:	6838      	ldr	r0, [r7, #0]
 80049c2:	f000 fa77 	bl	8004eb4 <prvAddCurrentTaskToDelayedList>
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	2000074c 	.word	0x2000074c

080049d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <vTaskPlaceOnEventListRestricted+0x26>
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e7fe      	b.n	80049f8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <vTaskPlaceOnEventListRestricted+0x50>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3318      	adds	r3, #24
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7fe fe67 	bl	80036d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a12:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	68b8      	ldr	r0, [r7, #8]
 8004a18:	f000 fa4c 	bl	8004eb4 <prvAddCurrentTaskToDelayedList>
	}
 8004a1c:	bf00      	nop
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	2000074c 	.word	0x2000074c

08004a28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d109      	bne.n	8004a52 <xTaskRemoveFromEventList+0x2a>
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e7fe      	b.n	8004a50 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3318      	adds	r3, #24
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fe9a 	bl	8003790 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <xTaskRemoveFromEventList+0xac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d11d      	bne.n	8004aa0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fe fe91 	bl	8003790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a72:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <xTaskRemoveFromEventList+0xb0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d903      	bls.n	8004a82 <xTaskRemoveFromEventList+0x5a>
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	4a16      	ldr	r2, [pc, #88]	; (8004ad8 <xTaskRemoveFromEventList+0xb0>)
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a13      	ldr	r2, [pc, #76]	; (8004adc <xTaskRemoveFromEventList+0xb4>)
 8004a90:	441a      	add	r2, r3
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fe fe1c 	bl	80036d6 <vListInsertEnd>
 8004a9e:	e005      	b.n	8004aac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3318      	adds	r3, #24
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	480e      	ldr	r0, [pc, #56]	; (8004ae0 <xTaskRemoveFromEventList+0xb8>)
 8004aa8:	f7fe fe15 	bl	80036d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab0:	4b0c      	ldr	r3, [pc, #48]	; (8004ae4 <xTaskRemoveFromEventList+0xbc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d905      	bls.n	8004ac6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004abe:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <xTaskRemoveFromEventList+0xc0>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	e001      	b.n	8004aca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004aca:	697b      	ldr	r3, [r7, #20]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000c48 	.word	0x20000c48
 8004ad8:	20000c28 	.word	0x20000c28
 8004adc:	20000750 	.word	0x20000750
 8004ae0:	20000be0 	.word	0x20000be0
 8004ae4:	2000074c 	.word	0x2000074c
 8004ae8:	20000c34 	.word	0x20000c34

08004aec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <vTaskInternalSetTimeOutState+0x24>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <vTaskInternalSetTimeOutState+0x28>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	605a      	str	r2, [r3, #4]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	20000c38 	.word	0x20000c38
 8004b14:	20000c24 	.word	0x20000c24

08004b18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <xTaskCheckForTimeOut+0x24>
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e7fe      	b.n	8004b3a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <xTaskCheckForTimeOut+0x3e>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
 8004b54:	e7fe      	b.n	8004b54 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b56:	f000 fe31 	bl	80057bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b5a:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <xTaskCheckForTimeOut+0xb8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b72:	d102      	bne.n	8004b7a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e023      	b.n	8004bc2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <xTaskCheckForTimeOut+0xbc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d007      	beq.n	8004b96 <xTaskCheckForTimeOut+0x7e>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e015      	b.n	8004bc2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d20b      	bcs.n	8004bb8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff9d 	bl	8004aec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e004      	b.n	8004bc2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bc2:	f000 fe29 	bl	8005818 <vPortExitCritical>

	return xReturn;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000c24 	.word	0x20000c24
 8004bd4:	20000c38 	.word	0x20000c38

08004bd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <vTaskMissedYield+0x14>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	20000c34 	.word	0x20000c34

08004bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bf8:	f000 f852 	bl	8004ca0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <prvIdleTask+0x28>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d9f9      	bls.n	8004bf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c04:	4b05      	ldr	r3, [pc, #20]	; (8004c1c <prvIdleTask+0x2c>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c14:	e7f0      	b.n	8004bf8 <prvIdleTask+0x8>
 8004c16:	bf00      	nop
 8004c18:	20000750 	.word	0x20000750
 8004c1c:	e000ed04 	.word	0xe000ed04

08004c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	e00c      	b.n	8004c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <prvInitialiseTaskLists+0x60>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fd1e 	bl	800367c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3301      	adds	r3, #1
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b37      	cmp	r3, #55	; 0x37
 8004c4a:	d9ef      	bls.n	8004c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c4c:	480d      	ldr	r0, [pc, #52]	; (8004c84 <prvInitialiseTaskLists+0x64>)
 8004c4e:	f7fe fd15 	bl	800367c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c52:	480d      	ldr	r0, [pc, #52]	; (8004c88 <prvInitialiseTaskLists+0x68>)
 8004c54:	f7fe fd12 	bl	800367c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c58:	480c      	ldr	r0, [pc, #48]	; (8004c8c <prvInitialiseTaskLists+0x6c>)
 8004c5a:	f7fe fd0f 	bl	800367c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c5e:	480c      	ldr	r0, [pc, #48]	; (8004c90 <prvInitialiseTaskLists+0x70>)
 8004c60:	f7fe fd0c 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c64:	480b      	ldr	r0, [pc, #44]	; (8004c94 <prvInitialiseTaskLists+0x74>)
 8004c66:	f7fe fd09 	bl	800367c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <prvInitialiseTaskLists+0x78>)
 8004c6c:	4a05      	ldr	r2, [pc, #20]	; (8004c84 <prvInitialiseTaskLists+0x64>)
 8004c6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <prvInitialiseTaskLists+0x7c>)
 8004c72:	4a05      	ldr	r2, [pc, #20]	; (8004c88 <prvInitialiseTaskLists+0x68>)
 8004c74:	601a      	str	r2, [r3, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000750 	.word	0x20000750
 8004c84:	20000bb0 	.word	0x20000bb0
 8004c88:	20000bc4 	.word	0x20000bc4
 8004c8c:	20000be0 	.word	0x20000be0
 8004c90:	20000bf4 	.word	0x20000bf4
 8004c94:	20000c0c 	.word	0x20000c0c
 8004c98:	20000bd8 	.word	0x20000bd8
 8004c9c:	20000bdc 	.word	0x20000bdc

08004ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca6:	e019      	b.n	8004cdc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ca8:	f000 fd88 	bl	80057bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004cac:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <prvCheckTasksWaitingTermination+0x4c>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fe fd69 	bl	8003790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <prvCheckTasksWaitingTermination+0x50>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <prvCheckTasksWaitingTermination+0x50>)
 8004cc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <prvCheckTasksWaitingTermination+0x54>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	4a09      	ldr	r2, [pc, #36]	; (8004cf4 <prvCheckTasksWaitingTermination+0x54>)
 8004cd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cd2:	f000 fda1 	bl	8005818 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f80e 	bl	8004cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <prvCheckTasksWaitingTermination+0x54>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e1      	bne.n	8004ca8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ce4:	bf00      	nop
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000bf4 	.word	0x20000bf4
 8004cf0:	20000c20 	.word	0x20000c20
 8004cf4:	20000c08 	.word	0x20000c08

08004cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ff30 	bl	8005b74 <vPortFree>
				vPortFree( pxTCB );
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 ff2d 	bl	8005b74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d1a:	e017      	b.n	8004d4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d103      	bne.n	8004d2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 ff24 	bl	8005b74 <vPortFree>
	}
 8004d2c:	e00e      	b.n	8004d4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d009      	beq.n	8004d4c <prvDeleteTCB+0x54>
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e7fe      	b.n	8004d4a <prvDeleteTCB+0x52>
	}
 8004d4c:	bf00      	nop
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <prvResetNextTaskUnblockTime+0x44>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <prvResetNextTaskUnblockTime+0x14>
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <prvResetNextTaskUnblockTime+0x16>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d004      	beq.n	8004d78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <prvResetNextTaskUnblockTime+0x48>)
 8004d70:	f04f 32ff 	mov.w	r2, #4294967295
 8004d74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d76:	e008      	b.n	8004d8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <prvResetNextTaskUnblockTime+0x44>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <prvResetNextTaskUnblockTime+0x48>)
 8004d88:	6013      	str	r3, [r2, #0]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	20000bd8 	.word	0x20000bd8
 8004d9c:	20000c40 	.word	0x20000c40

08004da0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <xTaskGetSchedulerState+0x34>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dae:	2301      	movs	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	e008      	b.n	8004dc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <xTaskGetSchedulerState+0x38>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d102      	bne.n	8004dc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e001      	b.n	8004dc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004dc6:	687b      	ldr	r3, [r7, #4]
	}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	20000c2c 	.word	0x20000c2c
 8004dd8:	20000c48 	.word	0x20000c48

08004ddc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d054      	beq.n	8004e9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004df2:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <xTaskPriorityDisinherit+0xcc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d009      	beq.n	8004e10 <xTaskPriorityDisinherit+0x34>
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e7fe      	b.n	8004e0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d109      	bne.n	8004e2c <xTaskPriorityDisinherit+0x50>
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	e7fe      	b.n	8004e2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	1e5a      	subs	r2, r3, #1
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d02c      	beq.n	8004e9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d128      	bne.n	8004e9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe fc9e 	bl	8003790 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e6c:	4b0f      	ldr	r3, [pc, #60]	; (8004eac <xTaskPriorityDisinherit+0xd0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <xTaskPriorityDisinherit+0xa0>
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <xTaskPriorityDisinherit+0xd0>)
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <xTaskPriorityDisinherit+0xd4>)
 8004e8a:	441a      	add	r2, r3
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f7fe fc1f 	bl	80036d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e9c:	697b      	ldr	r3, [r7, #20]
	}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000074c 	.word	0x2000074c
 8004eac:	20000c28 	.word	0x20000c28
 8004eb0:	20000750 	.word	0x20000750

08004eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ec4:	4b20      	ldr	r3, [pc, #128]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fc60 	bl	8003790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed6:	d10a      	bne.n	8004eee <prvAddCurrentTaskToDelayedList+0x3a>
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ede:	4b1a      	ldr	r3, [pc, #104]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4819      	ldr	r0, [pc, #100]	; (8004f4c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ee8:	f7fe fbf5 	bl	80036d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004eec:	e026      	b.n	8004f3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ef6:	4b14      	ldr	r3, [pc, #80]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d209      	bcs.n	8004f1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f06:	4b12      	ldr	r3, [pc, #72]	; (8004f50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b0f      	ldr	r3, [pc, #60]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f7fe fc03 	bl	800371e <vListInsert>
}
 8004f18:	e010      	b.n	8004f3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f1a:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <prvAddCurrentTaskToDelayedList+0x94>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fe fbf9 	bl	800371e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d202      	bcs.n	8004f3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6013      	str	r3, [r2, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	20000c24 	.word	0x20000c24
 8004f48:	2000074c 	.word	0x2000074c
 8004f4c:	20000c0c 	.word	0x20000c0c
 8004f50:	20000bdc 	.word	0x20000bdc
 8004f54:	20000bd8 	.word	0x20000bd8
 8004f58:	20000c40 	.word	0x20000c40

08004f5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f66:	f000 fac3 	bl	80054f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f6a:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <xTimerCreateTimerTask+0x80>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d021      	beq.n	8004fb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f7a:	1d3a      	adds	r2, r7, #4
 8004f7c:	f107 0108 	add.w	r1, r7, #8
 8004f80:	f107 030c 	add.w	r3, r7, #12
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fb5f 	bl	8003648 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	9202      	str	r2, [sp, #8]
 8004f92:	9301      	str	r3, [sp, #4]
 8004f94:	2302      	movs	r3, #2
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	4910      	ldr	r1, [pc, #64]	; (8004fe0 <xTimerCreateTimerTask+0x84>)
 8004f9e:	4811      	ldr	r0, [pc, #68]	; (8004fe4 <xTimerCreateTimerTask+0x88>)
 8004fa0:	f7ff f8f4 	bl	800418c <xTaskCreateStatic>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <xTimerCreateTimerTask+0x8c>)
 8004fa8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <xTimerCreateTimerTask+0x8c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <xTimerCreateTimerTask+0x74>
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	e7fe      	b.n	8004fce <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004fd0:	697b      	ldr	r3, [r7, #20]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3718      	adds	r7, #24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000c7c 	.word	0x20000c7c
 8004fe0:	08006730 	.word	0x08006730
 8004fe4:	08005105 	.word	0x08005105
 8004fe8:	20000c80 	.word	0x20000c80

08004fec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	; 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <xTimerGenericCommand+0x2c>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	e7fe      	b.n	8005016 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <xTimerGenericCommand+0x94>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d02a      	beq.n	8005076 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b05      	cmp	r3, #5
 8005030:	dc18      	bgt.n	8005064 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005032:	f7ff feb5 	bl	8004da0 <xTaskGetSchedulerState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b02      	cmp	r3, #2
 800503a:	d109      	bne.n	8005050 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800503c:	4b10      	ldr	r3, [pc, #64]	; (8005080 <xTimerGenericCommand+0x94>)
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	f107 0110 	add.w	r1, r7, #16
 8005044:	2300      	movs	r3, #0
 8005046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005048:	f7fe fcca 	bl	80039e0 <xQueueGenericSend>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24
 800504e:	e012      	b.n	8005076 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <xTimerGenericCommand+0x94>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	f107 0110 	add.w	r1, r7, #16
 8005058:	2300      	movs	r3, #0
 800505a:	2200      	movs	r2, #0
 800505c:	f7fe fcc0 	bl	80039e0 <xQueueGenericSend>
 8005060:	6278      	str	r0, [r7, #36]	; 0x24
 8005062:	e008      	b.n	8005076 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <xTimerGenericCommand+0x94>)
 8005066:	6818      	ldr	r0, [r3, #0]
 8005068:	f107 0110 	add.w	r1, r7, #16
 800506c:	2300      	movs	r3, #0
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	f7fe fdb0 	bl	8003bd4 <xQueueGenericSendFromISR>
 8005074:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005078:	4618      	mov	r0, r3
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	20000c7c 	.word	0x20000c7c

08005084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800508e:	4b1c      	ldr	r3, [pc, #112]	; (8005100 <prvProcessExpiredTimer+0x7c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	3304      	adds	r3, #4
 800509c:	4618      	mov	r0, r3
 800509e:	f7fe fb77 	bl	8003790 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d121      	bne.n	80050ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	18d1      	adds	r1, r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	6978      	ldr	r0, [r7, #20]
 80050b8:	f000 f8c8 	bl	800524c <prvInsertTimerInActiveList>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d015      	beq.n	80050ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	2100      	movs	r1, #0
 80050cc:	6978      	ldr	r0, [r7, #20]
 80050ce:	f7ff ff8d 	bl	8004fec <xTimerGenericCommand>
 80050d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <prvProcessExpiredTimer+0x6a>
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e7fe      	b.n	80050ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	6978      	ldr	r0, [r7, #20]
 80050f4:	4798      	blx	r3
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000c74 	.word	0x20000c74

08005104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f857 	bl	80051c4 <prvGetNextExpireTime>
 8005116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4619      	mov	r1, r3
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f803 	bl	8005128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005122:	f000 f8d5 	bl	80052d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005126:	e7f1      	b.n	800510c <prvTimerTask+0x8>

08005128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005132:	f7ff fa57 	bl	80045e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005136:	f107 0308 	add.w	r3, r7, #8
 800513a:	4618      	mov	r0, r3
 800513c:	f000 f866 	bl	800520c <prvSampleTimeNow>
 8005140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d130      	bne.n	80051aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10a      	bne.n	8005164 <prvProcessTimerOrBlockTask+0x3c>
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	429a      	cmp	r2, r3
 8005154:	d806      	bhi.n	8005164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005156:	f7ff fa53 	bl	8004600 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800515a:	68f9      	ldr	r1, [r7, #12]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ff91 	bl	8005084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005162:	e024      	b.n	80051ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800516a:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <prvProcessTimerOrBlockTask+0x90>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <prvProcessTimerOrBlockTask+0x94>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	4619      	mov	r1, r3
 800518a:	f7fe ffcb 	bl	8004124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800518e:	f7ff fa37 	bl	8004600 <xTaskResumeAll>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <prvProcessTimerOrBlockTask+0x98>)
 800519a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	f3bf 8f6f 	isb	sy
}
 80051a8:	e001      	b.n	80051ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80051aa:	f7ff fa29 	bl	8004600 <xTaskResumeAll>
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000c78 	.word	0x20000c78
 80051bc:	20000c7c 	.word	0x20000c7c
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80051cc:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <prvGetNextExpireTime+0x44>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bf0c      	ite	eq
 80051d6:	2301      	moveq	r3, #1
 80051d8:	2300      	movne	r3, #0
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	461a      	mov	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d105      	bne.n	80051f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <prvGetNextExpireTime+0x44>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	e001      	b.n	80051fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000c74 	.word	0x20000c74

0800520c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005214:	f7ff fa90 	bl	8004738 <xTaskGetTickCount>
 8005218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <prvSampleTimeNow+0x3c>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	429a      	cmp	r2, r3
 8005222:	d205      	bcs.n	8005230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005224:	f000 f904 	bl	8005430 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e002      	b.n	8005236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <prvSampleTimeNow+0x3c>)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800523c:	68fb      	ldr	r3, [r7, #12]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000c84 	.word	0x20000c84

0800524c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800525a:	2300      	movs	r3, #0
 800525c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d812      	bhi.n	8005298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e01b      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <prvInsertTimerInActiveList+0x7c>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f7fe fa44 	bl	800371e <vListInsert>
 8005296:	e012      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d206      	bcs.n	80052ae <prvInsertTimerInActiveList+0x62>
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d302      	bcc.n	80052ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e007      	b.n	80052be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052ae:	4b07      	ldr	r3, [pc, #28]	; (80052cc <prvInsertTimerInActiveList+0x80>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4619      	mov	r1, r3
 80052b8:	4610      	mov	r0, r2
 80052ba:	f7fe fa30 	bl	800371e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000c78 	.word	0x20000c78
 80052cc:	20000c74 	.word	0x20000c74

080052d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052d6:	e099      	b.n	800540c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	da17      	bge.n	800530e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052de:	1d3b      	adds	r3, r7, #4
 80052e0:	3304      	adds	r3, #4
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvProcessReceivedCommands+0x2e>
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	e7fe      	b.n	80052fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005304:	6850      	ldr	r0, [r2, #4]
 8005306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005308:	6892      	ldr	r2, [r2, #8]
 800530a:	4611      	mov	r1, r2
 800530c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	db7a      	blt.n	800540a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d004      	beq.n	800532a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005322:	3304      	adds	r3, #4
 8005324:	4618      	mov	r0, r3
 8005326:	f7fe fa33 	bl	8003790 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800532a:	463b      	mov	r3, r7
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff6d 	bl	800520c <prvSampleTimeNow>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b09      	cmp	r3, #9
 8005338:	d868      	bhi.n	800540c <prvProcessReceivedCommands+0x13c>
 800533a:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <prvProcessReceivedCommands+0x70>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005369 	.word	0x08005369
 8005344:	08005369 	.word	0x08005369
 8005348:	08005369 	.word	0x08005369
 800534c:	0800540d 	.word	0x0800540d
 8005350:	080053c3 	.word	0x080053c3
 8005354:	080053f9 	.word	0x080053f9
 8005358:	08005369 	.word	0x08005369
 800535c:	08005369 	.word	0x08005369
 8005360:	0800540d 	.word	0x0800540d
 8005364:	080053c3 	.word	0x080053c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	18d1      	adds	r1, r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005376:	f7ff ff69 	bl	800524c <prvInsertTimerInActiveList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d045      	beq.n	800540c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005386:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d13d      	bne.n	800540c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	441a      	add	r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	2300      	movs	r3, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a2:	f7ff fe23 	bl	8004fec <xTimerGenericCommand>
 80053a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d12e      	bne.n	800540c <prvProcessReceivedCommands+0x13c>
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61bb      	str	r3, [r7, #24]
 80053c0:	e7fe      	b.n	80053c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d109      	bne.n	80053e4 <prvProcessReceivedCommands+0x114>
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e7fe      	b.n	80053e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	18d1      	adds	r1, r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053f2:	f7ff ff2b 	bl	800524c <prvInsertTimerInActiveList>
					break;
 80053f6:	e009      	b.n	800540c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005404:	f000 fbb6 	bl	8005b74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005408:	e000      	b.n	800540c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800540a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540c:	4b07      	ldr	r3, [pc, #28]	; (800542c <prvProcessReceivedCommands+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	1d39      	adds	r1, r7, #4
 8005412:	2200      	movs	r2, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fc71 	bl	8003cfc <xQueueReceive>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f47f af5b 	bne.w	80052d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005422:	bf00      	nop
 8005424:	3730      	adds	r7, #48	; 0x30
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000c7c 	.word	0x20000c7c

08005430 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005436:	e044      	b.n	80054c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005442:	4b29      	ldr	r3, [pc, #164]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	3304      	adds	r3, #4
 8005450:	4618      	mov	r0, r3
 8005452:	f7fe f99d 	bl	8003790 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d12d      	bne.n	80054c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	429a      	cmp	r2, r3
 8005476:	d90e      	bls.n	8005496 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005484:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fe f945 	bl	800371e <vListInsert>
 8005494:	e015      	b.n	80054c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005496:	2300      	movs	r3, #0
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	2300      	movs	r3, #0
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	2100      	movs	r1, #0
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7ff fda3 	bl	8004fec <xTimerGenericCommand>
 80054a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <prvSwitchTimerLists+0x92>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	e7fe      	b.n	80054c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1b5      	bne.n	8005438 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80054d2:	4b06      	ldr	r3, [pc, #24]	; (80054ec <prvSwitchTimerLists+0xbc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <prvSwitchTimerLists+0xb8>)
 80054d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80054da:	4a04      	ldr	r2, [pc, #16]	; (80054ec <prvSwitchTimerLists+0xbc>)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	6013      	str	r3, [r2, #0]
}
 80054e0:	bf00      	nop
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20000c74 	.word	0x20000c74
 80054ec:	20000c78 	.word	0x20000c78

080054f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054f6:	f000 f961 	bl	80057bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <prvCheckForValidListAndQueue+0x60>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d120      	bne.n	8005544 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005502:	4814      	ldr	r0, [pc, #80]	; (8005554 <prvCheckForValidListAndQueue+0x64>)
 8005504:	f7fe f8ba 	bl	800367c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005508:	4813      	ldr	r0, [pc, #76]	; (8005558 <prvCheckForValidListAndQueue+0x68>)
 800550a:	f7fe f8b7 	bl	800367c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <prvCheckForValidListAndQueue+0x6c>)
 8005510:	4a10      	ldr	r2, [pc, #64]	; (8005554 <prvCheckForValidListAndQueue+0x64>)
 8005512:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005514:	4b12      	ldr	r3, [pc, #72]	; (8005560 <prvCheckForValidListAndQueue+0x70>)
 8005516:	4a10      	ldr	r2, [pc, #64]	; (8005558 <prvCheckForValidListAndQueue+0x68>)
 8005518:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800551a:	2300      	movs	r3, #0
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <prvCheckForValidListAndQueue+0x74>)
 8005520:	4a11      	ldr	r2, [pc, #68]	; (8005568 <prvCheckForValidListAndQueue+0x78>)
 8005522:	2110      	movs	r1, #16
 8005524:	200a      	movs	r0, #10
 8005526:	f7fe f9c5 	bl	80038b4 <xQueueGenericCreateStatic>
 800552a:	4602      	mov	r2, r0
 800552c:	4b08      	ldr	r3, [pc, #32]	; (8005550 <prvCheckForValidListAndQueue+0x60>)
 800552e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <prvCheckForValidListAndQueue+0x60>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <prvCheckForValidListAndQueue+0x60>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	490b      	ldr	r1, [pc, #44]	; (800556c <prvCheckForValidListAndQueue+0x7c>)
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fdc8 	bl	80040d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005544:	f000 f968 	bl	8005818 <vPortExitCritical>
}
 8005548:	bf00      	nop
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20000c7c 	.word	0x20000c7c
 8005554:	20000c4c 	.word	0x20000c4c
 8005558:	20000c60 	.word	0x20000c60
 800555c:	20000c74 	.word	0x20000c74
 8005560:	20000c78 	.word	0x20000c78
 8005564:	20000d28 	.word	0x20000d28
 8005568:	20000c88 	.word	0x20000c88
 800556c:	08006738 	.word	0x08006738

08005570 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3b04      	subs	r3, #4
 8005580:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3b04      	subs	r3, #4
 800558e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055a0:	4a0c      	ldr	r2, [pc, #48]	; (80055d4 <pxPortInitialiseStack+0x64>)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3b14      	subs	r3, #20
 80055aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3b04      	subs	r3, #4
 80055b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f06f 0202 	mvn.w	r2, #2
 80055be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3b20      	subs	r3, #32
 80055c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	080055d9 	.word	0x080055d9

080055d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <prvTaskExitError+0x50>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d009      	beq.n	8005600 <prvTaskExitError+0x28>
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e7fe      	b.n	80055fe <prvTaskExitError+0x26>
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005612:	bf00      	nop
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0fc      	beq.n	8005614 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800561a:	bf00      	nop
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000008 	.word	0x20000008
 800562c:	00000000 	.word	0x00000000

08005630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <pxCurrentTCBConst2>)
 8005632:	6819      	ldr	r1, [r3, #0]
 8005634:	6808      	ldr	r0, [r1, #0]
 8005636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563a:	f380 8809 	msr	PSP, r0
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8811 	msr	BASEPRI, r0
 800564a:	4770      	bx	lr
 800564c:	f3af 8000 	nop.w

08005650 <pxCurrentTCBConst2>:
 8005650:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop

08005658 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005658:	4808      	ldr	r0, [pc, #32]	; (800567c <prvPortStartFirstTask+0x24>)
 800565a:	6800      	ldr	r0, [r0, #0]
 800565c:	6800      	ldr	r0, [r0, #0]
 800565e:	f380 8808 	msr	MSP, r0
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8814 	msr	CONTROL, r0
 800566a:	b662      	cpsie	i
 800566c:	b661      	cpsie	f
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	df00      	svc	0
 8005678:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800567a:	bf00      	nop
 800567c:	e000ed08 	.word	0xe000ed08

08005680 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <xPortStartScheduler+0x118>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a44      	ldr	r2, [pc, #272]	; (800579c <xPortStartScheduler+0x11c>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d109      	bne.n	80056a4 <xPortStartScheduler+0x24>
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	e7fe      	b.n	80056a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056a4:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <xPortStartScheduler+0x118>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <xPortStartScheduler+0x120>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d109      	bne.n	80056c2 <xPortStartScheduler+0x42>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e7fe      	b.n	80056c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056c2:	4b38      	ldr	r3, [pc, #224]	; (80057a4 <xPortStartScheduler+0x124>)
 80056c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	22ff      	movs	r2, #255	; 0xff
 80056d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <xPortStartScheduler+0x128>)
 80056e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ea:	4b30      	ldr	r3, [pc, #192]	; (80057ac <xPortStartScheduler+0x12c>)
 80056ec:	2207      	movs	r2, #7
 80056ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056f0:	e009      	b.n	8005706 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80056f2:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <xPortStartScheduler+0x12c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4a2c      	ldr	r2, [pc, #176]	; (80057ac <xPortStartScheduler+0x12c>)
 80056fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b80      	cmp	r3, #128	; 0x80
 8005710:	d0ef      	beq.n	80056f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005712:	4b26      	ldr	r3, [pc, #152]	; (80057ac <xPortStartScheduler+0x12c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f1c3 0307 	rsb	r3, r3, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	d009      	beq.n	8005732 <xPortStartScheduler+0xb2>
 800571e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60bb      	str	r3, [r7, #8]
 8005730:	e7fe      	b.n	8005730 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005732:	4b1e      	ldr	r3, [pc, #120]	; (80057ac <xPortStartScheduler+0x12c>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <xPortStartScheduler+0x12c>)
 800573a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800573c:	4b1b      	ldr	r3, [pc, #108]	; (80057ac <xPortStartScheduler+0x12c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <xPortStartScheduler+0x12c>)
 8005746:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <xPortStartScheduler+0x130>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <xPortStartScheduler+0x130>)
 8005756:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800575a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <xPortStartScheduler+0x130>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <xPortStartScheduler+0x130>)
 8005762:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005768:	f000 f8d6 	bl	8005918 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800576c:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <xPortStartScheduler+0x134>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005772:	f000 f8f5 	bl	8005960 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <xPortStartScheduler+0x138>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0f      	ldr	r2, [pc, #60]	; (80057b8 <xPortStartScheduler+0x138>)
 800577c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005780:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005782:	f7ff ff69 	bl	8005658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005786:	f7ff f8a5 	bl	80048d4 <vTaskSwitchContext>
	prvTaskExitError();
 800578a:	f7ff ff25 	bl	80055d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	e000ed00 	.word	0xe000ed00
 800579c:	410fc271 	.word	0x410fc271
 80057a0:	410fc270 	.word	0x410fc270
 80057a4:	e000e400 	.word	0xe000e400
 80057a8:	20000d78 	.word	0x20000d78
 80057ac:	20000d7c 	.word	0x20000d7c
 80057b0:	e000ed20 	.word	0xe000ed20
 80057b4:	20000008 	.word	0x20000008
 80057b8:	e000ef34 	.word	0xe000ef34

080057bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <vPortEnterCritical+0x54>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3301      	adds	r3, #1
 80057da:	4a0d      	ldr	r2, [pc, #52]	; (8005810 <vPortEnterCritical+0x54>)
 80057dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057de:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <vPortEnterCritical+0x54>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10e      	bne.n	8005804 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <vPortEnterCritical+0x58>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <vPortEnterCritical+0x48>
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	e7fe      	b.n	8005802 <vPortEnterCritical+0x46>
	}
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	20000008 	.word	0x20000008
 8005814:	e000ed04 	.word	0xe000ed04

08005818 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800581e:	4b11      	ldr	r3, [pc, #68]	; (8005864 <vPortExitCritical+0x4c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <vPortExitCritical+0x22>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	607b      	str	r3, [r7, #4]
 8005838:	e7fe      	b.n	8005838 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <vPortExitCritical+0x4c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3b01      	subs	r3, #1
 8005840:	4a08      	ldr	r2, [pc, #32]	; (8005864 <vPortExitCritical+0x4c>)
 8005842:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <vPortExitCritical+0x4c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <vPortExitCritical+0x3e>
 800584c:	2300      	movs	r3, #0
 800584e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000008 	.word	0x20000008
	...

08005870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005870:	f3ef 8009 	mrs	r0, PSP
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <pxCurrentTCBConst>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f01e 0f10 	tst.w	lr, #16
 8005880:	bf08      	it	eq
 8005882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005894:	f380 8811 	msr	BASEPRI, r0
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f7ff f818 	bl	80048d4 <vTaskSwitchContext>
 80058a4:	f04f 0000 	mov.w	r0, #0
 80058a8:	f380 8811 	msr	BASEPRI, r0
 80058ac:	bc09      	pop	{r0, r3}
 80058ae:	6819      	ldr	r1, [r3, #0]
 80058b0:	6808      	ldr	r0, [r1, #0]
 80058b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058b6:	f01e 0f10 	tst.w	lr, #16
 80058ba:	bf08      	it	eq
 80058bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058c0:	f380 8809 	msr	PSP, r0
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst>:
 80058d0:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058f0:	f7fe ff32 	bl	8004758 <xTaskIncrementTick>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058fa:	4b06      	ldr	r3, [pc, #24]	; (8005914 <SysTick_Handler+0x3c>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	2300      	movs	r3, #0
 8005904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	e000ed04 	.word	0xe000ed04

08005918 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <vPortSetupTimerInterrupt+0x34>)
 800591e:	2200      	movs	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <vPortSetupTimerInterrupt+0x38>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005928:	4b0a      	ldr	r3, [pc, #40]	; (8005954 <vPortSetupTimerInterrupt+0x3c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <vPortSetupTimerInterrupt+0x40>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	4a09      	ldr	r2, [pc, #36]	; (800595c <vPortSetupTimerInterrupt+0x44>)
 8005936:	3b01      	subs	r3, #1
 8005938:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <vPortSetupTimerInterrupt+0x34>)
 800593c:	2207      	movs	r2, #7
 800593e:	601a      	str	r2, [r3, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000e010 	.word	0xe000e010
 8005950:	e000e018 	.word	0xe000e018
 8005954:	20000000 	.word	0x20000000
 8005958:	10624dd3 	.word	0x10624dd3
 800595c:	e000e014 	.word	0xe000e014

08005960 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005960:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005970 <vPortEnableVFP+0x10>
 8005964:	6801      	ldr	r1, [r0, #0]
 8005966:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800596a:	6001      	str	r1, [r0, #0]
 800596c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800596e:	bf00      	nop
 8005970:	e000ed88 	.word	0xe000ed88

08005974 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800597a:	f3ef 8305 	mrs	r3, IPSR
 800597e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b0f      	cmp	r3, #15
 8005984:	d913      	bls.n	80059ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005986:	4a16      	ldr	r2, [pc, #88]	; (80059e0 <vPortValidateInterruptPriority+0x6c>)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <vPortValidateInterruptPriority+0x70>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	7afa      	ldrb	r2, [r7, #11]
 8005996:	429a      	cmp	r2, r3
 8005998:	d209      	bcs.n	80059ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	e7fe      	b.n	80059ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059ae:	4b0e      	ldr	r3, [pc, #56]	; (80059e8 <vPortValidateInterruptPriority+0x74>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059b6:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <vPortValidateInterruptPriority+0x78>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d909      	bls.n	80059d2 <vPortValidateInterruptPriority+0x5e>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	e7fe      	b.n	80059d0 <vPortValidateInterruptPriority+0x5c>
	}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e3f0 	.word	0xe000e3f0
 80059e4:	20000d78 	.word	0x20000d78
 80059e8:	e000ed0c 	.word	0xe000ed0c
 80059ec:	20000d7c 	.word	0x20000d7c

080059f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80059fc:	f7fe fdf2 	bl	80045e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a00:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <pvPortMalloc+0x170>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a08:	f000 f90c 	bl	8005c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a0c:	4b55      	ldr	r3, [pc, #340]	; (8005b64 <pvPortMalloc+0x174>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f040 808c 	bne.w	8005b32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01c      	beq.n	8005a5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005a20:	2208      	movs	r2, #8
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4413      	add	r3, r2
 8005a26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d013      	beq.n	8005a5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f023 0307 	bic.w	r3, r3, #7
 8005a38:	3308      	adds	r3, #8
 8005a3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <pvPortMalloc+0x6a>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e7fe      	b.n	8005a58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d068      	beq.n	8005b32 <pvPortMalloc+0x142>
 8005a60:	4b41      	ldr	r3, [pc, #260]	; (8005b68 <pvPortMalloc+0x178>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d863      	bhi.n	8005b32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005a6a:	4b40      	ldr	r3, [pc, #256]	; (8005b6c <pvPortMalloc+0x17c>)
 8005a6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005a6e:	4b3f      	ldr	r3, [pc, #252]	; (8005b6c <pvPortMalloc+0x17c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a74:	e004      	b.n	8005a80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d903      	bls.n	8005a92 <pvPortMalloc+0xa2>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f1      	bne.n	8005a76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005a92:	4b33      	ldr	r3, [pc, #204]	; (8005b60 <pvPortMalloc+0x170>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d04a      	beq.n	8005b32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	4413      	add	r3, r2
 8005aa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	2308      	movs	r3, #8
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d91e      	bls.n	8005afc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <pvPortMalloc+0xf4>
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	613b      	str	r3, [r7, #16]
 8005ae2:	e7fe      	b.n	8005ae2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f000 f8f6 	bl	8005ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <pvPortMalloc+0x178>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <pvPortMalloc+0x178>)
 8005b08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b0a:	4b17      	ldr	r3, [pc, #92]	; (8005b68 <pvPortMalloc+0x178>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <pvPortMalloc+0x180>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d203      	bcs.n	8005b1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <pvPortMalloc+0x178>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <pvPortMalloc+0x180>)
 8005b1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <pvPortMalloc+0x174>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	431a      	orrs	r2, r3
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b32:	f7fe fd65 	bl	8004600 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <pvPortMalloc+0x164>
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e7fe      	b.n	8005b52 <pvPortMalloc+0x162>
	return pvReturn;
 8005b54:	69fb      	ldr	r3, [r7, #28]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3728      	adds	r7, #40	; 0x28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	20008d88 	.word	0x20008d88
 8005b64:	20008d94 	.word	0x20008d94
 8005b68:	20008d8c 	.word	0x20008d8c
 8005b6c:	20008d80 	.word	0x20008d80
 8005b70:	20008d90 	.word	0x20008d90

08005b74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d046      	beq.n	8005c14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005b86:	2308      	movs	r3, #8
 8005b88:	425b      	negs	r3, r3
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	4b20      	ldr	r3, [pc, #128]	; (8005c1c <vPortFree+0xa8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <vPortFree+0x42>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e7fe      	b.n	8005bb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <vPortFree+0x5e>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
 8005bd0:	e7fe      	b.n	8005bd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4b11      	ldr	r3, [pc, #68]	; (8005c1c <vPortFree+0xa8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d019      	beq.n	8005c14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d115      	bne.n	8005c14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <vPortFree+0xa8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	401a      	ands	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005bf8:	f7fe fcf4 	bl	80045e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <vPortFree+0xac>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4413      	add	r3, r2
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <vPortFree+0xac>)
 8005c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c0a:	6938      	ldr	r0, [r7, #16]
 8005c0c:	f000 f86c 	bl	8005ce8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005c10:	f7fe fcf6 	bl	8004600 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20008d94 	.word	0x20008d94
 8005c20:	20008d8c 	.word	0x20008d8c

08005c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005c2a:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 8005c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005c30:	4b27      	ldr	r3, [pc, #156]	; (8005cd0 <prvHeapInit+0xac>)
 8005c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3307      	adds	r3, #7
 8005c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <prvHeapInit+0xac>)
 8005c54:	4413      	add	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <prvHeapInit+0xb0>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005c70:	2208      	movs	r2, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005c86:	4b14      	ldr	r3, [pc, #80]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <prvHeapInit+0xb4>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <prvHeapInit+0xb4>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <prvHeapInit+0xb8>)
 8005cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <prvHeapInit+0xbc>)
 8005cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cbc:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <prvHeapInit+0xc0>)
 8005cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	20000d80 	.word	0x20000d80
 8005cd4:	20008d80 	.word	0x20008d80
 8005cd8:	20008d88 	.word	0x20008d88
 8005cdc:	20008d90 	.word	0x20008d90
 8005ce0:	20008d8c 	.word	0x20008d8c
 8005ce4:	20008d94 	.word	0x20008d94

08005ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <prvInsertBlockIntoFreeList+0xac>)
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e002      	b.n	8005cfc <prvInsertBlockIntoFreeList+0x14>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d8f7      	bhi.n	8005cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	4413      	add	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d108      	bne.n	8005d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	441a      	add	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	441a      	add	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d118      	bne.n	8005d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d00d      	beq.n	8005d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	685a      	ldr	r2, [r3, #4]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <prvInsertBlockIntoFreeList+0xb0>)
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	e003      	b.n	8005d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d002      	beq.n	8005d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20008d80 	.word	0x20008d80
 8005d98:	20008d88 	.word	0x20008d88

08005d9c <__errno>:
 8005d9c:	4b01      	ldr	r3, [pc, #4]	; (8005da4 <__errno+0x8>)
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	2000000c 	.word	0x2000000c

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4e0d      	ldr	r6, [pc, #52]	; (8005de0 <__libc_init_array+0x38>)
 8005dac:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005dae:	1ba4      	subs	r4, r4, r6
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	2500      	movs	r5, #0
 8005db4:	42a5      	cmp	r5, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	4e0b      	ldr	r6, [pc, #44]	; (8005de8 <__libc_init_array+0x40>)
 8005dba:	4c0c      	ldr	r4, [pc, #48]	; (8005dec <__libc_init_array+0x44>)
 8005dbc:	f000 fc94 	bl	80066e8 <_init>
 8005dc0:	1ba4      	subs	r4, r4, r6
 8005dc2:	10a4      	asrs	r4, r4, #2
 8005dc4:	2500      	movs	r5, #0
 8005dc6:	42a5      	cmp	r5, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd0:	4798      	blx	r3
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dda:	4798      	blx	r3
 8005ddc:	3501      	adds	r5, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	080067c4 	.word	0x080067c4
 8005de4:	080067c4 	.word	0x080067c4
 8005de8:	080067c4 	.word	0x080067c4
 8005dec:	080067c8 	.word	0x080067c8

08005df0 <memcpy>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	1e43      	subs	r3, r0, #1
 8005df4:	440a      	add	r2, r1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	d100      	bne.n	8005dfc <memcpy+0xc>
 8005dfa:	bd10      	pop	{r4, pc}
 8005dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e04:	e7f7      	b.n	8005df6 <memcpy+0x6>

08005e06 <memset>:
 8005e06:	4402      	add	r2, r0
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d100      	bne.n	8005e10 <memset+0xa>
 8005e0e:	4770      	bx	lr
 8005e10:	f803 1b01 	strb.w	r1, [r3], #1
 8005e14:	e7f9      	b.n	8005e0a <memset+0x4>
	...

08005e18 <_puts_r>:
 8005e18:	b570      	push	{r4, r5, r6, lr}
 8005e1a:	460e      	mov	r6, r1
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	b118      	cbz	r0, 8005e28 <_puts_r+0x10>
 8005e20:	6983      	ldr	r3, [r0, #24]
 8005e22:	b90b      	cbnz	r3, 8005e28 <_puts_r+0x10>
 8005e24:	f000 fa0c 	bl	8006240 <__sinit>
 8005e28:	69ab      	ldr	r3, [r5, #24]
 8005e2a:	68ac      	ldr	r4, [r5, #8]
 8005e2c:	b913      	cbnz	r3, 8005e34 <_puts_r+0x1c>
 8005e2e:	4628      	mov	r0, r5
 8005e30:	f000 fa06 	bl	8006240 <__sinit>
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <_puts_r+0xac>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d117      	bne.n	8005e6a <_puts_r+0x52>
 8005e3a:	686c      	ldr	r4, [r5, #4]
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	d51d      	bpl.n	8005e7e <_puts_r+0x66>
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	b1db      	cbz	r3, 8005e7e <_puts_r+0x66>
 8005e46:	3e01      	subs	r6, #1
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	60a3      	str	r3, [r4, #8]
 8005e52:	b9e9      	cbnz	r1, 8005e90 <_puts_r+0x78>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da2e      	bge.n	8005eb6 <_puts_r+0x9e>
 8005e58:	4622      	mov	r2, r4
 8005e5a:	210a      	movs	r1, #10
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	f000 f83f 	bl	8005ee0 <__swbuf_r>
 8005e62:	3001      	adds	r0, #1
 8005e64:	d011      	beq.n	8005e8a <_puts_r+0x72>
 8005e66:	200a      	movs	r0, #10
 8005e68:	e011      	b.n	8005e8e <_puts_r+0x76>
 8005e6a:	4b17      	ldr	r3, [pc, #92]	; (8005ec8 <_puts_r+0xb0>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	d101      	bne.n	8005e74 <_puts_r+0x5c>
 8005e70:	68ac      	ldr	r4, [r5, #8]
 8005e72:	e7e3      	b.n	8005e3c <_puts_r+0x24>
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <_puts_r+0xb4>)
 8005e76:	429c      	cmp	r4, r3
 8005e78:	bf08      	it	eq
 8005e7a:	68ec      	ldreq	r4, [r5, #12]
 8005e7c:	e7de      	b.n	8005e3c <_puts_r+0x24>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f000 f87f 	bl	8005f84 <__swsetup_r>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d0dd      	beq.n	8005e46 <_puts_r+0x2e>
 8005e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da04      	bge.n	8005e9e <_puts_r+0x86>
 8005e94:	69a2      	ldr	r2, [r4, #24]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	dc06      	bgt.n	8005ea8 <_puts_r+0x90>
 8005e9a:	290a      	cmp	r1, #10
 8005e9c:	d004      	beq.n	8005ea8 <_puts_r+0x90>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	6022      	str	r2, [r4, #0]
 8005ea4:	7019      	strb	r1, [r3, #0]
 8005ea6:	e7cf      	b.n	8005e48 <_puts_r+0x30>
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f818 	bl	8005ee0 <__swbuf_r>
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	d1c9      	bne.n	8005e48 <_puts_r+0x30>
 8005eb4:	e7e9      	b.n	8005e8a <_puts_r+0x72>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	200a      	movs	r0, #10
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	6022      	str	r2, [r4, #0]
 8005ebe:	7018      	strb	r0, [r3, #0]
 8005ec0:	e7e5      	b.n	8005e8e <_puts_r+0x76>
 8005ec2:	bf00      	nop
 8005ec4:	0800677c 	.word	0x0800677c
 8005ec8:	0800679c 	.word	0x0800679c
 8005ecc:	0800675c 	.word	0x0800675c

08005ed0 <puts>:
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <puts+0xc>)
 8005ed2:	4601      	mov	r1, r0
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	f7ff bf9f 	b.w	8005e18 <_puts_r>
 8005eda:	bf00      	nop
 8005edc:	2000000c 	.word	0x2000000c

08005ee0 <__swbuf_r>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	460e      	mov	r6, r1
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	b118      	cbz	r0, 8005ef2 <__swbuf_r+0x12>
 8005eea:	6983      	ldr	r3, [r0, #24]
 8005eec:	b90b      	cbnz	r3, 8005ef2 <__swbuf_r+0x12>
 8005eee:	f000 f9a7 	bl	8006240 <__sinit>
 8005ef2:	4b21      	ldr	r3, [pc, #132]	; (8005f78 <__swbuf_r+0x98>)
 8005ef4:	429c      	cmp	r4, r3
 8005ef6:	d12a      	bne.n	8005f4e <__swbuf_r+0x6e>
 8005ef8:	686c      	ldr	r4, [r5, #4]
 8005efa:	69a3      	ldr	r3, [r4, #24]
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	89a3      	ldrh	r3, [r4, #12]
 8005f00:	071a      	lsls	r2, r3, #28
 8005f02:	d52e      	bpl.n	8005f62 <__swbuf_r+0x82>
 8005f04:	6923      	ldr	r3, [r4, #16]
 8005f06:	b363      	cbz	r3, 8005f62 <__swbuf_r+0x82>
 8005f08:	6923      	ldr	r3, [r4, #16]
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	1ac0      	subs	r0, r0, r3
 8005f0e:	6963      	ldr	r3, [r4, #20]
 8005f10:	b2f6      	uxtb	r6, r6
 8005f12:	4283      	cmp	r3, r0
 8005f14:	4637      	mov	r7, r6
 8005f16:	dc04      	bgt.n	8005f22 <__swbuf_r+0x42>
 8005f18:	4621      	mov	r1, r4
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	f000 f926 	bl	800616c <_fflush_r>
 8005f20:	bb28      	cbnz	r0, 8005f6e <__swbuf_r+0x8e>
 8005f22:	68a3      	ldr	r3, [r4, #8]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	60a3      	str	r3, [r4, #8]
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	6022      	str	r2, [r4, #0]
 8005f2e:	701e      	strb	r6, [r3, #0]
 8005f30:	6963      	ldr	r3, [r4, #20]
 8005f32:	3001      	adds	r0, #1
 8005f34:	4283      	cmp	r3, r0
 8005f36:	d004      	beq.n	8005f42 <__swbuf_r+0x62>
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	07db      	lsls	r3, r3, #31
 8005f3c:	d519      	bpl.n	8005f72 <__swbuf_r+0x92>
 8005f3e:	2e0a      	cmp	r6, #10
 8005f40:	d117      	bne.n	8005f72 <__swbuf_r+0x92>
 8005f42:	4621      	mov	r1, r4
 8005f44:	4628      	mov	r0, r5
 8005f46:	f000 f911 	bl	800616c <_fflush_r>
 8005f4a:	b190      	cbz	r0, 8005f72 <__swbuf_r+0x92>
 8005f4c:	e00f      	b.n	8005f6e <__swbuf_r+0x8e>
 8005f4e:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <__swbuf_r+0x9c>)
 8005f50:	429c      	cmp	r4, r3
 8005f52:	d101      	bne.n	8005f58 <__swbuf_r+0x78>
 8005f54:	68ac      	ldr	r4, [r5, #8]
 8005f56:	e7d0      	b.n	8005efa <__swbuf_r+0x1a>
 8005f58:	4b09      	ldr	r3, [pc, #36]	; (8005f80 <__swbuf_r+0xa0>)
 8005f5a:	429c      	cmp	r4, r3
 8005f5c:	bf08      	it	eq
 8005f5e:	68ec      	ldreq	r4, [r5, #12]
 8005f60:	e7cb      	b.n	8005efa <__swbuf_r+0x1a>
 8005f62:	4621      	mov	r1, r4
 8005f64:	4628      	mov	r0, r5
 8005f66:	f000 f80d 	bl	8005f84 <__swsetup_r>
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0cc      	beq.n	8005f08 <__swbuf_r+0x28>
 8005f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8005f72:	4638      	mov	r0, r7
 8005f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f76:	bf00      	nop
 8005f78:	0800677c 	.word	0x0800677c
 8005f7c:	0800679c 	.word	0x0800679c
 8005f80:	0800675c 	.word	0x0800675c

08005f84 <__swsetup_r>:
 8005f84:	4b32      	ldr	r3, [pc, #200]	; (8006050 <__swsetup_r+0xcc>)
 8005f86:	b570      	push	{r4, r5, r6, lr}
 8005f88:	681d      	ldr	r5, [r3, #0]
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	b125      	cbz	r5, 8005f9a <__swsetup_r+0x16>
 8005f90:	69ab      	ldr	r3, [r5, #24]
 8005f92:	b913      	cbnz	r3, 8005f9a <__swsetup_r+0x16>
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 f953 	bl	8006240 <__sinit>
 8005f9a:	4b2e      	ldr	r3, [pc, #184]	; (8006054 <__swsetup_r+0xd0>)
 8005f9c:	429c      	cmp	r4, r3
 8005f9e:	d10f      	bne.n	8005fc0 <__swsetup_r+0x3c>
 8005fa0:	686c      	ldr	r4, [r5, #4]
 8005fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	0715      	lsls	r5, r2, #28
 8005faa:	d42c      	bmi.n	8006006 <__swsetup_r+0x82>
 8005fac:	06d0      	lsls	r0, r2, #27
 8005fae:	d411      	bmi.n	8005fd4 <__swsetup_r+0x50>
 8005fb0:	2209      	movs	r2, #9
 8005fb2:	6032      	str	r2, [r6, #0]
 8005fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb8:	81a3      	strh	r3, [r4, #12]
 8005fba:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbe:	e03e      	b.n	800603e <__swsetup_r+0xba>
 8005fc0:	4b25      	ldr	r3, [pc, #148]	; (8006058 <__swsetup_r+0xd4>)
 8005fc2:	429c      	cmp	r4, r3
 8005fc4:	d101      	bne.n	8005fca <__swsetup_r+0x46>
 8005fc6:	68ac      	ldr	r4, [r5, #8]
 8005fc8:	e7eb      	b.n	8005fa2 <__swsetup_r+0x1e>
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <__swsetup_r+0xd8>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	bf08      	it	eq
 8005fd0:	68ec      	ldreq	r4, [r5, #12]
 8005fd2:	e7e6      	b.n	8005fa2 <__swsetup_r+0x1e>
 8005fd4:	0751      	lsls	r1, r2, #29
 8005fd6:	d512      	bpl.n	8005ffe <__swsetup_r+0x7a>
 8005fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fda:	b141      	cbz	r1, 8005fee <__swsetup_r+0x6a>
 8005fdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	d002      	beq.n	8005fea <__swsetup_r+0x66>
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f000 fa19 	bl	800641c <_free_r>
 8005fea:	2300      	movs	r3, #0
 8005fec:	6363      	str	r3, [r4, #52]	; 0x34
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6063      	str	r3, [r4, #4]
 8005ffa:	6923      	ldr	r3, [r4, #16]
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	f043 0308 	orr.w	r3, r3, #8
 8006004:	81a3      	strh	r3, [r4, #12]
 8006006:	6923      	ldr	r3, [r4, #16]
 8006008:	b94b      	cbnz	r3, 800601e <__swsetup_r+0x9a>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d003      	beq.n	800601e <__swsetup_r+0x9a>
 8006016:	4621      	mov	r1, r4
 8006018:	4630      	mov	r0, r6
 800601a:	f000 f9bf 	bl	800639c <__smakebuf_r>
 800601e:	89a2      	ldrh	r2, [r4, #12]
 8006020:	f012 0301 	ands.w	r3, r2, #1
 8006024:	d00c      	beq.n	8006040 <__swsetup_r+0xbc>
 8006026:	2300      	movs	r3, #0
 8006028:	60a3      	str	r3, [r4, #8]
 800602a:	6963      	ldr	r3, [r4, #20]
 800602c:	425b      	negs	r3, r3
 800602e:	61a3      	str	r3, [r4, #24]
 8006030:	6923      	ldr	r3, [r4, #16]
 8006032:	b953      	cbnz	r3, 800604a <__swsetup_r+0xc6>
 8006034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006038:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800603c:	d1ba      	bne.n	8005fb4 <__swsetup_r+0x30>
 800603e:	bd70      	pop	{r4, r5, r6, pc}
 8006040:	0792      	lsls	r2, r2, #30
 8006042:	bf58      	it	pl
 8006044:	6963      	ldrpl	r3, [r4, #20]
 8006046:	60a3      	str	r3, [r4, #8]
 8006048:	e7f2      	b.n	8006030 <__swsetup_r+0xac>
 800604a:	2000      	movs	r0, #0
 800604c:	e7f7      	b.n	800603e <__swsetup_r+0xba>
 800604e:	bf00      	nop
 8006050:	2000000c 	.word	0x2000000c
 8006054:	0800677c 	.word	0x0800677c
 8006058:	0800679c 	.word	0x0800679c
 800605c:	0800675c 	.word	0x0800675c

08006060 <__sflush_r>:
 8006060:	898a      	ldrh	r2, [r1, #12]
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	4605      	mov	r5, r0
 8006068:	0710      	lsls	r0, r2, #28
 800606a:	460c      	mov	r4, r1
 800606c:	d458      	bmi.n	8006120 <__sflush_r+0xc0>
 800606e:	684b      	ldr	r3, [r1, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	dc05      	bgt.n	8006080 <__sflush_r+0x20>
 8006074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc02      	bgt.n	8006080 <__sflush_r+0x20>
 800607a:	2000      	movs	r0, #0
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006082:	2e00      	cmp	r6, #0
 8006084:	d0f9      	beq.n	800607a <__sflush_r+0x1a>
 8006086:	2300      	movs	r3, #0
 8006088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800608c:	682f      	ldr	r7, [r5, #0]
 800608e:	6a21      	ldr	r1, [r4, #32]
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	d032      	beq.n	80060fa <__sflush_r+0x9a>
 8006094:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006096:	89a3      	ldrh	r3, [r4, #12]
 8006098:	075a      	lsls	r2, r3, #29
 800609a:	d505      	bpl.n	80060a8 <__sflush_r+0x48>
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	1ac0      	subs	r0, r0, r3
 80060a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060a2:	b10b      	cbz	r3, 80060a8 <__sflush_r+0x48>
 80060a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060a6:	1ac0      	subs	r0, r0, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	4602      	mov	r2, r0
 80060ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ae:	6a21      	ldr	r1, [r4, #32]
 80060b0:	4628      	mov	r0, r5
 80060b2:	47b0      	blx	r6
 80060b4:	1c43      	adds	r3, r0, #1
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	d106      	bne.n	80060c8 <__sflush_r+0x68>
 80060ba:	6829      	ldr	r1, [r5, #0]
 80060bc:	291d      	cmp	r1, #29
 80060be:	d848      	bhi.n	8006152 <__sflush_r+0xf2>
 80060c0:	4a29      	ldr	r2, [pc, #164]	; (8006168 <__sflush_r+0x108>)
 80060c2:	40ca      	lsrs	r2, r1
 80060c4:	07d6      	lsls	r6, r2, #31
 80060c6:	d544      	bpl.n	8006152 <__sflush_r+0xf2>
 80060c8:	2200      	movs	r2, #0
 80060ca:	6062      	str	r2, [r4, #4]
 80060cc:	04d9      	lsls	r1, r3, #19
 80060ce:	6922      	ldr	r2, [r4, #16]
 80060d0:	6022      	str	r2, [r4, #0]
 80060d2:	d504      	bpl.n	80060de <__sflush_r+0x7e>
 80060d4:	1c42      	adds	r2, r0, #1
 80060d6:	d101      	bne.n	80060dc <__sflush_r+0x7c>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b903      	cbnz	r3, 80060de <__sflush_r+0x7e>
 80060dc:	6560      	str	r0, [r4, #84]	; 0x54
 80060de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060e0:	602f      	str	r7, [r5, #0]
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d0c9      	beq.n	800607a <__sflush_r+0x1a>
 80060e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060ea:	4299      	cmp	r1, r3
 80060ec:	d002      	beq.n	80060f4 <__sflush_r+0x94>
 80060ee:	4628      	mov	r0, r5
 80060f0:	f000 f994 	bl	800641c <_free_r>
 80060f4:	2000      	movs	r0, #0
 80060f6:	6360      	str	r0, [r4, #52]	; 0x34
 80060f8:	e7c0      	b.n	800607c <__sflush_r+0x1c>
 80060fa:	2301      	movs	r3, #1
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b0      	blx	r6
 8006100:	1c41      	adds	r1, r0, #1
 8006102:	d1c8      	bne.n	8006096 <__sflush_r+0x36>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0c5      	beq.n	8006096 <__sflush_r+0x36>
 800610a:	2b1d      	cmp	r3, #29
 800610c:	d001      	beq.n	8006112 <__sflush_r+0xb2>
 800610e:	2b16      	cmp	r3, #22
 8006110:	d101      	bne.n	8006116 <__sflush_r+0xb6>
 8006112:	602f      	str	r7, [r5, #0]
 8006114:	e7b1      	b.n	800607a <__sflush_r+0x1a>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800611c:	81a3      	strh	r3, [r4, #12]
 800611e:	e7ad      	b.n	800607c <__sflush_r+0x1c>
 8006120:	690f      	ldr	r7, [r1, #16]
 8006122:	2f00      	cmp	r7, #0
 8006124:	d0a9      	beq.n	800607a <__sflush_r+0x1a>
 8006126:	0793      	lsls	r3, r2, #30
 8006128:	680e      	ldr	r6, [r1, #0]
 800612a:	bf08      	it	eq
 800612c:	694b      	ldreq	r3, [r1, #20]
 800612e:	600f      	str	r7, [r1, #0]
 8006130:	bf18      	it	ne
 8006132:	2300      	movne	r3, #0
 8006134:	eba6 0807 	sub.w	r8, r6, r7
 8006138:	608b      	str	r3, [r1, #8]
 800613a:	f1b8 0f00 	cmp.w	r8, #0
 800613e:	dd9c      	ble.n	800607a <__sflush_r+0x1a>
 8006140:	4643      	mov	r3, r8
 8006142:	463a      	mov	r2, r7
 8006144:	6a21      	ldr	r1, [r4, #32]
 8006146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006148:	4628      	mov	r0, r5
 800614a:	47b0      	blx	r6
 800614c:	2800      	cmp	r0, #0
 800614e:	dc06      	bgt.n	800615e <__sflush_r+0xfe>
 8006150:	89a3      	ldrh	r3, [r4, #12]
 8006152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	f04f 30ff 	mov.w	r0, #4294967295
 800615c:	e78e      	b.n	800607c <__sflush_r+0x1c>
 800615e:	4407      	add	r7, r0
 8006160:	eba8 0800 	sub.w	r8, r8, r0
 8006164:	e7e9      	b.n	800613a <__sflush_r+0xda>
 8006166:	bf00      	nop
 8006168:	20400001 	.word	0x20400001

0800616c <_fflush_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	690b      	ldr	r3, [r1, #16]
 8006170:	4605      	mov	r5, r0
 8006172:	460c      	mov	r4, r1
 8006174:	b1db      	cbz	r3, 80061ae <_fflush_r+0x42>
 8006176:	b118      	cbz	r0, 8006180 <_fflush_r+0x14>
 8006178:	6983      	ldr	r3, [r0, #24]
 800617a:	b90b      	cbnz	r3, 8006180 <_fflush_r+0x14>
 800617c:	f000 f860 	bl	8006240 <__sinit>
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <_fflush_r+0x48>)
 8006182:	429c      	cmp	r4, r3
 8006184:	d109      	bne.n	800619a <_fflush_r+0x2e>
 8006186:	686c      	ldr	r4, [r5, #4]
 8006188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618c:	b17b      	cbz	r3, 80061ae <_fflush_r+0x42>
 800618e:	4621      	mov	r1, r4
 8006190:	4628      	mov	r0, r5
 8006192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006196:	f7ff bf63 	b.w	8006060 <__sflush_r>
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <_fflush_r+0x4c>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d101      	bne.n	80061a4 <_fflush_r+0x38>
 80061a0:	68ac      	ldr	r4, [r5, #8]
 80061a2:	e7f1      	b.n	8006188 <_fflush_r+0x1c>
 80061a4:	4b05      	ldr	r3, [pc, #20]	; (80061bc <_fflush_r+0x50>)
 80061a6:	429c      	cmp	r4, r3
 80061a8:	bf08      	it	eq
 80061aa:	68ec      	ldreq	r4, [r5, #12]
 80061ac:	e7ec      	b.n	8006188 <_fflush_r+0x1c>
 80061ae:	2000      	movs	r0, #0
 80061b0:	bd38      	pop	{r3, r4, r5, pc}
 80061b2:	bf00      	nop
 80061b4:	0800677c 	.word	0x0800677c
 80061b8:	0800679c 	.word	0x0800679c
 80061bc:	0800675c 	.word	0x0800675c

080061c0 <std>:
 80061c0:	2300      	movs	r3, #0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ca:	6083      	str	r3, [r0, #8]
 80061cc:	8181      	strh	r1, [r0, #12]
 80061ce:	6643      	str	r3, [r0, #100]	; 0x64
 80061d0:	81c2      	strh	r2, [r0, #14]
 80061d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d6:	6183      	str	r3, [r0, #24]
 80061d8:	4619      	mov	r1, r3
 80061da:	2208      	movs	r2, #8
 80061dc:	305c      	adds	r0, #92	; 0x5c
 80061de:	f7ff fe12 	bl	8005e06 <memset>
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <std+0x38>)
 80061e4:	6263      	str	r3, [r4, #36]	; 0x24
 80061e6:	4b05      	ldr	r3, [pc, #20]	; (80061fc <std+0x3c>)
 80061e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80061ea:	4b05      	ldr	r3, [pc, #20]	; (8006200 <std+0x40>)
 80061ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <std+0x44>)
 80061f0:	6224      	str	r4, [r4, #32]
 80061f2:	6323      	str	r3, [r4, #48]	; 0x30
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	0800658d 	.word	0x0800658d
 80061fc:	080065af 	.word	0x080065af
 8006200:	080065e7 	.word	0x080065e7
 8006204:	0800660b 	.word	0x0800660b

08006208 <_cleanup_r>:
 8006208:	4901      	ldr	r1, [pc, #4]	; (8006210 <_cleanup_r+0x8>)
 800620a:	f000 b885 	b.w	8006318 <_fwalk_reent>
 800620e:	bf00      	nop
 8006210:	0800616d 	.word	0x0800616d

08006214 <__sfmoreglue>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	1e4a      	subs	r2, r1, #1
 8006218:	2568      	movs	r5, #104	; 0x68
 800621a:	4355      	muls	r5, r2
 800621c:	460e      	mov	r6, r1
 800621e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006222:	f000 f949 	bl	80064b8 <_malloc_r>
 8006226:	4604      	mov	r4, r0
 8006228:	b140      	cbz	r0, 800623c <__sfmoreglue+0x28>
 800622a:	2100      	movs	r1, #0
 800622c:	e9c0 1600 	strd	r1, r6, [r0]
 8006230:	300c      	adds	r0, #12
 8006232:	60a0      	str	r0, [r4, #8]
 8006234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006238:	f7ff fde5 	bl	8005e06 <memset>
 800623c:	4620      	mov	r0, r4
 800623e:	bd70      	pop	{r4, r5, r6, pc}

08006240 <__sinit>:
 8006240:	6983      	ldr	r3, [r0, #24]
 8006242:	b510      	push	{r4, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	bb33      	cbnz	r3, 8006296 <__sinit+0x56>
 8006248:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800624c:	6503      	str	r3, [r0, #80]	; 0x50
 800624e:	4b12      	ldr	r3, [pc, #72]	; (8006298 <__sinit+0x58>)
 8006250:	4a12      	ldr	r2, [pc, #72]	; (800629c <__sinit+0x5c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6282      	str	r2, [r0, #40]	; 0x28
 8006256:	4298      	cmp	r0, r3
 8006258:	bf04      	itt	eq
 800625a:	2301      	moveq	r3, #1
 800625c:	6183      	streq	r3, [r0, #24]
 800625e:	f000 f81f 	bl	80062a0 <__sfp>
 8006262:	6060      	str	r0, [r4, #4]
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f81b 	bl	80062a0 <__sfp>
 800626a:	60a0      	str	r0, [r4, #8]
 800626c:	4620      	mov	r0, r4
 800626e:	f000 f817 	bl	80062a0 <__sfp>
 8006272:	2200      	movs	r2, #0
 8006274:	60e0      	str	r0, [r4, #12]
 8006276:	2104      	movs	r1, #4
 8006278:	6860      	ldr	r0, [r4, #4]
 800627a:	f7ff ffa1 	bl	80061c0 <std>
 800627e:	2201      	movs	r2, #1
 8006280:	2109      	movs	r1, #9
 8006282:	68a0      	ldr	r0, [r4, #8]
 8006284:	f7ff ff9c 	bl	80061c0 <std>
 8006288:	2202      	movs	r2, #2
 800628a:	2112      	movs	r1, #18
 800628c:	68e0      	ldr	r0, [r4, #12]
 800628e:	f7ff ff97 	bl	80061c0 <std>
 8006292:	2301      	movs	r3, #1
 8006294:	61a3      	str	r3, [r4, #24]
 8006296:	bd10      	pop	{r4, pc}
 8006298:	08006758 	.word	0x08006758
 800629c:	08006209 	.word	0x08006209

080062a0 <__sfp>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <__sfp+0x70>)
 80062a4:	681e      	ldr	r6, [r3, #0]
 80062a6:	69b3      	ldr	r3, [r6, #24]
 80062a8:	4607      	mov	r7, r0
 80062aa:	b913      	cbnz	r3, 80062b2 <__sfp+0x12>
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff ffc7 	bl	8006240 <__sinit>
 80062b2:	3648      	adds	r6, #72	; 0x48
 80062b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062b8:	3b01      	subs	r3, #1
 80062ba:	d503      	bpl.n	80062c4 <__sfp+0x24>
 80062bc:	6833      	ldr	r3, [r6, #0]
 80062be:	b133      	cbz	r3, 80062ce <__sfp+0x2e>
 80062c0:	6836      	ldr	r6, [r6, #0]
 80062c2:	e7f7      	b.n	80062b4 <__sfp+0x14>
 80062c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062c8:	b16d      	cbz	r5, 80062e6 <__sfp+0x46>
 80062ca:	3468      	adds	r4, #104	; 0x68
 80062cc:	e7f4      	b.n	80062b8 <__sfp+0x18>
 80062ce:	2104      	movs	r1, #4
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ff9f 	bl	8006214 <__sfmoreglue>
 80062d6:	6030      	str	r0, [r6, #0]
 80062d8:	2800      	cmp	r0, #0
 80062da:	d1f1      	bne.n	80062c0 <__sfp+0x20>
 80062dc:	230c      	movs	r3, #12
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4604      	mov	r4, r0
 80062e2:	4620      	mov	r0, r4
 80062e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e6:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <__sfp+0x74>)
 80062e8:	6665      	str	r5, [r4, #100]	; 0x64
 80062ea:	e9c4 5500 	strd	r5, r5, [r4]
 80062ee:	60a5      	str	r5, [r4, #8]
 80062f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80062f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80062f8:	2208      	movs	r2, #8
 80062fa:	4629      	mov	r1, r5
 80062fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006300:	f7ff fd81 	bl	8005e06 <memset>
 8006304:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006308:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800630c:	e7e9      	b.n	80062e2 <__sfp+0x42>
 800630e:	bf00      	nop
 8006310:	08006758 	.word	0x08006758
 8006314:	ffff0001 	.word	0xffff0001

08006318 <_fwalk_reent>:
 8006318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800631c:	4680      	mov	r8, r0
 800631e:	4689      	mov	r9, r1
 8006320:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006324:	2600      	movs	r6, #0
 8006326:	b914      	cbnz	r4, 800632e <_fwalk_reent+0x16>
 8006328:	4630      	mov	r0, r6
 800632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006332:	3f01      	subs	r7, #1
 8006334:	d501      	bpl.n	800633a <_fwalk_reent+0x22>
 8006336:	6824      	ldr	r4, [r4, #0]
 8006338:	e7f5      	b.n	8006326 <_fwalk_reent+0xe>
 800633a:	89ab      	ldrh	r3, [r5, #12]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d907      	bls.n	8006350 <_fwalk_reent+0x38>
 8006340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006344:	3301      	adds	r3, #1
 8006346:	d003      	beq.n	8006350 <_fwalk_reent+0x38>
 8006348:	4629      	mov	r1, r5
 800634a:	4640      	mov	r0, r8
 800634c:	47c8      	blx	r9
 800634e:	4306      	orrs	r6, r0
 8006350:	3568      	adds	r5, #104	; 0x68
 8006352:	e7ee      	b.n	8006332 <_fwalk_reent+0x1a>

08006354 <__swhatbuf_r>:
 8006354:	b570      	push	{r4, r5, r6, lr}
 8006356:	460e      	mov	r6, r1
 8006358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800635c:	2900      	cmp	r1, #0
 800635e:	b096      	sub	sp, #88	; 0x58
 8006360:	4614      	mov	r4, r2
 8006362:	461d      	mov	r5, r3
 8006364:	da07      	bge.n	8006376 <__swhatbuf_r+0x22>
 8006366:	2300      	movs	r3, #0
 8006368:	602b      	str	r3, [r5, #0]
 800636a:	89b3      	ldrh	r3, [r6, #12]
 800636c:	061a      	lsls	r2, r3, #24
 800636e:	d410      	bmi.n	8006392 <__swhatbuf_r+0x3e>
 8006370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006374:	e00e      	b.n	8006394 <__swhatbuf_r+0x40>
 8006376:	466a      	mov	r2, sp
 8006378:	f000 f96e 	bl	8006658 <_fstat_r>
 800637c:	2800      	cmp	r0, #0
 800637e:	dbf2      	blt.n	8006366 <__swhatbuf_r+0x12>
 8006380:	9a01      	ldr	r2, [sp, #4]
 8006382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800638a:	425a      	negs	r2, r3
 800638c:	415a      	adcs	r2, r3
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	e7ee      	b.n	8006370 <__swhatbuf_r+0x1c>
 8006392:	2340      	movs	r3, #64	; 0x40
 8006394:	2000      	movs	r0, #0
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	b016      	add	sp, #88	; 0x58
 800639a:	bd70      	pop	{r4, r5, r6, pc}

0800639c <__smakebuf_r>:
 800639c:	898b      	ldrh	r3, [r1, #12]
 800639e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063a0:	079d      	lsls	r5, r3, #30
 80063a2:	4606      	mov	r6, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	d507      	bpl.n	80063b8 <__smakebuf_r+0x1c>
 80063a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	2301      	movs	r3, #1
 80063b2:	6163      	str	r3, [r4, #20]
 80063b4:	b002      	add	sp, #8
 80063b6:	bd70      	pop	{r4, r5, r6, pc}
 80063b8:	ab01      	add	r3, sp, #4
 80063ba:	466a      	mov	r2, sp
 80063bc:	f7ff ffca 	bl	8006354 <__swhatbuf_r>
 80063c0:	9900      	ldr	r1, [sp, #0]
 80063c2:	4605      	mov	r5, r0
 80063c4:	4630      	mov	r0, r6
 80063c6:	f000 f877 	bl	80064b8 <_malloc_r>
 80063ca:	b948      	cbnz	r0, 80063e0 <__smakebuf_r+0x44>
 80063cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d0:	059a      	lsls	r2, r3, #22
 80063d2:	d4ef      	bmi.n	80063b4 <__smakebuf_r+0x18>
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	f043 0302 	orr.w	r3, r3, #2
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	e7e3      	b.n	80063a8 <__smakebuf_r+0xc>
 80063e0:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <__smakebuf_r+0x7c>)
 80063e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	6020      	str	r0, [r4, #0]
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	81a3      	strh	r3, [r4, #12]
 80063ee:	9b00      	ldr	r3, [sp, #0]
 80063f0:	6163      	str	r3, [r4, #20]
 80063f2:	9b01      	ldr	r3, [sp, #4]
 80063f4:	6120      	str	r0, [r4, #16]
 80063f6:	b15b      	cbz	r3, 8006410 <__smakebuf_r+0x74>
 80063f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063fc:	4630      	mov	r0, r6
 80063fe:	f000 f93d 	bl	800667c <_isatty_r>
 8006402:	b128      	cbz	r0, 8006410 <__smakebuf_r+0x74>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f023 0303 	bic.w	r3, r3, #3
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	431d      	orrs	r5, r3
 8006414:	81a5      	strh	r5, [r4, #12]
 8006416:	e7cd      	b.n	80063b4 <__smakebuf_r+0x18>
 8006418:	08006209 	.word	0x08006209

0800641c <_free_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	2900      	cmp	r1, #0
 8006422:	d045      	beq.n	80064b0 <_free_r+0x94>
 8006424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006428:	1f0c      	subs	r4, r1, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	18e4      	addlt	r4, r4, r3
 8006430:	f000 f946 	bl	80066c0 <__malloc_lock>
 8006434:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <_free_r+0x98>)
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	4610      	mov	r0, r2
 800643a:	b933      	cbnz	r3, 800644a <_free_r+0x2e>
 800643c:	6063      	str	r3, [r4, #4]
 800643e:	6014      	str	r4, [r2, #0]
 8006440:	4628      	mov	r0, r5
 8006442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006446:	f000 b93c 	b.w	80066c2 <__malloc_unlock>
 800644a:	42a3      	cmp	r3, r4
 800644c:	d90c      	bls.n	8006468 <_free_r+0x4c>
 800644e:	6821      	ldr	r1, [r4, #0]
 8006450:	1862      	adds	r2, r4, r1
 8006452:	4293      	cmp	r3, r2
 8006454:	bf04      	itt	eq
 8006456:	681a      	ldreq	r2, [r3, #0]
 8006458:	685b      	ldreq	r3, [r3, #4]
 800645a:	6063      	str	r3, [r4, #4]
 800645c:	bf04      	itt	eq
 800645e:	1852      	addeq	r2, r2, r1
 8006460:	6022      	streq	r2, [r4, #0]
 8006462:	6004      	str	r4, [r0, #0]
 8006464:	e7ec      	b.n	8006440 <_free_r+0x24>
 8006466:	4613      	mov	r3, r2
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	b10a      	cbz	r2, 8006470 <_free_r+0x54>
 800646c:	42a2      	cmp	r2, r4
 800646e:	d9fa      	bls.n	8006466 <_free_r+0x4a>
 8006470:	6819      	ldr	r1, [r3, #0]
 8006472:	1858      	adds	r0, r3, r1
 8006474:	42a0      	cmp	r0, r4
 8006476:	d10b      	bne.n	8006490 <_free_r+0x74>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	4401      	add	r1, r0
 800647c:	1858      	adds	r0, r3, r1
 800647e:	4282      	cmp	r2, r0
 8006480:	6019      	str	r1, [r3, #0]
 8006482:	d1dd      	bne.n	8006440 <_free_r+0x24>
 8006484:	6810      	ldr	r0, [r2, #0]
 8006486:	6852      	ldr	r2, [r2, #4]
 8006488:	605a      	str	r2, [r3, #4]
 800648a:	4401      	add	r1, r0
 800648c:	6019      	str	r1, [r3, #0]
 800648e:	e7d7      	b.n	8006440 <_free_r+0x24>
 8006490:	d902      	bls.n	8006498 <_free_r+0x7c>
 8006492:	230c      	movs	r3, #12
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	e7d3      	b.n	8006440 <_free_r+0x24>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	1821      	adds	r1, r4, r0
 800649c:	428a      	cmp	r2, r1
 800649e:	bf04      	itt	eq
 80064a0:	6811      	ldreq	r1, [r2, #0]
 80064a2:	6852      	ldreq	r2, [r2, #4]
 80064a4:	6062      	str	r2, [r4, #4]
 80064a6:	bf04      	itt	eq
 80064a8:	1809      	addeq	r1, r1, r0
 80064aa:	6021      	streq	r1, [r4, #0]
 80064ac:	605c      	str	r4, [r3, #4]
 80064ae:	e7c7      	b.n	8006440 <_free_r+0x24>
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	20008d98 	.word	0x20008d98

080064b8 <_malloc_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	1ccd      	adds	r5, r1, #3
 80064bc:	f025 0503 	bic.w	r5, r5, #3
 80064c0:	3508      	adds	r5, #8
 80064c2:	2d0c      	cmp	r5, #12
 80064c4:	bf38      	it	cc
 80064c6:	250c      	movcc	r5, #12
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	4606      	mov	r6, r0
 80064cc:	db01      	blt.n	80064d2 <_malloc_r+0x1a>
 80064ce:	42a9      	cmp	r1, r5
 80064d0:	d903      	bls.n	80064da <_malloc_r+0x22>
 80064d2:	230c      	movs	r3, #12
 80064d4:	6033      	str	r3, [r6, #0]
 80064d6:	2000      	movs	r0, #0
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	f000 f8f1 	bl	80066c0 <__malloc_lock>
 80064de:	4a21      	ldr	r2, [pc, #132]	; (8006564 <_malloc_r+0xac>)
 80064e0:	6814      	ldr	r4, [r2, #0]
 80064e2:	4621      	mov	r1, r4
 80064e4:	b991      	cbnz	r1, 800650c <_malloc_r+0x54>
 80064e6:	4c20      	ldr	r4, [pc, #128]	; (8006568 <_malloc_r+0xb0>)
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b91b      	cbnz	r3, 80064f4 <_malloc_r+0x3c>
 80064ec:	4630      	mov	r0, r6
 80064ee:	f000 f83d 	bl	800656c <_sbrk_r>
 80064f2:	6020      	str	r0, [r4, #0]
 80064f4:	4629      	mov	r1, r5
 80064f6:	4630      	mov	r0, r6
 80064f8:	f000 f838 	bl	800656c <_sbrk_r>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d124      	bne.n	800654a <_malloc_r+0x92>
 8006500:	230c      	movs	r3, #12
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	4630      	mov	r0, r6
 8006506:	f000 f8dc 	bl	80066c2 <__malloc_unlock>
 800650a:	e7e4      	b.n	80064d6 <_malloc_r+0x1e>
 800650c:	680b      	ldr	r3, [r1, #0]
 800650e:	1b5b      	subs	r3, r3, r5
 8006510:	d418      	bmi.n	8006544 <_malloc_r+0x8c>
 8006512:	2b0b      	cmp	r3, #11
 8006514:	d90f      	bls.n	8006536 <_malloc_r+0x7e>
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	50cd      	str	r5, [r1, r3]
 800651a:	18cc      	adds	r4, r1, r3
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f8d0 	bl	80066c2 <__malloc_unlock>
 8006522:	f104 000b 	add.w	r0, r4, #11
 8006526:	1d23      	adds	r3, r4, #4
 8006528:	f020 0007 	bic.w	r0, r0, #7
 800652c:	1ac3      	subs	r3, r0, r3
 800652e:	d0d3      	beq.n	80064d8 <_malloc_r+0x20>
 8006530:	425a      	negs	r2, r3
 8006532:	50e2      	str	r2, [r4, r3]
 8006534:	e7d0      	b.n	80064d8 <_malloc_r+0x20>
 8006536:	428c      	cmp	r4, r1
 8006538:	684b      	ldr	r3, [r1, #4]
 800653a:	bf16      	itet	ne
 800653c:	6063      	strne	r3, [r4, #4]
 800653e:	6013      	streq	r3, [r2, #0]
 8006540:	460c      	movne	r4, r1
 8006542:	e7eb      	b.n	800651c <_malloc_r+0x64>
 8006544:	460c      	mov	r4, r1
 8006546:	6849      	ldr	r1, [r1, #4]
 8006548:	e7cc      	b.n	80064e4 <_malloc_r+0x2c>
 800654a:	1cc4      	adds	r4, r0, #3
 800654c:	f024 0403 	bic.w	r4, r4, #3
 8006550:	42a0      	cmp	r0, r4
 8006552:	d005      	beq.n	8006560 <_malloc_r+0xa8>
 8006554:	1a21      	subs	r1, r4, r0
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f808 	bl	800656c <_sbrk_r>
 800655c:	3001      	adds	r0, #1
 800655e:	d0cf      	beq.n	8006500 <_malloc_r+0x48>
 8006560:	6025      	str	r5, [r4, #0]
 8006562:	e7db      	b.n	800651c <_malloc_r+0x64>
 8006564:	20008d98 	.word	0x20008d98
 8006568:	20008d9c 	.word	0x20008d9c

0800656c <_sbrk_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4c06      	ldr	r4, [pc, #24]	; (8006588 <_sbrk_r+0x1c>)
 8006570:	2300      	movs	r3, #0
 8006572:	4605      	mov	r5, r0
 8006574:	4608      	mov	r0, r1
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	f7fa fc32 	bl	8000de0 <_sbrk>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	d102      	bne.n	8006586 <_sbrk_r+0x1a>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	b103      	cbz	r3, 8006586 <_sbrk_r+0x1a>
 8006584:	602b      	str	r3, [r5, #0]
 8006586:	bd38      	pop	{r3, r4, r5, pc}
 8006588:	20008ec0 	.word	0x20008ec0

0800658c <__sread>:
 800658c:	b510      	push	{r4, lr}
 800658e:	460c      	mov	r4, r1
 8006590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006594:	f000 f896 	bl	80066c4 <_read_r>
 8006598:	2800      	cmp	r0, #0
 800659a:	bfab      	itete	ge
 800659c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800659e:	89a3      	ldrhlt	r3, [r4, #12]
 80065a0:	181b      	addge	r3, r3, r0
 80065a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065a6:	bfac      	ite	ge
 80065a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80065aa:	81a3      	strhlt	r3, [r4, #12]
 80065ac:	bd10      	pop	{r4, pc}

080065ae <__swrite>:
 80065ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b2:	461f      	mov	r7, r3
 80065b4:	898b      	ldrh	r3, [r1, #12]
 80065b6:	05db      	lsls	r3, r3, #23
 80065b8:	4605      	mov	r5, r0
 80065ba:	460c      	mov	r4, r1
 80065bc:	4616      	mov	r6, r2
 80065be:	d505      	bpl.n	80065cc <__swrite+0x1e>
 80065c0:	2302      	movs	r3, #2
 80065c2:	2200      	movs	r2, #0
 80065c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c8:	f000 f868 	bl	800669c <_lseek_r>
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	4632      	mov	r2, r6
 80065da:	463b      	mov	r3, r7
 80065dc:	4628      	mov	r0, r5
 80065de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065e2:	f000 b817 	b.w	8006614 <_write_r>

080065e6 <__sseek>:
 80065e6:	b510      	push	{r4, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ee:	f000 f855 	bl	800669c <_lseek_r>
 80065f2:	1c43      	adds	r3, r0, #1
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	bf15      	itete	ne
 80065f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006602:	81a3      	strheq	r3, [r4, #12]
 8006604:	bf18      	it	ne
 8006606:	81a3      	strhne	r3, [r4, #12]
 8006608:	bd10      	pop	{r4, pc}

0800660a <__sclose>:
 800660a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660e:	f000 b813 	b.w	8006638 <_close_r>
	...

08006614 <_write_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4c07      	ldr	r4, [pc, #28]	; (8006634 <_write_r+0x20>)
 8006618:	4605      	mov	r5, r0
 800661a:	4608      	mov	r0, r1
 800661c:	4611      	mov	r1, r2
 800661e:	2200      	movs	r2, #0
 8006620:	6022      	str	r2, [r4, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	f7fa fb8b 	bl	8000d3e <_write>
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d102      	bne.n	8006632 <_write_r+0x1e>
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	b103      	cbz	r3, 8006632 <_write_r+0x1e>
 8006630:	602b      	str	r3, [r5, #0]
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	20008ec0 	.word	0x20008ec0

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4c06      	ldr	r4, [pc, #24]	; (8006654 <_close_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4605      	mov	r5, r0
 8006640:	4608      	mov	r0, r1
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f7fa fb97 	bl	8000d76 <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	20008ec0 	.word	0x20008ec0

08006658 <_fstat_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4c07      	ldr	r4, [pc, #28]	; (8006678 <_fstat_r+0x20>)
 800665c:	2300      	movs	r3, #0
 800665e:	4605      	mov	r5, r0
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	f7fa fb92 	bl	8000d8e <_fstat>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	d102      	bne.n	8006674 <_fstat_r+0x1c>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	b103      	cbz	r3, 8006674 <_fstat_r+0x1c>
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	bd38      	pop	{r3, r4, r5, pc}
 8006676:	bf00      	nop
 8006678:	20008ec0 	.word	0x20008ec0

0800667c <_isatty_r>:
 800667c:	b538      	push	{r3, r4, r5, lr}
 800667e:	4c06      	ldr	r4, [pc, #24]	; (8006698 <_isatty_r+0x1c>)
 8006680:	2300      	movs	r3, #0
 8006682:	4605      	mov	r5, r0
 8006684:	4608      	mov	r0, r1
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	f7fa fb91 	bl	8000dae <_isatty>
 800668c:	1c43      	adds	r3, r0, #1
 800668e:	d102      	bne.n	8006696 <_isatty_r+0x1a>
 8006690:	6823      	ldr	r3, [r4, #0]
 8006692:	b103      	cbz	r3, 8006696 <_isatty_r+0x1a>
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	bd38      	pop	{r3, r4, r5, pc}
 8006698:	20008ec0 	.word	0x20008ec0

0800669c <_lseek_r>:
 800669c:	b538      	push	{r3, r4, r5, lr}
 800669e:	4c07      	ldr	r4, [pc, #28]	; (80066bc <_lseek_r+0x20>)
 80066a0:	4605      	mov	r5, r0
 80066a2:	4608      	mov	r0, r1
 80066a4:	4611      	mov	r1, r2
 80066a6:	2200      	movs	r2, #0
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f7fa fb8a 	bl	8000dc4 <_lseek>
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d102      	bne.n	80066ba <_lseek_r+0x1e>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	b103      	cbz	r3, 80066ba <_lseek_r+0x1e>
 80066b8:	602b      	str	r3, [r5, #0]
 80066ba:	bd38      	pop	{r3, r4, r5, pc}
 80066bc:	20008ec0 	.word	0x20008ec0

080066c0 <__malloc_lock>:
 80066c0:	4770      	bx	lr

080066c2 <__malloc_unlock>:
 80066c2:	4770      	bx	lr

080066c4 <_read_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4c07      	ldr	r4, [pc, #28]	; (80066e4 <_read_r+0x20>)
 80066c8:	4605      	mov	r5, r0
 80066ca:	4608      	mov	r0, r1
 80066cc:	4611      	mov	r1, r2
 80066ce:	2200      	movs	r2, #0
 80066d0:	6022      	str	r2, [r4, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f7fa fb16 	bl	8000d04 <_read>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d102      	bne.n	80066e2 <_read_r+0x1e>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	b103      	cbz	r3, 80066e2 <_read_r+0x1e>
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	20008ec0 	.word	0x20008ec0

080066e8 <_init>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	bf00      	nop
 80066ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ee:	bc08      	pop	{r3}
 80066f0:	469e      	mov	lr, r3
 80066f2:	4770      	bx	lr

080066f4 <_fini>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr
