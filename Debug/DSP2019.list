
DSP2019.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007070  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072cc  080072cc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d4  080072d4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080072dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e80  200000a8  08007384  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008f28  08007384  00028f28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfc1  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000368d  00000000  00000000  0003c099  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  0003f728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001580  00000000  00000000  00040e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000055b4  00000000  00000000  00042390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b14  00000000  00000000  00047944  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a557  00000000  00000000  00059458  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f39af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006664  00000000  00000000  000f3a2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080071f8 	.word	0x080071f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	080071f8 	.word	0x080071f8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004f0:	f003 0301 	and.w	r3, r3, #1
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d013      	beq.n	8000520 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000500:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000504:	2b00      	cmp	r3, #0
 8000506:	d00b      	beq.n	8000520 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000508:	e000      	b.n	800050c <ITM_SendChar+0x2c>
    {
      __NOP();
 800050a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800050c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f9      	beq.n	800050a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000516:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000520:	687b      	ldr	r3, [r7, #4]
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	ITM_SendChar( ch );
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff ffd0 	bl	80004e0 <ITM_SendChar>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 1000);
 8000540:	1d39      	adds	r1, r7, #4
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	2201      	movs	r2, #1
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <__io_putchar+0x28>)
 800054a:	f003 f9be 	bl	80038ca <HAL_UART_Transmit>
	return ch;
 800054e:	687b      	ldr	r3, [r7, #4]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20008e4c 	.word	0x20008e4c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08e      	sub	sp, #56	; 0x38
 8000560:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 ff79 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f84d 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f90f 	bl	800078c <MX_GPIO_Init>
  MX_I2C1_Init();
 800056e:	f000 f8b5 	bl	80006dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8e1 	bl	8000738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  status = HAL_I2C_Mem_Read(&hi2c1, 0x32, 0x0F, 1, &value, 1, 10000);
 8000576:	f242 7310 	movw	r3, #10000	; 0x2710
 800057a:	9302      	str	r3, [sp, #8]
 800057c:	2301      	movs	r3, #1
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0x88>)
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	220f      	movs	r2, #15
 8000588:	2132      	movs	r1, #50	; 0x32
 800058a:	4817      	ldr	r0, [pc, #92]	; (80005e8 <main+0x8c>)
 800058c:	f001 fd72 	bl	8002074 <HAL_I2C_Mem_Read>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <main+0x90>)
 8000596:	701a      	strb	r2, [r3, #0]

  value = acelerometro_init(&hi2c1, MX_I2C1_Init);
 8000598:	4915      	ldr	r1, [pc, #84]	; (80005f0 <main+0x94>)
 800059a:	4813      	ldr	r0, [pc, #76]	; (80005e8 <main+0x8c>)
 800059c:	f000 fe56 	bl	800124c <acelerometro_init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <main+0x88>)
 80005a6:	701a      	strb	r2, [r3, #0]


  /* USER CODE END 2 */

  osKernelInitialize();
 80005a8:	f003 fc7c 	bl	8003ea4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2224      	movs	r2, #36	; 0x24
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f006 f9af 	bl	8006916 <memset>
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <main+0x98>)
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	61bb      	str	r3, [r7, #24]
 80005c2:	2318      	movs	r3, #24
 80005c4:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	461a      	mov	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	480a      	ldr	r0, [pc, #40]	; (80005f8 <main+0x9c>)
 80005ce:	f003 fcd1 	bl	8003f74 <osThreadNew>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <main+0xa0>)
 80005d6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	printf("iniciando threads \n");
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0xa4>)
 80005da:	f006 fa01 	bl	80069e0 <puts>

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f003 fc95 	bl	8003f0c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005e2:	e7fe      	b.n	80005e2 <main+0x86>
 80005e4:	20008e8d 	.word	0x20008e8d
 80005e8:	20008df8 	.word	0x20008df8
 80005ec:	20008e8c 	.word	0x20008e8c
 80005f0:	080006dd 	.word	0x080006dd
 80005f4:	08007210 	.word	0x08007210
 80005f8:	08000a4d 	.word	0x08000a4d
 80005fc:	20008df4 	.word	0x20008df4
 8000600:	0800721c 	.word	0x0800721c

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f006 f97f 	bl	8006916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <SystemClock_Config+0xd0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd4>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000678:	2308      	movs	r3, #8
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800067c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000682:	2304      	movs	r3, #4
 8000684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fa4e 	bl	8002b30 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069a:	f000 f9fd 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fc7a 	bl	8002fb4 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c6:	f000 f9e7 	bl	8000a98 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C1_Init+0x50>)
 80006e2:	4a13      	ldr	r2, [pc, #76]	; (8000730 <MX_I2C1_Init+0x54>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_I2C1_Init+0x50>)
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_I2C1_Init+0x58>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_I2C1_Init+0x50>)
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b0a      	ldr	r3, [pc, #40]	; (800072c <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C1_Init+0x50>)
 800071a:	f001 fa59 	bl	8001bd0 <HAL_I2C_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000724:	f000 f9b8 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20008df8 	.word	0x20008df8
 8000730:	40005400 	.word	0x40005400
 8000734:	000186a0 	.word	0x000186a0

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <MX_USART2_UART_Init+0x50>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x4c>)
 8000770:	f003 f85e 	bl	8003830 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800077a:	f000 f98d 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20008e4c 	.word	0x20008e4c
 8000788:	40004400 	.word	0x40004400

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4ba2      	ldr	r3, [pc, #648]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4aa1      	ldr	r2, [pc, #644]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b9f      	ldr	r3, [pc, #636]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b9b      	ldr	r3, [pc, #620]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a9a      	ldr	r2, [pc, #616]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b98      	ldr	r3, [pc, #608]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b94      	ldr	r3, [pc, #592]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a93      	ldr	r2, [pc, #588]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b91      	ldr	r3, [pc, #580]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a8c      	ldr	r2, [pc, #560]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b8a      	ldr	r3, [pc, #552]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b86      	ldr	r3, [pc, #536]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a85      	ldr	r2, [pc, #532]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b83      	ldr	r3, [pc, #524]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b7f      	ldr	r3, [pc, #508]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a7e      	ldr	r2, [pc, #504]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b7c      	ldr	r3, [pc, #496]	; (8000a30 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	4879      	ldr	r0, [pc, #484]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000850:	f001 f98a 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000854:	2201      	movs	r2, #1
 8000856:	2101      	movs	r1, #1
 8000858:	4877      	ldr	r0, [pc, #476]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 800085a:	f001 f985 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800085e:	2200      	movs	r2, #0
 8000860:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000864:	4875      	ldr	r0, [pc, #468]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000866:	f001 f97f 	bl	8001b68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	4874      	ldr	r0, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000870:	f001 f97a 	bl	8001b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000874:	2304      	movs	r3, #4
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	486b      	ldr	r0, [pc, #428]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 8000888:	f000 ff0a 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088c:	2308      	movs	r3, #8
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4864      	ldr	r0, [pc, #400]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 80008a4:	f000 fefc 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008a8:	2332      	movs	r3, #50	; 0x32
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ac:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	485e      	ldr	r0, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x2a8>)
 80008bc:	f000 fef0 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4858      	ldr	r0, [pc, #352]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80008d8:	f000 fee2 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008dc:	2308      	movs	r3, #8
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ec:	2305      	movs	r3, #5
 80008ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4850      	ldr	r0, [pc, #320]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80008f8:	f000 fed2 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000900:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <MX_GPIO_Init+0x2b8>)
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	484e      	ldr	r0, [pc, #312]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 8000910:	f000 fec6 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000914:	2310      	movs	r3, #16
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000924:	2306      	movs	r3, #6
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4846      	ldr	r0, [pc, #280]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 8000930:	f000 feb6 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000934:	23e0      	movs	r3, #224	; 0xe0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	483e      	ldr	r0, [pc, #248]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 8000950:	f000 fea6 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000966:	2305      	movs	r3, #5
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4833      	ldr	r0, [pc, #204]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000972:	f000 fe95 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000976:	f24f 0310 	movw	r3, #61456	; 0xf010
 800097a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	482b      	ldr	r0, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000990:	f000 fe86 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000994:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a6:	2306      	movs	r3, #6
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4821      	ldr	r0, [pc, #132]	; (8000a38 <MX_GPIO_Init+0x2ac>)
 80009b2:	f000 fe75 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481f      	ldr	r0, [pc, #124]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 80009cc:	f000 fe68 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e2:	230a      	movs	r3, #10
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <MX_GPIO_Init+0x2bc>)
 80009ee:	f000 fe57 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f2:	2320      	movs	r3, #32
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_GPIO_Init+0x2b0>)
 8000a06:	f000 fe4b 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin;
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a0e:	2311      	movs	r3, #17
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <MX_GPIO_Init+0x2b4>)
 8000a22:	f000 fe3d 	bl	80016a0 <HAL_GPIO_Init>

}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020400 	.word	0x40020400
 8000a44:	10120000 	.word	0x10120000
 8000a48:	40020000 	.word	0x40020000

08000a4c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(5000);
 8000a54:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a58:	f003 fb36 	bl	80040c8 <osDelay>

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <StartDefaultTask+0x20>)
 8000a60:	f001 f89b 	bl	8001b9a <HAL_GPIO_TogglePin>

		printf("pepe  \n");
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <StartDefaultTask+0x24>)
 8000a66:	f005 ffbb 	bl	80069e0 <puts>
		osDelay(5000);
 8000a6a:	e7f3      	b.n	8000a54 <StartDefaultTask+0x8>
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	08007230 	.word	0x08007230

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 fd09 	bl	800149c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40010000 	.word	0x40010000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <HAL_MspInit+0x54>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x54>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fdad 	bl	800164c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f000 fda0 	bl	80016a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_I2C_MspDeInit+0x30>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d10a      	bne.n	8000bb8 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspDeInit+0x34>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_I2C_MspDeInit+0x34>)
 8000ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8000bae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_I2C_MspDeInit+0x38>)
 8000bb4:	f000 fef6 	bl	80019a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_UART_MspInit+0x84>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12b      	bne.n	8000c46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a10      	ldr	r2, [pc, #64]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_UART_MspInit+0x88>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c26:	230c      	movs	r3, #12
 8000c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4805      	ldr	r0, [pc, #20]	; (8000c58 <HAL_UART_MspInit+0x8c>)
 8000c42:	f000 fd2d 	bl	80016a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40004400 	.word	0x40004400
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020000 	.word	0x40020000

08000c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08c      	sub	sp, #48	; 0x30
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	2019      	movs	r0, #25
 8000c72:	f000 fceb 	bl	800164c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c76:	2019      	movs	r0, #25
 8000c78:	f000 fd04 	bl	8001684 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <HAL_InitTick+0xa0>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_InitTick+0xa0>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_InitTick+0xa0>)
 8000c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c98:	f107 0210 	add.w	r2, r7, #16
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fb74 	bl	8003390 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ca8:	f002 fb5e 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8000cac:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_InitTick+0xa4>)
 8000cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb6:	0c9b      	lsrs	r3, r3, #18
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <HAL_InitTick+0xac>)
 8000cc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_InitTick+0xa8>)
 8000ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cde:	f002 fb89 	bl	80033f4 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d104      	bne.n	8000cf2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ce8:	4806      	ldr	r0, [pc, #24]	; (8000d04 <HAL_InitTick+0xa8>)
 8000cea:	f002 fbb8 	bl	800345e <HAL_TIM_Base_Start_IT>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e000      	b.n	8000cf4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3730      	adds	r7, #48	; 0x30
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	431bde83 	.word	0x431bde83
 8000d04:	20008e90 	.word	0x20008e90
 8000d08:	40010000 	.word	0x40010000

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d46:	f002 fbae 	bl	80034a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20008e90 	.word	0x20008e90

08000d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e00a      	b.n	8000d7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d66:	f3af 8000 	nop.w
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	b2ca      	uxtb	r2, r1
 8000d74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	dbf0      	blt.n	8000d66 <_read+0x12>
	}

return len;
 8000d84:	687b      	ldr	r3, [r7, #4]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	60ba      	str	r2, [r7, #8]
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fbc1 	bl	8000530 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	3301      	adds	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dbf1      	blt.n	8000da0 <_write+0x12>
	}
	return len;
 8000dbc:	687b      	ldr	r3, [r7, #4]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <_close>:

int _close(int file)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dee:	605a      	str	r2, [r3, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_isatty>:

int _isatty(int file)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
	return 1;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x50>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <_sbrk+0x16>
		heap_end = &end;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <_sbrk+0x50>)
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <_sbrk+0x54>)
 8000e44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_sbrk+0x50>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <_sbrk+0x50>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	466a      	mov	r2, sp
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d907      	bls.n	8000e6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e5a:	f005 fd27 	bl	80068ac <__errno>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	230c      	movs	r3, #12
 8000e62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	e006      	b.n	8000e78 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <_sbrk+0x50>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <_sbrk+0x50>)
 8000e74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000c4 	.word	0x200000c4
 8000e84:	20008f28 	.word	0x20008f28

08000e88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <SystemInit+0x60>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <SystemInit+0x60>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <SystemInit+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a12      	ldr	r2, [pc, #72]	; (8000eec <SystemInit+0x64>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <SystemInit+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <SystemInit+0x64>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	; (8000eec <SystemInit+0x64>)
 8000eb4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <SystemInit+0x64>)
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <SystemInit+0x68>)
 8000ec2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <SystemInit+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a08      	ldr	r2, [pc, #32]	; (8000eec <SystemInit+0x64>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SystemInit+0x60>)
 8000ed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000edc:	609a      	str	r2, [r3, #8]
#endif
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	24003010 	.word	0x24003010

08000ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ef8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000efa:	e003      	b.n	8000f04 <LoopCopyDataInit>

08000efc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000efe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f02:	3104      	adds	r1, #4

08000f04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f06:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f0c:	d3f6      	bcc.n	8000efc <CopyDataInit>
  ldr  r2, =_sbss
 8000f0e:	4a0b      	ldr	r2, [pc, #44]	; (8000f3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f10:	e002      	b.n	8000f18 <LoopFillZerobss>

08000f12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f14:	f842 3b04 	str.w	r3, [r2], #4

08000f18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f1c:	d3f9      	bcc.n	8000f12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f1e:	f7ff ffb3 	bl	8000e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f22:	f005 fcc9 	bl	80068b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f26:	f7ff fb19 	bl	800055c <main>
  bx  lr    
 8000f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f2c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000f30:	080072dc 	.word	0x080072dc
  ldr  r0, =_sdata
 8000f34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f38:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8000f3c:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8000f40:	20008f28 	.word	0x20008f28

08000f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f44:	e7fe      	b.n	8000f44 <ADC_IRQHandler>
	...

08000f48 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct, ACCELERO_IO_t accel_io)
{  
 8000f48:	b084      	sub	sp, #16
 8000f4a:	b590      	push	{r4, r7, lr}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4604      	mov	r4, r0
 8000f52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  
  ACCELERO_IO = accel_io;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <LSM303DLHC_AccInit+0x5c>)
 8000f64:	461c      	mov	r4, r3
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /*  Low level init */
  ACCELERO_IO.COMPASSACCELERO_IO_Init();
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <LSM303DLHC_AccInit+0x5c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4798      	blx	r3
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO.COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <LSM303DLHC_AccInit+0x5c>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	2120      	movs	r1, #32
 8000f82:	2032      	movs	r0, #50	; 0x32
 8000f84:	4798      	blx	r3
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  ACCELERO_IO.COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <LSM303DLHC_AccInit+0x5c>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	2123      	movs	r1, #35	; 0x23
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	4798      	blx	r3
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000fa0:	b004      	add	sp, #16
 8000fa2:	4770      	bx	lr
 8000fa4:	20008ed0 	.word	0x20008ed0

08000fa8 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  ACCELERO_IO.COMPASSACCELERO_IO_Init();
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <LSM303DLHC_AccReadID+0x28>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4798      	blx	r3
  
  /* Read value at Who am I register address */
  ctrl = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <LSM303DLHC_AccReadID+0x28>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	210f      	movs	r1, #15
 8000fce:	2032      	movs	r0, #50	; 0x32
 8000fd0:	4798      	blx	r3
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20008ed0 	.word	0x20008ed0

08000fe4 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <LSM303DLHC_AccRebootCmd+0x30>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2124      	movs	r1, #36	; 0x24
 8000ff0:	2032      	movs	r0, #50	; 0x32
 8000ff2:	4798      	blx	r3
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ffe:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  ACCELERO_IO.COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <LSM303DLHC_AccRebootCmd+0x30>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	79fa      	ldrb	r2, [r7, #7]
 8001006:	2124      	movs	r1, #36	; 0x24
 8001008:	2032      	movs	r0, #50	; 0x32
 800100a:	4798      	blx	r3
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20008ed0 	.word	0x20008ed0

08001018 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <LSM303DLHC_AccFilterConfig+0x3c>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2121      	movs	r1, #33	; 0x21
 8001028:	2032      	movs	r0, #50	; 0x32
 800102a:	4798      	blx	r3
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4313      	orrs	r3, r2
 800103e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO.COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <LSM303DLHC_AccFilterConfig+0x3c>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	2121      	movs	r1, #33	; 0x21
 8001048:	2032      	movs	r0, #50	; 0x32
 800104a:	4798      	blx	r3
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20008ed0 	.word	0x20008ed0

08001058 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LSM303DLHC_AccFilterCmd+0x3c>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2121      	movs	r1, #33	; 0x21
 8001068:	2032      	movs	r0, #50	; 0x32
 800106a:	4798      	blx	r3
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f023 0308 	bic.w	r3, r3, #8
 8001076:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4313      	orrs	r3, r2
 800107e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  ACCELERO_IO.COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LSM303DLHC_AccFilterCmd+0x3c>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	2121      	movs	r1, #33	; 0x21
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	4798      	blx	r3
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20008ed0 	.word	0x20008ed0

08001098 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80010a0:	2300      	movs	r3, #0
 80010a2:	753b      	strb	r3, [r7, #20]
 80010a4:	2300      	movs	r3, #0
 80010a6:	757b      	strb	r3, [r7, #21]
  int8_t buffer[6];
  uint8_t i = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80010ac:	2301      	movs	r3, #1
 80010ae:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2123      	movs	r1, #35	; 0x23
 80010b6:	2032      	movs	r0, #50	; 0x32
 80010b8:	4798      	blx	r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80010be:	4b62      	ldr	r3, [pc, #392]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2124      	movs	r1, #36	; 0x24
 80010c4:	2032      	movs	r0, #50	; 0x32
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A);
 80010cc:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2128      	movs	r1, #40	; 0x28
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	4798      	blx	r3
 80010d6:	4603      	mov	r3, r0
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	733b      	strb	r3, [r7, #12]
  buffer[1] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2129      	movs	r1, #41	; 0x29
 80010e2:	2032      	movs	r0, #50	; 0x32
 80010e4:	4798      	blx	r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	737b      	strb	r3, [r7, #13]
  buffer[2] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80010ec:	4b56      	ldr	r3, [pc, #344]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	212a      	movs	r1, #42	; 0x2a
 80010f2:	2032      	movs	r0, #50	; 0x32
 80010f4:	4798      	blx	r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	73bb      	strb	r3, [r7, #14]
  buffer[3] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80010fc:	4b52      	ldr	r3, [pc, #328]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	212b      	movs	r1, #43	; 0x2b
 8001102:	2032      	movs	r0, #50	; 0x32
 8001104:	4798      	blx	r3
 8001106:	4603      	mov	r3, r0
 8001108:	b25b      	sxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
  buffer[4] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800110c:	4b4e      	ldr	r3, [pc, #312]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	212c      	movs	r1, #44	; 0x2c
 8001112:	2032      	movs	r0, #50	; 0x32
 8001114:	4798      	blx	r3
 8001116:	4603      	mov	r3, r0
 8001118:	b25b      	sxtb	r3, r3
 800111a:	743b      	strb	r3, [r7, #16]
  buffer[5] = ACCELERO_IO.COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <LSM303DLHC_AccReadXYZ+0x1b0>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	212d      	movs	r1, #45	; 0x2d
 8001122:	2032      	movs	r0, #50	; 0x32
 8001124:	4798      	blx	r3
 8001126:	4603      	mov	r3, r0
 8001128:	b25b      	sxtb	r3, r3
 800112a:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800112c:	7d3b      	ldrb	r3, [r7, #20]
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d126      	bne.n	8001184 <LSM303DLHC_AccReadXYZ+0xec>
  {
    for(i=0; i<3; i++)
 8001136:	2300      	movs	r3, #0
 8001138:	77fb      	strb	r3, [r7, #31]
 800113a:	e01f      	b.n	800117c <LSM303DLHC_AccReadXYZ+0xe4>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800113c:	7ffb      	ldrb	r3, [r7, #31]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	3301      	adds	r3, #1
 8001142:	f107 0220 	add.w	r2, r7, #32
 8001146:	4413      	add	r3, r2
 8001148:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800114c:	b29b      	uxth	r3, r3
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b29a      	uxth	r2, r3
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	f107 0120 	add.w	r1, r7, #32
 800115a:	440b      	add	r3, r1
 800115c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b29a      	uxth	r2, r3
 8001166:	7ffb      	ldrb	r3, [r7, #31]
 8001168:	b212      	sxth	r2, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	f107 0120 	add.w	r1, r7, #32
 8001170:	440b      	add	r3, r1
 8001172:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	3301      	adds	r3, #1
 800117a:	77fb      	strb	r3, [r7, #31]
 800117c:	7ffb      	ldrb	r3, [r7, #31]
 800117e:	2b02      	cmp	r3, #2
 8001180:	d9dc      	bls.n	800113c <LSM303DLHC_AccReadXYZ+0xa4>
 8001182:	e025      	b.n	80011d0 <LSM303DLHC_AccReadXYZ+0x138>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001184:	2300      	movs	r3, #0
 8001186:	77fb      	strb	r3, [r7, #31]
 8001188:	e01f      	b.n	80011ca <LSM303DLHC_AccReadXYZ+0x132>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	f107 0220 	add.w	r2, r7, #32
 8001192:	4413      	add	r3, r2
 8001194:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001198:	b29b      	uxth	r3, r3
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b29a      	uxth	r2, r3
 800119e:	7ffb      	ldrb	r3, [r7, #31]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	3301      	adds	r3, #1
 80011a4:	f107 0120 	add.w	r1, r7, #32
 80011a8:	440b      	add	r3, r1
 80011aa:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	b212      	sxth	r2, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	f107 0120 	add.w	r1, r7, #32
 80011be:	440b      	add	r3, r1
 80011c0:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80011c4:	7ffb      	ldrb	r3, [r7, #31]
 80011c6:	3301      	adds	r3, #1
 80011c8:	77fb      	strb	r3, [r7, #31]
 80011ca:	7ffb      	ldrb	r3, [r7, #31]
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d9dc      	bls.n	800118a <LSM303DLHC_AccReadXYZ+0xf2>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80011d0:	7d3b      	ldrb	r3, [r7, #20]
 80011d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80011d6:	2b10      	cmp	r3, #16
 80011d8:	d00c      	beq.n	80011f4 <LSM303DLHC_AccReadXYZ+0x15c>
 80011da:	2b10      	cmp	r3, #16
 80011dc:	dc02      	bgt.n	80011e4 <LSM303DLHC_AccReadXYZ+0x14c>
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <LSM303DLHC_AccReadXYZ+0x156>
 80011e2:	e010      	b.n	8001206 <LSM303DLHC_AccReadXYZ+0x16e>
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d008      	beq.n	80011fa <LSM303DLHC_AccReadXYZ+0x162>
 80011e8:	2b30      	cmp	r3, #48	; 0x30
 80011ea:	d009      	beq.n	8001200 <LSM303DLHC_AccReadXYZ+0x168>
 80011ec:	e00b      	b.n	8001206 <LSM303DLHC_AccReadXYZ+0x16e>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80011ee:	2301      	movs	r3, #1
 80011f0:	77bb      	strb	r3, [r7, #30]
    break;
 80011f2:	e008      	b.n	8001206 <LSM303DLHC_AccReadXYZ+0x16e>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80011f4:	2302      	movs	r3, #2
 80011f6:	77bb      	strb	r3, [r7, #30]
    break;
 80011f8:	e005      	b.n	8001206 <LSM303DLHC_AccReadXYZ+0x16e>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80011fa:	2304      	movs	r3, #4
 80011fc:	77bb      	strb	r3, [r7, #30]
    break;
 80011fe:	e002      	b.n	8001206 <LSM303DLHC_AccReadXYZ+0x16e>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001200:	230c      	movs	r3, #12
 8001202:	77bb      	strb	r3, [r7, #30]
    break;
 8001204:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	77fb      	strb	r3, [r7, #31]
 800120a:	e015      	b.n	8001238 <LSM303DLHC_AccReadXYZ+0x1a0>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	f107 0220 	add.w	r2, r7, #32
 8001214:	4413      	add	r3, r2
 8001216:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800121a:	b29a      	uxth	r2, r3
 800121c:	7fbb      	ldrb	r3, [r7, #30]
 800121e:	b29b      	uxth	r3, r3
 8001220:	fb12 f303 	smulbb	r3, r2, r3
 8001224:	b299      	uxth	r1, r3
 8001226:	7ffb      	ldrb	r3, [r7, #31]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	b20a      	sxth	r2, r1
 8001230:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001232:	7ffb      	ldrb	r3, [r7, #31]
 8001234:	3301      	adds	r3, #1
 8001236:	77fb      	strb	r3, [r7, #31]
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	2b02      	cmp	r3, #2
 800123c:	d9e6      	bls.n	800120c <LSM303DLHC_AccReadXYZ+0x174>
  }
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20008ed0 	.word	0x20008ed0

0800124c <acelerometro_init>:
static void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr,
		uint8_t Value);
static uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr,
		uint8_t RegisterAddr);

uint8_t acelerometro_init(I2C_HandleTypeDef *I2c, void *I2c_init) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b08b      	sub	sp, #44	; 0x2c
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]

	I2cHandle = I2c;
 8001256:	4a3d      	ldr	r2, [pc, #244]	; (800134c <acelerometro_init+0x100>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6013      	str	r3, [r2, #0]
	I2Cx_Init = (I2c_init_t) I2c_init;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	4a3c      	ldr	r2, [pc, #240]	; (8001350 <acelerometro_init+0x104>)
 8001260:	6013      	str	r3, [r2, #0]

	acelero_io.COMPASSACCELERO_IO_Init = COMPASSACCELERO_IO_Init;
 8001262:	4b3c      	ldr	r3, [pc, #240]	; (8001354 <acelerometro_init+0x108>)
 8001264:	4a3c      	ldr	r2, [pc, #240]	; (8001358 <acelerometro_init+0x10c>)
 8001266:	601a      	str	r2, [r3, #0]
	acelero_io.COMPASSACCELERO_IO_ITConfig = COMPASSACCELERO_IO_ITConfig;
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <acelerometro_init+0x108>)
 800126a:	4a3c      	ldr	r2, [pc, #240]	; (800135c <acelerometro_init+0x110>)
 800126c:	605a      	str	r2, [r3, #4]
	acelero_io.COMPASSACCELERO_IO_Write = COMPASSACCELERO_IO_Write;
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <acelerometro_init+0x108>)
 8001270:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <acelerometro_init+0x114>)
 8001272:	609a      	str	r2, [r3, #8]
	acelero_io.COMPASSACCELERO_IO_Read = COMPASSACCELERO_IO_Read;
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <acelerometro_init+0x108>)
 8001276:	4a3b      	ldr	r2, [pc, #236]	; (8001364 <acelerometro_init+0x118>)
 8001278:	60da      	str	r2, [r3, #12]

	uint8_t ret = ACCELERO_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	77fb      	strb	r3, [r7, #31]
	uint16_t ctrl = 0x0000;
 800127e:	2300      	movs	r3, #0
 8001280:	83bb      	strh	r3, [r7, #28]
	ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
	ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = { 0, 0, 0, 0 };
 8001282:	f107 030c 	add.w	r3, r7, #12
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	809a      	strh	r2, [r3, #4]

	if (Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC) {
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <acelerometro_init+0x11c>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b33      	cmp	r3, #51	; 0x33
 8001296:	d152      	bne.n	800133e <acelerometro_init+0xf2>
		/* Initialize the Accelerometer driver structure */
		AccelerometerDrv = &Lsm303dlhcDrv;
 8001298:	4b34      	ldr	r3, [pc, #208]	; (800136c <acelerometro_init+0x120>)
 800129a:	4a33      	ldr	r2, [pc, #204]	; (8001368 <acelerometro_init+0x11c>)
 800129c:	601a      	str	r2, [r3, #0]

		/* MEMS configuration ----------------------------------------------------*/
		/* Fill the Accelerometer structure */
		LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 800129e:	2300      	movs	r3, #0
 80012a0:	753b      	strb	r3, [r7, #20]
		LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80012a2:	2340      	movs	r3, #64	; 0x40
 80012a4:	757b      	strb	r3, [r7, #21]
		LSM303DLHC_InitStructure.Axes_Enable = LSM303DLHC_AXES_ENABLE;
 80012a6:	2307      	movs	r3, #7
 80012a8:	75bb      	strb	r3, [r7, #22]
		LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 80012aa:	2300      	movs	r3, #0
 80012ac:	76bb      	strb	r3, [r7, #26]
		LSM303DLHC_InitStructure.BlockData_Update =
 80012ae:	2300      	movs	r3, #0
 80012b0:	763b      	strb	r3, [r7, #24]
				LSM303DLHC_BlockUpdate_Continous;
		LSM303DLHC_InitStructure.Endianness = LSM303DLHC_BLE_LSB;
 80012b2:	2300      	movs	r3, #0
 80012b4:	767b      	strb	r3, [r7, #25]
		LSM303DLHC_InitStructure.High_Resolution = LSM303DLHC_HR_ENABLE;
 80012b6:	2308      	movs	r3, #8
 80012b8:	75fb      	strb	r3, [r7, #23]

		/* Configure MEMS: data rate, power mode, full scale and axes */
		ctrl |= (LSM303DLHC_InitStructure.Power_Mode
 80012ba:	7d3a      	ldrb	r2, [r7, #20]
				| LSM303DLHC_InitStructure.AccOutput_DataRate
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
		ctrl |= (LSM303DLHC_InitStructure.Power_Mode
 80012be:	4313      	orrs	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
				| LSM303DLHC_InitStructure.Axes_Enable);
 80012c2:	7dbb      	ldrb	r3, [r7, #22]
		ctrl |= (LSM303DLHC_InitStructure.Power_Mode
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	8bbb      	ldrh	r3, [r7, #28]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	83bb      	strh	r3, [r7, #28]

		ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update
 80012d0:	7e3a      	ldrb	r2, [r7, #24]
				| LSM303DLHC_InitStructure.Endianness
 80012d2:	7e7b      	ldrb	r3, [r7, #25]
				| LSM303DLHC_InitStructure.AccFull_Scale
				| LSM303DLHC_InitStructure.High_Resolution) << 8);
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b2da      	uxtb	r2, r3
				| LSM303DLHC_InitStructure.AccFull_Scale
 80012d8:	7ebb      	ldrb	r3, [r7, #26]
				| LSM303DLHC_InitStructure.High_Resolution) << 8);
 80012da:	4313      	orrs	r3, r2
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	021b      	lsls	r3, r3, #8
		ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	83bb      	strh	r3, [r7, #28]

		/* Configure the Accelerometer main parameters */
		AccelerometerDrv->Init(ctrl, acelero_io);
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <acelerometro_init+0x120>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681c      	ldr	r4, [r3, #0]
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <acelerometro_init+0x108>)
 80012fa:	8bb8      	ldrh	r0, [r7, #28]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	9200      	str	r2, [sp, #0]
 8001300:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001302:	47a0      	blx	r4

		/* Fill the Accelerometer LPF structure */
		LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	733b      	strb	r3, [r7, #12]
				LSM303DLHC_HPM_NORMAL_MODE;
		LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency =
 8001308:	2310      	movs	r3, #16
 800130a:	737b      	strb	r3, [r7, #13]
				LSM303DLHC_HPFCF_16;
		LSM303DLHC_FilterStructure.HighPassFilter_AOI1 =
 800130c:	2300      	movs	r3, #0
 800130e:	73bb      	strb	r3, [r7, #14]
				LSM303DLHC_HPF_AOI1_DISABLE;
		LSM303DLHC_FilterStructure.HighPassFilter_AOI2 =
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
				LSM303DLHC_HPF_AOI2_DISABLE;

		/* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
		ctrl =
				(uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection
 8001314:	7b3a      	ldrb	r2, [r7, #12]
						|\
 LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency
 8001316:	7b7b      	ldrb	r3, [r7, #13]
				(uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection
 8001318:	4313      	orrs	r3, r2
 800131a:	b2da      	uxtb	r2, r3
						|\
 LSM303DLHC_FilterStructure.HighPassFilter_AOI1
 800131c:	7bbb      	ldrb	r3, [r7, #14]
				(uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection
 800131e:	4313      	orrs	r3, r2
 8001320:	b2da      	uxtb	r2, r3
						|\
 LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 8001322:	7bfb      	ldrb	r3, [r7, #15]
				(uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection
 8001324:	4313      	orrs	r3, r2
 8001326:	b2db      	uxtb	r3, r3
		ctrl =
 8001328:	83bb      	strh	r3, [r7, #28]

		/* Configure the Accelerometer LPF main parameters */
		AccelerometerDrv->FilterConfig(ctrl);
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <acelerometro_init+0x120>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	8bba      	ldrh	r2, [r7, #28]
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	4610      	mov	r0, r2
 8001336:	4798      	blx	r3

		ret = ACCELERO_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	77fb      	strb	r3, [r7, #31]
 800133c:	e001      	b.n	8001342 <acelerometro_init+0xf6>
	} else {
		ret = ACCELERO_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8001342:	7ffb      	ldrb	r3, [r7, #31]

}
 8001344:	4618      	mov	r0, r3
 8001346:	3724      	adds	r7, #36	; 0x24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	200000d8 	.word	0x200000d8
 8001350:	200000e0 	.word	0x200000e0
 8001354:	200000c8 	.word	0x200000c8
 8001358:	0800141d 	.word	0x0800141d
 800135c:	0800142b 	.word	0x0800142b
 8001360:	08001371 	.word	0x08001371
 8001364:	080013c5 	.word	0x080013c5
 8001368:	20000004 	.word	0x20000004
 800136c:	200000dc 	.word	0x200000dc

08001370 <COMPASSACCELERO_IO_Write>:
    }
  }
}

static void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr,
		uint8_t Value) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af04      	add	r7, sp, #16
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	460b      	mov	r3, r1
 800137c:	717b      	strb	r3, [r7, #5]
 800137e:	4613      	mov	r3, r2
 8001380:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(I2cHandle, DeviceAddr, (uint16_t) RegisterAddr,
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <COMPASSACCELERO_IO_Write+0x4c>)
 8001388:	6818      	ldr	r0, [r3, #0]
 800138a:	797b      	ldrb	r3, [r7, #5]
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <COMPASSACCELERO_IO_Write+0x50>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	88f9      	ldrh	r1, [r7, #6]
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2301      	movs	r3, #1
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 fd6e 	bl	8001e80 <HAL_I2C_Mem_Write>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <COMPASSACCELERO_IO_Write+0x42>
		/* Execute user timeout callback */
		I2Cx_Error();
 80013ae:	f000 f843 	bl	8001438 <I2Cx_Error>
	}
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200000d8 	.word	0x200000d8
 80013c0:	20000038 	.word	0x20000038

080013c4 <COMPASSACCELERO_IO_Read>:

static uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af04      	add	r7, sp, #16
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	80fb      	strh	r3, [r7, #6]
 80013d0:	4613      	mov	r3, r2
 80013d2:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status = HAL_OK;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
	uint8_t value = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(I2cHandle, DeviceAddr, RegisterAddr,
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <COMPASSACCELERO_IO_Read+0x50>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	797b      	ldrb	r3, [r7, #5]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <COMPASSACCELERO_IO_Read+0x54>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	88f9      	ldrh	r1, [r7, #6]
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	f107 030e 	add.w	r3, r7, #14
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	f000 fe3c 	bl	8002074 <HAL_I2C_Mem_Read>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
	I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <COMPASSACCELERO_IO_Read+0x46>
		/* Execute user timeout callback */
		I2Cx_Error();
 8001406:	f000 f817 	bl	8001438 <I2Cx_Error>
	}
	return value;
 800140a:	7bbb      	ldrb	r3, [r7, #14]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000d8 	.word	0x200000d8
 8001418:	20000038 	.word	0x20000038

0800141c <COMPASSACCELERO_IO_Init>:

static void COMPASSACCELERO_IO_Init(void) {
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

// No implementado

}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <COMPASSACCELERO_IO_ITConfig>:

static void COMPASSACCELERO_IO_ITConfig(void) {
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

// No implementado
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <I2Cx_Error>:

/**
 * @brief  I2Cx error treatment function.
 */
static void I2Cx_Error(void) {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	/* De-initialize the I2C comunication BUS */
	HAL_I2C_DeInit(I2cHandle);
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <I2Cx_Error+0x18>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fced 	bl	8001e20 <HAL_I2C_DeInit>

	/* Re- Initiaize the I2C comunication BUS */
	I2Cx_Init();
 8001446:	4b03      	ldr	r3, [pc, #12]	; (8001454 <I2Cx_Error+0x1c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4798      	blx	r3
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000d8 	.word	0x200000d8
 8001454:	200000e0 	.word	0x200000e0

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f8d8 	bl	8001636 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fbe8 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fb0c 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000003c 	.word	0x2000003c
 80014c0:	20008ee0 	.word	0x20008ee0

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20008ee0 	.word	0x20008ee0

080014dc <__NVIC_SetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff4c 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165e:	f7ff ff61 	bl	8001524 <__NVIC_GetPriorityGrouping>
 8001662:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68b9      	ldr	r1, [r7, #8]
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f7ff ffb1 	bl	80015d0 <NVIC_EncodePriority>
 800166e:	4602      	mov	r2, r0
 8001670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff80 	bl	800157c <__NVIC_SetPriority>
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff54 	bl	8001540 <__NVIC_EnableIRQ>
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
 80016ba:	e159      	b.n	8001970 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016bc:	2201      	movs	r2, #1
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	f040 8148 	bne.w	800196a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x4a>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	69b9      	ldr	r1, [r7, #24]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d00b      	beq.n	8001786 <HAL_GPIO_Init+0xe6>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177a:	2b11      	cmp	r3, #17
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b12      	cmp	r3, #18
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80a2 	beq.w	800196a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b56      	ldr	r3, [pc, #344]	; (8001984 <HAL_GPIO_Init+0x2e4>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a55      	ldr	r2, [pc, #340]	; (8001984 <HAL_GPIO_Init+0x2e4>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_GPIO_Init+0x2e4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001842:	4a51      	ldr	r2, [pc, #324]	; (8001988 <HAL_GPIO_Init+0x2e8>)
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2ec>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x202>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x1fe>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2f4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x1fa>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a45      	ldr	r2, [pc, #276]	; (8001998 <HAL_GPIO_Init+0x2f8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x1f6>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a44      	ldr	r2, [pc, #272]	; (800199c <HAL_GPIO_Init+0x2fc>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x1f2>
 800188e:	2304      	movs	r3, #4
 8001890:	e008      	b.n	80018a4 <HAL_GPIO_Init+0x204>
 8001892:	2307      	movs	r3, #7
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x204>
 8001896:	2303      	movs	r3, #3
 8001898:	e004      	b.n	80018a4 <HAL_GPIO_Init+0x204>
 800189a:	2302      	movs	r3, #2
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_Init+0x204>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <HAL_GPIO_Init+0x204>
 80018a2:	2300      	movs	r3, #0
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f002 0203 	and.w	r2, r2, #3
 80018aa:	0092      	lsls	r2, r2, #2
 80018ac:	4093      	lsls	r3, r2
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b4:	4934      	ldr	r1, [pc, #208]	; (8001988 <HAL_GPIO_Init+0x2e8>)
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_GPIO_Init+0x300>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <HAL_GPIO_Init+0x300>)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_GPIO_Init+0x300>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_GPIO_Init+0x300>)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_GPIO_Init+0x300>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	f67f aea2 	bls.w	80016bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001978:	bf00      	nop
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400
 8001994:	40020800 	.word	0x40020800
 8001998:	40020c00 	.word	0x40020c00
 800199c:	40021000 	.word	0x40021000
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e0bb      	b.n	8001b38 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	f040 80ab 	bne.w	8001b32 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80019dc:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <HAL_GPIO_DeInit+0x1a8>)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	089b      	lsrs	r3, r3, #2
 80019e2:	3302      	adds	r3, #2
 80019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	220f      	movs	r2, #15
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	4013      	ands	r3, r2
 80019fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a53      	ldr	r2, [pc, #332]	; (8001b50 <HAL_GPIO_DeInit+0x1ac>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_DeInit+0x96>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a52      	ldr	r2, [pc, #328]	; (8001b54 <HAL_GPIO_DeInit+0x1b0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_DeInit+0x92>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a51      	ldr	r2, [pc, #324]	; (8001b58 <HAL_GPIO_DeInit+0x1b4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_DeInit+0x8e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <HAL_GPIO_DeInit+0x1b8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_DeInit+0x8a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_GPIO_DeInit+0x1bc>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_DeInit+0x86>
 8001a26:	2304      	movs	r3, #4
 8001a28:	e008      	b.n	8001a3c <HAL_GPIO_DeInit+0x98>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e006      	b.n	8001a3c <HAL_GPIO_DeInit+0x98>
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e004      	b.n	8001a3c <HAL_GPIO_DeInit+0x98>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e002      	b.n	8001a3c <HAL_GPIO_DeInit+0x98>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_DeInit+0x98>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	f002 0203 	and.w	r2, r2, #3
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	4093      	lsls	r3, r2
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d132      	bne.n	8001ab2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001a5c:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_GPIO_DeInit+0x1a8>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	4837      	ldr	r0, [pc, #220]	; (8001b4c <HAL_GPIO_DeInit+0x1a8>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	400a      	ands	r2, r1
 8001a74:	3302      	adds	r3, #2
 8001a76:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4938      	ldr	r1, [pc, #224]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001a88:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001a96:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4931      	ldr	r1, [pc, #196]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	492d      	ldr	r1, [pc, #180]	; (8001b64 <HAL_GPIO_DeInit+0x1c0>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2103      	movs	r1, #3
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	08d2      	lsrs	r2, r2, #3
 8001ae8:	4019      	ands	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2103      	movs	r1, #3
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2103      	movs	r1, #3
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f af40 	bls.w	80019c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	40020000 	.word	0x40020000
 8001b54:	40020400 	.word	0x40020400
 8001b58:	40020800 	.word	0x40020800
 8001b5c:	40020c00 	.word	0x40020c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
 8001b74:	4613      	mov	r3, r2
 8001b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b78:	787b      	ldrb	r3, [r7, #1]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b84:	e003      	b.n	8001b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b86:	887b      	ldrh	r3, [r7, #2]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	401a      	ands	r2, r3
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d104      	bne.n	8001bbe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	041a      	lsls	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e10f      	b.n	8001e02 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe ff82 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2224      	movs	r2, #36	; 0x24
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c14:	f001 fb94 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	; (8001e0c <HAL_I2C_Init+0x23c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d807      	bhi.n	8001c34 <HAL_I2C_Init+0x64>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_I2C_Init+0x240>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	bf94      	ite	ls
 8001c2c:	2301      	movls	r3, #1
 8001c2e:	2300      	movhi	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	e006      	b.n	8001c42 <HAL_I2C_Init+0x72>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a77      	ldr	r2, [pc, #476]	; (8001e14 <HAL_I2C_Init+0x244>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0db      	b.n	8001e02 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4a72      	ldr	r2, [pc, #456]	; (8001e18 <HAL_I2C_Init+0x248>)
 8001c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c52:	0c9b      	lsrs	r3, r3, #18
 8001c54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a64      	ldr	r2, [pc, #400]	; (8001e0c <HAL_I2C_Init+0x23c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d802      	bhi.n	8001c84 <HAL_I2C_Init+0xb4>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3301      	adds	r3, #1
 8001c82:	e009      	b.n	8001c98 <HAL_I2C_Init+0xc8>
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <HAL_I2C_Init+0x24c>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	430b      	orrs	r3, r1
 8001c9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001caa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4956      	ldr	r1, [pc, #344]	; (8001e0c <HAL_I2C_Init+0x23c>)
 8001cb4:	428b      	cmp	r3, r1
 8001cb6:	d80d      	bhi.n	8001cd4 <HAL_I2C_Init+0x104>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1e59      	subs	r1, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	bf38      	it	cc
 8001cd0:	2304      	movcc	r3, #4
 8001cd2:	e04f      	b.n	8001d74 <HAL_I2C_Init+0x1a4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d111      	bne.n	8001d00 <HAL_I2C_Init+0x130>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1e58      	subs	r0, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	440b      	add	r3, r1
 8001cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cee:	3301      	adds	r3, #1
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	e012      	b.n	8001d26 <HAL_I2C_Init+0x156>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1e58      	subs	r0, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	440b      	add	r3, r1
 8001d0e:	0099      	lsls	r1, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_I2C_Init+0x15e>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e022      	b.n	8001d74 <HAL_I2C_Init+0x1a4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10e      	bne.n	8001d54 <HAL_I2C_Init+0x184>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1e58      	subs	r0, r3, #1
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6859      	ldr	r1, [r3, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	440b      	add	r3, r1
 8001d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	e00f      	b.n	8001d74 <HAL_I2C_Init+0x1a4>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	6809      	ldr	r1, [r1, #0]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6911      	ldr	r1, [r2, #16]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	430b      	orrs	r3, r1
 8001db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	000186a0 	.word	0x000186a0
 8001e10:	001e847f 	.word	0x001e847f
 8001e14:	003d08ff 	.word	0x003d08ff
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	10624dd3 	.word	0x10624dd3

08001e20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e021      	b.n	8001e76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2224      	movs	r2, #36	; 0x24
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7fe fea0 	bl	8000b90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	4608      	mov	r0, r1
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4603      	mov	r3, r0
 8001e90:	817b      	strh	r3, [r7, #10]
 8001e92:	460b      	mov	r3, r1
 8001e94:	813b      	strh	r3, [r7, #8]
 8001e96:	4613      	mov	r3, r2
 8001e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e9a:	f7ff fb13 	bl	80014c4 <HAL_GetTick>
 8001e9e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b20      	cmp	r3, #32
 8001eaa:	f040 80d9 	bne.w	8002060 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2319      	movs	r3, #25
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	496d      	ldr	r1, [pc, #436]	; (800206c <HAL_I2C_Mem_Write+0x1ec>)
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fc5b 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0cc      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Mem_Write+0x56>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e0c5      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d007      	beq.n	8001efc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2221      	movs	r2, #33	; 0x21
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a4d      	ldr	r2, [pc, #308]	; (8002070 <HAL_I2C_Mem_Write+0x1f0>)
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f3e:	88f8      	ldrh	r0, [r7, #6]
 8001f40:	893a      	ldrh	r2, [r7, #8]
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fab6 	bl	80024c0 <I2C_RequestMemoryWrite>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d052      	beq.n	8002000 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e081      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fcdc 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d107      	bne.n	8001f86 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06b      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	781a      	ldrb	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_I2C_Mem_Write+0x180>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d017      	beq.n	8002000 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1aa      	bne.n	8001f5e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fcc8 	bl	80029a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	2b04      	cmp	r3, #4
 800201e:	d107      	bne.n	8002030 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e016      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002060:	2302      	movs	r3, #2
  }
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	00100002 	.word	0x00100002
 8002070:	ffff0000 	.word	0xffff0000

08002074 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	; 0x30
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	817b      	strh	r3, [r7, #10]
 8002086:	460b      	mov	r3, r1
 8002088:	813b      	strh	r3, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800208e:	f7ff fa19 	bl	80014c4 <HAL_GetTick>
 8002092:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	f040 8208 	bne.w	80024b2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2319      	movs	r3, #25
 80020a8:	2201      	movs	r2, #1
 80020aa:	497b      	ldr	r1, [pc, #492]	; (8002298 <HAL_I2C_Mem_Read+0x224>)
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fb61 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80020b8:	2302      	movs	r3, #2
 80020ba:	e1fb      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Mem_Read+0x56>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e1f4      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d007      	beq.n	80020f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2222      	movs	r2, #34	; 0x22
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2240      	movs	r2, #64	; 0x40
 800210c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a5b      	ldr	r2, [pc, #364]	; (800229c <HAL_I2C_Mem_Read+0x228>)
 8002130:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002132:	88f8      	ldrh	r0, [r7, #6]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	8979      	ldrh	r1, [r7, #10]
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4603      	mov	r3, r0
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fa46 	bl	80025d4 <I2C_RequestMemoryRead>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e1b0      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002156:	2b00      	cmp	r3, #0
 8002158:	d113      	bne.n	8002182 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800215a:	2300      	movs	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	623b      	str	r3, [r7, #32]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	e184      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	2b01      	cmp	r3, #1
 8002188:	d11b      	bne.n	80021c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e164      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d11b      	bne.n	8002202 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	e144      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002218:	e138      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	2b03      	cmp	r3, #3
 8002220:	f200 80f1 	bhi.w	8002406 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002228:	2b01      	cmp	r3, #1
 800222a:	d123      	bne.n	8002274 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fbf7 	bl	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e139      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002268:	b29b      	uxth	r3, r3
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002272:	e10b      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002278:	2b02      	cmp	r3, #2
 800227a:	d14e      	bne.n	800231a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002282:	2200      	movs	r2, #0
 8002284:	4906      	ldr	r1, [pc, #24]	; (80022a0 <HAL_I2C_Mem_Read+0x22c>)
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 fa74 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e10e      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
 8002296:	bf00      	nop
 8002298:	00100002 	.word	0x00100002
 800229c:	ffff0000 	.word	0xffff0000
 80022a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29a      	uxth	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002318:	e0b8      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	2200      	movs	r2, #0
 8002322:	4966      	ldr	r1, [pc, #408]	; (80024bc <HAL_I2C_Mem_Read+0x448>)
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fa25 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0bf      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	2200      	movs	r2, #0
 800237e:	494f      	ldr	r1, [pc, #316]	; (80024bc <HAL_I2C_Mem_Read+0x448>)
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f9f7 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e091      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	3b01      	subs	r3, #1
 80023fe:	b29a      	uxth	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002404:	e042      	b.n	800248c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fb0a 	bl	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e04c      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b04      	cmp	r3, #4
 8002458:	d118      	bne.n	800248c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f aec2 	bne.w	800221a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024b2:	2302      	movs	r3, #2
  }
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	00010004 	.word	0x00010004

080024c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f93c 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e05f      	b.n	80025c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002514:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	6a3a      	ldr	r2, [r7, #32]
 800251a:	492d      	ldr	r1, [pc, #180]	; (80025d0 <I2C_RequestMemoryWrite+0x110>)
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f000 f980 	bl	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e04c      	b.n	80025c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	6a39      	ldr	r1, [r7, #32]
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f9ea 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00d      	beq.n	800256e <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d107      	bne.n	800256a <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002568:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02b      	b.n	80025c6 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002574:	893b      	ldrh	r3, [r7, #8]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	611a      	str	r2, [r3, #16]
 800257e:	e021      	b.n	80025c4 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002580:	893b      	ldrh	r3, [r7, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	b29b      	uxth	r3, r3
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	6a39      	ldr	r1, [r7, #32]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f9c4 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d107      	bne.n	80025b6 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e005      	b.n	80025c6 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025ba:	893b      	ldrh	r3, [r7, #8]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	00010002 	.word	0x00010002

080025d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	461a      	mov	r2, r3
 80025e2:	4603      	mov	r3, r0
 80025e4:	817b      	strh	r3, [r7, #10]
 80025e6:	460b      	mov	r3, r1
 80025e8:	813b      	strh	r3, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	2200      	movs	r2, #0
 8002616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8aa 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e09e      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002638:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	6a3a      	ldr	r2, [r7, #32]
 800263e:	494c      	ldr	r1, [pc, #304]	; (8002770 <I2C_RequestMemoryRead+0x19c>)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8ee 	bl	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e08b      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	6a39      	ldr	r1, [r7, #32]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f958 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00d      	beq.n	8002692 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b04      	cmp	r3, #4
 800267c:	d107      	bne.n	800268e <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e06a      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002698:	893b      	ldrh	r3, [r7, #8]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	e021      	b.n	80026e8 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026a4:	893b      	ldrh	r3, [r7, #8]
 80026a6:	0a1b      	lsrs	r3, r3, #8
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f932 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00d      	beq.n	80026de <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d107      	bne.n	80026da <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e044      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ea:	6a39      	ldr	r1, [r7, #32]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f917 	bl	8002920 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d107      	bne.n	8002710 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e029      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	2200      	movs	r2, #0
 800272c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f81f 	bl	8002774 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e013      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002740:	897b      	ldrh	r3, [r7, #10]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	6a3a      	ldr	r2, [r7, #32]
 8002754:	4906      	ldr	r1, [pc, #24]	; (8002770 <I2C_RequestMemoryRead+0x19c>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f863 	bl	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	00010002 	.word	0x00010002

08002774 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002784:	e025      	b.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278c:	d021      	beq.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278e:	f7fe fe99 	bl	80014c4 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d302      	bcc.n	80027a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d116      	bne.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e023      	b.n	800281a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d10d      	bne.n	80027f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	e00c      	b.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	429a      	cmp	r2, r3
 8002816:	d0b6      	beq.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b084      	sub	sp, #16
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002830:	e051      	b.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002840:	d123      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800285a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0204 	orr.w	r2, r3, #4
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e046      	b.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d021      	beq.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe fe17 	bl	80014c4 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d116      	bne.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e020      	b.n	8002918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e00b      	b.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d18d      	bne.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800292c:	e02d      	b.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f8ce 	bl	8002ad0 <I2C_IsAcknowledgeFailed>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e02d      	b.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d021      	beq.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002946:	f7fe fdbd 	bl	80014c4 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d302      	bcc.n	800295c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d116      	bne.n	800298a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f043 0220 	orr.w	r2, r3, #32
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e007      	b.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d1ca      	bne.n	800292e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029ae:	e02d      	b.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f88d 	bl	8002ad0 <I2C_IsAcknowledgeFailed>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e02d      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d021      	beq.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c8:	f7fe fd7c 	bl	80014c4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d302      	bcc.n	80029de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2220      	movs	r2, #32
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e007      	b.n	8002a1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d1ca      	bne.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a30:	e042      	b.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b10      	cmp	r3, #16
 8002a3e:	d119      	bne.n	8002a74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0210 	mvn.w	r2, #16
 8002a48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e029      	b.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a74:	f7fe fd26 	bl	80014c4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d302      	bcc.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d116      	bne.n	8002ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	2b40      	cmp	r3, #64	; 0x40
 8002ac4:	d1b5      	bne.n	8002a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae6:	d11b      	bne.n	8002b20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002af0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e22d      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d075      	beq.n	8002c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4e:	4ba3      	ldr	r3, [pc, #652]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4ba0      	ldr	r3, [pc, #640]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b9d      	ldr	r3, [pc, #628]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b99      	ldr	r3, [pc, #612]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x108>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e208      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x74>
 8002b96:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a90      	ldr	r2, [pc, #576]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a8a      	ldr	r2, [pc, #552]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	4b84      	ldr	r3, [pc, #528]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a83      	ldr	r2, [pc, #524]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc6c 	bl	80014c4 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe fc68 	bl	80014c4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1cd      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b76      	ldr	r3, [pc, #472]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe fc58 	bl	80014c4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fc54 	bl	80014c4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1b9      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe8>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b62      	ldr	r3, [pc, #392]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e18d      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b56      	ldr	r3, [pc, #344]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4952      	ldr	r1, [pc, #328]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fc0d 	bl	80014c4 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fc09 	bl	80014c4 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e16e      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b43      	ldr	r3, [pc, #268]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4940      	ldr	r1, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x2b0>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fbec 	bl	80014c4 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fbe8 	bl	80014c4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e14d      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d030      	beq.n	8002d7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCC_OscConfig+0x2b4>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fbcc 	bl	80014c4 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe fbc8 	bl	80014c4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e12d      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x200>
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCC_OscConfig+0x2b4>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe fbb5 	bl	80014c4 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fbb1 	bl	80014c4 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e116      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	4b1a      	ldr	r3, [pc, #104]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f0      	bne.n	8002d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a0 	beq.w	8002eca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8e:	4b13      	ldr	r3, [pc, #76]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10f      	bne.n	8002dba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002db6:	2301      	movs	r3, #1
 8002db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RCC_OscConfig+0x2b8>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fb77 	bl	80014c4 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	e011      	b.n	8002dfe <HAL_RCC_OscConfig+0x2ce>
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	42470000 	.word	0x42470000
 8002de4:	42470e80 	.word	0x42470e80
 8002de8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dec:	f7fe fb6a 	bl	80014c4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0cf      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x2f0>
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCC_OscConfig+0x32a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x312>
 8002e28:	4b60      	ldr	r3, [pc, #384]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a5f      	ldr	r2, [pc, #380]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a5c      	ldr	r2, [pc, #368]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x32a>
 8002e42:	4b5a      	ldr	r3, [pc, #360]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a59      	ldr	r2, [pc, #356]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4b57      	ldr	r3, [pc, #348]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a56      	ldr	r2, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe fb2f 	bl	80014c4 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fb2b 	bl	80014c4 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e08e      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCC_OscConfig+0x33a>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fb19 	bl	80014c4 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fb15 	bl	80014c4 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e078      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a3a      	ldr	r2, [pc, #232]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d064      	beq.n	8002f9c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d05c      	beq.n	8002f98 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d141      	bne.n	8002f6a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_OscConfig+0x480>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe faea 	bl	80014c4 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fae6 	bl	80014c4 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04b      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f06:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	019b      	lsls	r3, r3, #6
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	491d      	ldr	r1, [pc, #116]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCC_OscConfig+0x480>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fabf 	bl	80014c4 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fabb 	bl	80014c4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e020      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x41a>
 8002f68:	e018      	b.n	8002f9c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_RCC_OscConfig+0x480>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7fe faa8 	bl	80014c4 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe faa4 	bl	80014c4 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e009      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_RCC_OscConfig+0x47c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x448>
 8002f96:	e001      	b.n	8002f9c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470060 	.word	0x42470060

08002fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ca      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d90c      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b64      	ldr	r3, [pc, #400]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b62      	ldr	r3, [pc, #392]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0b6      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d020      	beq.n	800303e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003008:	4b58      	ldr	r3, [pc, #352]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 800300e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003020:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	4a51      	ldr	r2, [pc, #324]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302c:	4b4f      	ldr	r3, [pc, #316]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	494c      	ldr	r1, [pc, #304]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d044      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d107      	bne.n	8003062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003052:	4b46      	ldr	r3, [pc, #280]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d119      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e07d      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d003      	beq.n	8003072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003072:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e06d      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b3a      	ldr	r3, [pc, #232]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e065      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003092:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f023 0203 	bic.w	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4933      	ldr	r1, [pc, #204]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fe fa0e 	bl	80014c4 <HAL_GetTick>
 80030a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	e00a      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ac:	f7fe fa0a 	bl	80014c4 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e04d      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b2a      	ldr	r3, [pc, #168]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 020c 	and.w	r2, r3, #12
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1eb      	bne.n	80030ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d20c      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b21      	ldr	r3, [pc, #132]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b1f      	ldr	r3, [pc, #124]	; (8003168 <HAL_RCC_ClockConfig+0x1b4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e030      	b.n	800315e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4915      	ldr	r1, [pc, #84]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	490d      	ldr	r1, [pc, #52]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313a:	f000 f81d 	bl	8003178 <HAL_RCC_GetSysClockFreq>
 800313e:	4601      	mov	r1, r0
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	5cd3      	ldrb	r3, [r2, r3]
 800314e:	fa21 f303 	lsr.w	r3, r1, r3
 8003152:	4a08      	ldr	r2, [pc, #32]	; (8003174 <HAL_RCC_ClockConfig+0x1c0>)
 8003154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd fd80 	bl	8000c5c <HAL_InitTick>

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023c00 	.word	0x40023c00
 800316c:	40023800 	.word	0x40023800
 8003170:	08007250 	.word	0x08007250
 8003174:	20000000 	.word	0x20000000

08003178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	607b      	str	r3, [r7, #4]
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800318e:	4b63      	ldr	r3, [pc, #396]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	2b04      	cmp	r3, #4
 8003198:	d007      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x32>
 800319a:	2b08      	cmp	r3, #8
 800319c:	d008      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x38>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80b4 	bne.w	800330c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031a4:	4b5e      	ldr	r3, [pc, #376]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031a6:	60bb      	str	r3, [r7, #8]
       break;
 80031a8:	e0b3      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80031ac:	60bb      	str	r3, [r7, #8]
      break;
 80031ae:	e0b0      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b0:	4b5a      	ldr	r3, [pc, #360]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ba:	4b58      	ldr	r3, [pc, #352]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d04a      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c6:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	099b      	lsrs	r3, r3, #6
 80031cc:	f04f 0400 	mov.w	r4, #0
 80031d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	ea03 0501 	and.w	r5, r3, r1
 80031dc:	ea04 0602 	and.w	r6, r4, r2
 80031e0:	4629      	mov	r1, r5
 80031e2:	4632      	mov	r2, r6
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	f04f 0400 	mov.w	r4, #0
 80031ec:	0154      	lsls	r4, r2, #5
 80031ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031f2:	014b      	lsls	r3, r1, #5
 80031f4:	4619      	mov	r1, r3
 80031f6:	4622      	mov	r2, r4
 80031f8:	1b49      	subs	r1, r1, r5
 80031fa:	eb62 0206 	sbc.w	r2, r2, r6
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f04f 0400 	mov.w	r4, #0
 8003206:	0194      	lsls	r4, r2, #6
 8003208:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800320c:	018b      	lsls	r3, r1, #6
 800320e:	1a5b      	subs	r3, r3, r1
 8003210:	eb64 0402 	sbc.w	r4, r4, r2
 8003214:	f04f 0100 	mov.w	r1, #0
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	00e2      	lsls	r2, r4, #3
 800321e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003222:	00d9      	lsls	r1, r3, #3
 8003224:	460b      	mov	r3, r1
 8003226:	4614      	mov	r4, r2
 8003228:	195b      	adds	r3, r3, r5
 800322a:	eb44 0406 	adc.w	r4, r4, r6
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	0262      	lsls	r2, r4, #9
 8003238:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800323c:	0259      	lsls	r1, r3, #9
 800323e:	460b      	mov	r3, r1
 8003240:	4614      	mov	r4, r2
 8003242:	4618      	mov	r0, r3
 8003244:	4621      	mov	r1, r4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	461a      	mov	r2, r3
 800324e:	4623      	mov	r3, r4
 8003250:	f7fc ffc6 	bl	80001e0 <__aeabi_uldivmod>
 8003254:	4603      	mov	r3, r0
 8003256:	460c      	mov	r4, r1
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	e049      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325c:	4b2f      	ldr	r3, [pc, #188]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	f04f 0400 	mov.w	r4, #0
 8003266:	f240 11ff 	movw	r1, #511	; 0x1ff
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	ea03 0501 	and.w	r5, r3, r1
 8003272:	ea04 0602 	and.w	r6, r4, r2
 8003276:	4629      	mov	r1, r5
 8003278:	4632      	mov	r2, r6
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	0154      	lsls	r4, r2, #5
 8003284:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003288:	014b      	lsls	r3, r1, #5
 800328a:	4619      	mov	r1, r3
 800328c:	4622      	mov	r2, r4
 800328e:	1b49      	subs	r1, r1, r5
 8003290:	eb62 0206 	sbc.w	r2, r2, r6
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	f04f 0400 	mov.w	r4, #0
 800329c:	0194      	lsls	r4, r2, #6
 800329e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	1a5b      	subs	r3, r3, r1
 80032a6:	eb64 0402 	sbc.w	r4, r4, r2
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	00e2      	lsls	r2, r4, #3
 80032b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032b8:	00d9      	lsls	r1, r3, #3
 80032ba:	460b      	mov	r3, r1
 80032bc:	4614      	mov	r4, r2
 80032be:	195b      	adds	r3, r3, r5
 80032c0:	eb44 0406 	adc.w	r4, r4, r6
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	02a2      	lsls	r2, r4, #10
 80032ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032d2:	0299      	lsls	r1, r3, #10
 80032d4:	460b      	mov	r3, r1
 80032d6:	4614      	mov	r4, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	4621      	mov	r1, r4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	461a      	mov	r2, r3
 80032e4:	4623      	mov	r3, r4
 80032e6:	f7fc ff7b 	bl	80001e0 <__aeabi_uldivmod>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	60bb      	str	r3, [r7, #8]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800330e:	60bb      	str	r3, [r7, #8]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	68bb      	ldr	r3, [r7, #8]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	00f42400 	.word	0x00f42400
 8003324:	007a1200 	.word	0x007a1200

08003328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_RCC_GetHCLKFreq+0x14>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000000 	.word	0x20000000

08003340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003344:	f7ff fff0 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003348:	4601      	mov	r1, r0
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	0a9b      	lsrs	r3, r3, #10
 8003350:	f003 0307 	and.w	r3, r3, #7
 8003354:	4a03      	ldr	r2, [pc, #12]	; (8003364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003356:	5cd3      	ldrb	r3, [r2, r3]
 8003358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40023800 	.word	0x40023800
 8003364:	08007260 	.word	0x08007260

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800336c:	f7ff ffdc 	bl	8003328 <HAL_RCC_GetHCLKFreq>
 8003370:	4601      	mov	r1, r0
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	0b5b      	lsrs	r3, r3, #13
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4a03      	ldr	r2, [pc, #12]	; (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003384:	4618      	mov	r0, r3
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40023800 	.word	0x40023800
 800338c:	08007260 	.word	0x08007260

08003390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	220f      	movs	r2, #15
 800339e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033a0:	4b12      	ldr	r3, [pc, #72]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033ac:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	08db      	lsrs	r3, r3, #3
 80033ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCC_GetClockConfig+0x60>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 020f 	and.w	r2, r3, #15
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	601a      	str	r2, [r3, #0]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40023c00 	.word	0x40023c00

080033f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e01d      	b.n	8003442 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f815 	bl	800344a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3304      	adds	r3, #4
 8003430:	4619      	mov	r1, r3
 8003432:	4610      	mov	r0, r2
 8003434:	f000 f968 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0201 	orr.w	r2, r2, #1
 8003474:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b06      	cmp	r3, #6
 8003486:	d007      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d122      	bne.n	8003502 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d11b      	bne.n	8003502 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0202 	mvn.w	r2, #2
 80034d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f8ee 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80034ee:	e005      	b.n	80034fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8e0 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8f1 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d122      	bne.n	8003556 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b04      	cmp	r3, #4
 800351c:	d11b      	bne.n	8003556 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f06f 0204 	mvn.w	r2, #4
 8003526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8c4 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003542:	e005      	b.n	8003550 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8b6 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8c7 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d122      	bne.n	80035aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b08      	cmp	r3, #8
 8003570:	d11b      	bne.n	80035aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f06f 0208 	mvn.w	r2, #8
 800357a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2204      	movs	r2, #4
 8003580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d003      	beq.n	8003598 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f89a 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 8003596:	e005      	b.n	80035a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f88c 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f89d 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d122      	bne.n	80035fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b10      	cmp	r3, #16
 80035c4:	d11b      	bne.n	80035fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f06f 0210 	mvn.w	r2, #16
 80035ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2208      	movs	r2, #8
 80035d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f870 	bl	80036ca <HAL_TIM_IC_CaptureCallback>
 80035ea:	e005      	b.n	80035f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f862 	bl	80036b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f873 	bl	80036de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10e      	bne.n	800362a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d107      	bne.n	800362a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f06f 0201 	mvn.w	r2, #1
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fd fa25 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003642:	2b80      	cmp	r3, #128	; 0x80
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f8e3 	bl	800381c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f838 	bl	80036f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d10e      	bne.n	80036ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d107      	bne.n	80036ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f06f 0220 	mvn.w	r2, #32
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8ad 	bl	8003808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a34      	ldr	r2, [pc, #208]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d00f      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d00b      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a31      	ldr	r2, [pc, #196]	; (80037f0 <TIM_Base_SetConfig+0xe8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a30      	ldr	r2, [pc, #192]	; (80037f4 <TIM_Base_SetConfig+0xec>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x38>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a2f      	ldr	r2, [pc, #188]	; (80037f8 <TIM_Base_SetConfig+0xf0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a25      	ldr	r2, [pc, #148]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d01b      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003760:	d017      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <TIM_Base_SetConfig+0xe8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <TIM_Base_SetConfig+0xec>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00f      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a20      	ldr	r2, [pc, #128]	; (80037f8 <TIM_Base_SetConfig+0xf0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00b      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1f      	ldr	r2, [pc, #124]	; (80037fc <TIM_Base_SetConfig+0xf4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d007      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a1e      	ldr	r2, [pc, #120]	; (8003800 <TIM_Base_SetConfig+0xf8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d003      	beq.n	8003792 <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <TIM_Base_SetConfig+0xfc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d108      	bne.n	80037a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a08      	ldr	r2, [pc, #32]	; (80037ec <TIM_Base_SetConfig+0xe4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d103      	bne.n	80037d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	615a      	str	r2, [r3, #20]
}
 80037de:	bf00      	nop
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800
 80037f8:	40000c00 	.word	0x40000c00
 80037fc:	40014000 	.word	0x40014000
 8003800:	40014400 	.word	0x40014400
 8003804:	40014800 	.word	0x40014800

08003808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e03f      	b.n	80038c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd f9b8 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f90b 	bl	8003a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af02      	add	r7, sp, #8
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	f040 8083 	bne.w	80039f2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UART_Transmit+0x2e>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e07b      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit+0x40>
 8003906:	2302      	movs	r3, #2
 8003908:	e074      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2221      	movs	r2, #33	; 0x21
 800391c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003920:	f7fd fdd0 	bl	80014c4 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003932:	e042      	b.n	80039ba <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800394a:	d122      	bne.n	8003992 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2200      	movs	r2, #0
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f850 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e046      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003978:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d103      	bne.n	800398a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3302      	adds	r3, #2
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	e017      	b.n	80039ba <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	3301      	adds	r3, #1
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	e013      	b.n	80039ba <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f82d 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e023      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	60ba      	str	r2, [r7, #8]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1b7      	bne.n	8003934 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	2140      	movs	r1, #64	; 0x40
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f814 	bl	80039fc <UART_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e00a      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	e02c      	b.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a14:	d028      	beq.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1c:	f7fd fd52 	bl	80014c4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d21d      	bcs.n	8003a68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e00f      	b.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	bf0c      	ite	eq
 8003a78:	2301      	moveq	r3, #1
 8003a7a:	2300      	movne	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	461a      	mov	r2, r3
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d0c3      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ad0:	f023 030c 	bic.w	r3, r3, #12
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	68f9      	ldr	r1, [r7, #12]
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afc:	f040 80e4 	bne.w	8003cc8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4aab      	ldr	r2, [pc, #684]	; (8003db4 <UART_SetConfig+0x324>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d004      	beq.n	8003b14 <UART_SetConfig+0x84>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4aaa      	ldr	r2, [pc, #680]	; (8003db8 <UART_SetConfig+0x328>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d16c      	bne.n	8003bee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003b14:	f7ff fc28 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	4aa3      	ldr	r2, [pc, #652]	; (8003dbc <UART_SetConfig+0x32c>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	011c      	lsls	r4, r3, #4
 8003b38:	f7ff fc16 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	fbb2 f5f3 	udiv	r5, r2, r3
 8003b52:	f7ff fc09 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003b56:	4602      	mov	r2, r0
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	4a93      	ldr	r2, [pc, #588]	; (8003dbc <UART_SetConfig+0x32c>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2264      	movs	r2, #100	; 0x64
 8003b76:	fb02 f303 	mul.w	r3, r2, r3
 8003b7a:	1aeb      	subs	r3, r5, r3
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	3332      	adds	r3, #50	; 0x32
 8003b80:	4a8e      	ldr	r2, [pc, #568]	; (8003dbc <UART_SetConfig+0x32c>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b8e:	441c      	add	r4, r3
 8003b90:	f7ff fbea 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009a      	lsls	r2, r3, #2
 8003b9e:	441a      	add	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003baa:	f7ff fbdd 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	441a      	add	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	4a7d      	ldr	r2, [pc, #500]	; (8003dbc <UART_SetConfig+0x32c>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	; 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1aeb      	subs	r3, r5, r3
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	3332      	adds	r3, #50	; 0x32
 8003bd8:	4a78      	ldr	r2, [pc, #480]	; (8003dbc <UART_SetConfig+0x32c>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 0207 	and.w	r2, r3, #7
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4422      	add	r2, r4
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	e154      	b.n	8003e98 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003bee:	f7ff fba7 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c08:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <UART_SetConfig+0x32c>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	011c      	lsls	r4, r3, #4
 8003c12:	f7ff fb95 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003c16:	4602      	mov	r2, r0
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c2c:	f7ff fb88 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009a      	lsls	r2, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <UART_SetConfig+0x32c>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2264      	movs	r2, #100	; 0x64
 8003c50:	fb02 f303 	mul.w	r3, r2, r3
 8003c54:	1aeb      	subs	r3, r5, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	; 0x32
 8003c5a:	4a58      	ldr	r2, [pc, #352]	; (8003dbc <UART_SetConfig+0x32c>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c68:	441c      	add	r4, r3
 8003c6a:	f7ff fb69 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	4613      	mov	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	009a      	lsls	r2, r3, #2
 8003c78:	441a      	add	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	fbb2 f5f3 	udiv	r5, r2, r3
 8003c84:	f7ff fb5c 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009a      	lsls	r2, r3, #2
 8003c92:	441a      	add	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4a47      	ldr	r2, [pc, #284]	; (8003dbc <UART_SetConfig+0x32c>)
 8003ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2264      	movs	r2, #100	; 0x64
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	1aeb      	subs	r3, r5, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a42      	ldr	r2, [pc, #264]	; (8003dbc <UART_SetConfig+0x32c>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	f003 0207 	and.w	r2, r3, #7
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4422      	add	r2, r4
 8003cc4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003cc6:	e0e7      	b.n	8003e98 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a39      	ldr	r2, [pc, #228]	; (8003db4 <UART_SetConfig+0x324>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <UART_SetConfig+0x24c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <UART_SetConfig+0x328>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d171      	bne.n	8003dc0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003cdc:	f7ff fb44 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009a      	lsls	r2, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf6:	4a31      	ldr	r2, [pc, #196]	; (8003dbc <UART_SetConfig+0x32c>)
 8003cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	011c      	lsls	r4, r3, #4
 8003d00:	f7ff fb32 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d1a:	f7ff fb25 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009a      	lsls	r2, r3, #2
 8003d28:	441a      	add	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <UART_SetConfig+0x32c>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	2264      	movs	r2, #100	; 0x64
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	1aeb      	subs	r3, r5, r3
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	3332      	adds	r3, #50	; 0x32
 8003d48:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <UART_SetConfig+0x32c>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d54:	441c      	add	r4, r3
 8003d56:	f7ff fb07 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	009a      	lsls	r2, r3, #2
 8003d64:	441a      	add	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fbb2 f5f3 	udiv	r5, r2, r3
 8003d70:	f7ff fafa 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4613      	mov	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009a      	lsls	r2, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <UART_SetConfig+0x32c>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2264      	movs	r2, #100	; 0x64
 8003d94:	fb02 f303 	mul.w	r3, r2, r3
 8003d98:	1aeb      	subs	r3, r5, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	3332      	adds	r3, #50	; 0x32
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <UART_SetConfig+0x32c>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4422      	add	r2, r4
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	e071      	b.n	8003e98 <UART_SetConfig+0x408>
 8003db4:	40011000 	.word	0x40011000
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003dc0:	f7ff fabe 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009a      	lsls	r2, r3, #2
 8003dce:	441a      	add	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <UART_SetConfig+0x410>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	011c      	lsls	r4, r3, #4
 8003de4:	f7ff faac 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	009a      	lsls	r2, r3, #2
 8003df2:	441a      	add	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	fbb2 f5f3 	udiv	r5, r2, r3
 8003dfe:	f7ff fa9f 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	009a      	lsls	r2, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <UART_SetConfig+0x410>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2264      	movs	r2, #100	; 0x64
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	1aeb      	subs	r3, r5, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <UART_SetConfig+0x410>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e38:	441c      	add	r4, r3
 8003e3a:	f7ff fa81 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	009a      	lsls	r2, r3, #2
 8003e48:	441a      	add	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e54:	f7ff fa74 	bl	8003340 <HAL_RCC_GetPCLK1Freq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009a      	lsls	r2, r3, #2
 8003e62:	441a      	add	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ea0 <UART_SetConfig+0x410>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2264      	movs	r2, #100	; 0x64
 8003e78:	fb02 f303 	mul.w	r3, r2, r3
 8003e7c:	1aeb      	subs	r3, r5, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a07      	ldr	r2, [pc, #28]	; (8003ea0 <UART_SetConfig+0x410>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4422      	add	r2, r4
 8003e94:	609a      	str	r2, [r3, #8]
}
 8003e96:	e7ff      	b.n	8003e98 <UART_SetConfig+0x408>
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea0:	51eb851f 	.word	0x51eb851f

08003ea4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eaa:	f3ef 8305 	mrs	r3, IPSR
 8003eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10f      	bne.n	8003ed6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eba:	607b      	str	r3, [r7, #4]
  return(result);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <osKernelInitialize+0x32>
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <osKernelInitialize+0x64>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d109      	bne.n	8003ede <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eca:	f3ef 8311 	mrs	r3, BASEPRI
 8003ece:	603b      	str	r3, [r7, #0]
  return(result);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003ed6:	f06f 0305 	mvn.w	r3, #5
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e00c      	b.n	8003ef8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ede:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <osKernelInitialize+0x64>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d105      	bne.n	8003ef2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <osKernelInitialize+0x64>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	e002      	b.n	8003ef8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	200000e4 	.word	0x200000e4

08003f0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f12:	f3ef 8305 	mrs	r3, IPSR
 8003f16:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	607b      	str	r3, [r7, #4]
  return(result);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <osKernelStart+0x32>
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <osKernelStart+0x64>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d109      	bne.n	8003f46 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f32:	f3ef 8311 	mrs	r3, BASEPRI
 8003f36:	603b      	str	r3, [r7, #0]
  return(result);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003f3e:	f06f 0305 	mvn.w	r3, #5
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	e00e      	b.n	8003f64 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <osKernelStart+0x64>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d107      	bne.n	8003f5e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <osKernelStart+0x64>)
 8003f50:	2202      	movs	r2, #2
 8003f52:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003f54:	f001 f86a 	bl	800502c <vTaskStartScheduler>
      stat = osOK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	e002      	b.n	8003f64 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003f64:	68fb      	ldr	r3, [r7, #12]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200000e4 	.word	0x200000e4

08003f74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b092      	sub	sp, #72	; 0x48
 8003f78:	af04      	add	r7, sp, #16
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f84:	f3ef 8305 	mrs	r3, IPSR
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 8094 	bne.w	80040ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f92:	f3ef 8310 	mrs	r3, PRIMASK
 8003f96:	623b      	str	r3, [r7, #32]
  return(result);
 8003f98:	6a3b      	ldr	r3, [r7, #32]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 808d 	bne.w	80040ba <osThreadNew+0x146>
 8003fa0:	4b48      	ldr	r3, [pc, #288]	; (80040c4 <osThreadNew+0x150>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d106      	bne.n	8003fb6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8003fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8082 	bne.w	80040ba <osThreadNew+0x146>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d07e      	beq.n	80040ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003fc0:	2318      	movs	r3, #24
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003fc8:	f107 031b 	add.w	r3, r7, #27
 8003fcc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003fce:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d045      	beq.n	8004066 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <osThreadNew+0x74>
        name = attr->name;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <osThreadNew+0x9a>
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	2b38      	cmp	r3, #56	; 0x38
 8004000:	d805      	bhi.n	800400e <osThreadNew+0x9a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <osThreadNew+0x9e>
        return (NULL);
 800400e:	2300      	movs	r3, #0
 8004010:	e054      	b.n	80040bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <osThreadNew+0xd4>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b5b      	cmp	r3, #91	; 0x5b
 8004030:	d90a      	bls.n	8004048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <osThreadNew+0xd4>
        mem = 1;
 8004042:	2301      	movs	r3, #1
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28
 8004046:	e010      	b.n	800406a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10c      	bne.n	800406a <osThreadNew+0xf6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d108      	bne.n	800406a <osThreadNew+0xf6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d104      	bne.n	800406a <osThreadNew+0xf6>
          mem = 0;
 8004060:	2300      	movs	r3, #0
 8004062:	62bb      	str	r3, [r7, #40]	; 0x28
 8004064:	e001      	b.n	800406a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004066:	2300      	movs	r3, #0
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b01      	cmp	r3, #1
 800406e:	d110      	bne.n	8004092 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004078:	9202      	str	r2, [sp, #8]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fe08 	bl	8004c9c <xTaskCreateStatic>
 800408c:	4603      	mov	r3, r0
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	e013      	b.n	80040ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d110      	bne.n	80040ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409a:	b29a      	uxth	r2, r3
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	9301      	str	r3, [sp, #4]
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fe4f 	bl	8004d4e <xTaskCreate>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d001      	beq.n	80040ba <osThreadNew+0x146>
          hTask = NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040ba:	697b      	ldr	r3, [r7, #20]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3738      	adds	r7, #56	; 0x38
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200000e4 	.word	0x200000e4

080040c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040d0:	f3ef 8305 	mrs	r3, IPSR
 80040d4:	613b      	str	r3, [r7, #16]
  return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040dc:	f3ef 8310 	mrs	r3, PRIMASK
 80040e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <osDelay+0x34>
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <osDelay+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d109      	bne.n	8004104 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040f0:	f3ef 8311 	mrs	r3, BASEPRI
 80040f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <osDelay+0x3c>
    stat = osErrorISR;
 80040fc:	f06f 0305 	mvn.w	r3, #5
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e007      	b.n	8004114 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <osDelay+0x4c>
      vTaskDelay(ticks);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 ff58 	bl	8004fc4 <vTaskDelay>
    }
  }

  return (stat);
 8004114:	697b      	ldr	r3, [r7, #20]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200000e4 	.word	0x200000e4

08004124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a07      	ldr	r2, [pc, #28]	; (8004150 <vApplicationGetIdleTaskMemory+0x2c>)
 8004134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4a06      	ldr	r2, [pc, #24]	; (8004154 <vApplicationGetIdleTaskMemory+0x30>)
 800413a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	601a      	str	r2, [r3, #0]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	200000e8 	.word	0x200000e8
 8004154:	20000144 	.word	0x20000144

08004158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <vApplicationGetTimerTaskMemory+0x2c>)
 8004168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4a06      	ldr	r2, [pc, #24]	; (8004188 <vApplicationGetTimerTaskMemory+0x30>)
 800416e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004176:	601a      	str	r2, [r3, #0]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	20000344 	.word	0x20000344
 8004188:	200003a0 	.word	0x200003a0

0800418c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f103 0208 	add.w	r2, r3, #8
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f04f 32ff 	mov.w	r2, #4294967295
 80041a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f103 0208 	add.w	r2, r3, #8
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f103 0208 	add.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d103      	bne.n	800424e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e00c      	b.n	8004268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3308      	adds	r3, #8
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e002      	b.n	800425c <vListInsert+0x2e>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	429a      	cmp	r2, r3
 8004266:	d2f6      	bcs.n	8004256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6892      	ldr	r2, [r2, #8]
 80042b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6852      	ldr	r2, [r2, #4]
 80042c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d103      	bne.n	80042d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	1e5a      	subs	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	e7fe      	b.n	800431a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800431c:	f001 ffd6 	bl	80062cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800432c:	fb01 f303 	mul.w	r3, r1, r3
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434c:	3b01      	subs	r3, #1
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	441a      	add	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	22ff      	movs	r2, #255	; 0xff
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	22ff      	movs	r2, #255	; 0xff
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d114      	bne.n	800439c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01a      	beq.n	80043b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3310      	adds	r3, #16
 800437e:	4618      	mov	r0, r3
 8004380:	f001 f8da 	bl	8005538 <xTaskRemoveFromEventList>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d012      	beq.n	80043b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800438a:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <xQueueGenericReset+0xcc>)
 800438c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	e009      	b.n	80043b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3310      	adds	r3, #16
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fef3 	bl	800418c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3324      	adds	r3, #36	; 0x24
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff feee 	bl	800418c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043b0:	f001 ffba 	bl	8006328 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043b4:	2301      	movs	r3, #1
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	e000ed04 	.word	0xe000ed04

080043c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b08e      	sub	sp, #56	; 0x38
 80043c8:	af02      	add	r7, sp, #8
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <xQueueGenericCreateStatic+0x28>
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ea:	e7fe      	b.n	80043ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <xQueueGenericCreateStatic+0x42>
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	e7fe      	b.n	8004404 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <xQueueGenericCreateStatic+0x4e>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <xQueueGenericCreateStatic+0x52>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <xQueueGenericCreateStatic+0x54>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <xQueueGenericCreateStatic+0x6c>
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	e7fe      	b.n	800442e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <xQueueGenericCreateStatic+0x78>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <xQueueGenericCreateStatic+0x7c>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <xQueueGenericCreateStatic+0x7e>
 8004440:	2300      	movs	r3, #0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d109      	bne.n	800445a <xQueueGenericCreateStatic+0x96>
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e7fe      	b.n	8004458 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800445a:	2350      	movs	r3, #80	; 0x50
 800445c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b50      	cmp	r3, #80	; 0x50
 8004462:	d009      	beq.n	8004478 <xQueueGenericCreateStatic+0xb4>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	61bb      	str	r3, [r7, #24]
 8004476:	e7fe      	b.n	8004476 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00d      	beq.n	800449e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800448a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	4613      	mov	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f805 	bl	80044a8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3730      	adds	r7, #48	; 0x30
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e002      	b.n	80044ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d6:	2101      	movs	r1, #1
 80044d8:	69b8      	ldr	r0, [r7, #24]
 80044da:	f7ff ff0b 	bl	80042f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	; 0x38
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044fe:	2300      	movs	r3, #0
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	2b00      	cmp	r3, #0
 800450a:	d109      	bne.n	8004520 <xQueueGenericSend+0x30>
 800450c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
 800451e:	e7fe      	b.n	800451e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <xQueueGenericSend+0x3e>
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <xQueueGenericSend+0x42>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <xQueueGenericSend+0x44>
 8004532:	2300      	movs	r3, #0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d109      	bne.n	800454c <xQueueGenericSend+0x5c>
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	e7fe      	b.n	800454a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d103      	bne.n	800455a <xQueueGenericSend+0x6a>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <xQueueGenericSend+0x6e>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <xQueueGenericSend+0x70>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d109      	bne.n	8004578 <xQueueGenericSend+0x88>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	e7fe      	b.n	8004576 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004578:	f001 f99a 	bl	80058b0 <xTaskGetSchedulerState>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <xQueueGenericSend+0x98>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <xQueueGenericSend+0x9c>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <xQueueGenericSend+0x9e>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d109      	bne.n	80045a6 <xQueueGenericSend+0xb6>
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e7fe      	b.n	80045a4 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045a6:	f001 fe91 	bl	80062cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <xQueueGenericSend+0xcc>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d129      	bne.n	8004610 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c2:	f000 f9ff 	bl	80049c4 <prvCopyDataToQueue>
 80045c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d010      	beq.n	80045f2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 ffaf 	bl	8005538 <xTaskRemoveFromEventList>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045e0:	4b3f      	ldr	r3, [pc, #252]	; (80046e0 <xQueueGenericSend+0x1f0>)
 80045e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	e00a      	b.n	8004608 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <xQueueGenericSend+0x1f0>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004608:	f001 fe8e 	bl	8006328 <vPortExitCritical>
				return pdPASS;
 800460c:	2301      	movs	r3, #1
 800460e:	e063      	b.n	80046d8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d103      	bne.n	800461e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004616:	f001 fe87 	bl	8006328 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800461a:	2300      	movs	r3, #0
 800461c:	e05c      	b.n	80046d8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	4618      	mov	r0, r3
 800462a:	f000 ffe7 	bl	80055fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462e:	2301      	movs	r3, #1
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004632:	f001 fe79 	bl	8006328 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004636:	f000 fd5d 	bl	80050f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800463a:	f001 fe47 	bl	80062cc <vPortEnterCritical>
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004644:	b25b      	sxtb	r3, r3
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d103      	bne.n	8004654 <xQueueGenericSend+0x164>
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <xQueueGenericSend+0x17a>
 8004662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800466a:	f001 fe5d 	bl	8006328 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466e:	1d3a      	adds	r2, r7, #4
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 ffd6 	bl	8005628 <xTaskCheckForTimeOut>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d124      	bne.n	80046cc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004682:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004684:	f000 fa96 	bl	8004bb4 <prvIsQueueFull>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d018      	beq.n	80046c0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	3310      	adds	r3, #16
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 ff00 	bl	800549c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800469c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469e:	f000 fa21 	bl	8004ae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046a2:	f000 fd35 	bl	8005110 <xTaskResumeAll>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f47f af7c 	bne.w	80045a6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046ae:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <xQueueGenericSend+0x1f0>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	e772      	b.n	80045a6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046c2:	f000 fa0f 	bl	8004ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c6:	f000 fd23 	bl	8005110 <xTaskResumeAll>
 80046ca:	e76c      	b.n	80045a6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ce:	f000 fa09 	bl	8004ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046d2:	f000 fd1d 	bl	8005110 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046d6:	2300      	movs	r3, #0
		}
	}
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3738      	adds	r7, #56	; 0x38
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <xQueueGenericSendFromISR+0x2c>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	e7fe      	b.n	800470e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <xQueueGenericSendFromISR+0x3a>
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <xQueueGenericSendFromISR+0x3e>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <xQueueGenericSendFromISR+0x40>
 8004722:	2300      	movs	r3, #0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <xQueueGenericSendFromISR+0x58>
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	623b      	str	r3, [r7, #32]
 800473a:	e7fe      	b.n	800473a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d103      	bne.n	800474a <xQueueGenericSendFromISR+0x66>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d101      	bne.n	800474e <xQueueGenericSendFromISR+0x6a>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <xQueueGenericSendFromISR+0x6c>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d109      	bne.n	8004768 <xQueueGenericSendFromISR+0x84>
 8004754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	e7fe      	b.n	8004766 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004768:	f001 fe8c 	bl	8006484 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800476c:	f3ef 8211 	mrs	r2, BASEPRI
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61ba      	str	r2, [r7, #24]
 8004782:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004784:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004790:	429a      	cmp	r2, r3
 8004792:	d302      	bcc.n	800479a <xQueueGenericSendFromISR+0xb6>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d12c      	bne.n	80047f4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047aa:	f000 f90b 	bl	80049c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d112      	bne.n	80047de <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d016      	beq.n	80047ee <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	3324      	adds	r3, #36	; 0x24
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 feb7 	bl	8005538 <xTaskRemoveFromEventList>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00e      	beq.n	80047ee <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e007      	b.n	80047ee <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047e2:	3301      	adds	r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	b25a      	sxtb	r2, r3
 80047e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047ee:	2301      	movs	r3, #1
 80047f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047f2:	e001      	b.n	80047f8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004804:	4618      	mov	r0, r3
 8004806:	3738      	adds	r7, #56	; 0x38
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	; 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <xQueueReceive+0x2e>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	623b      	str	r3, [r7, #32]
 8004838:	e7fe      	b.n	8004838 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d103      	bne.n	8004848 <xQueueReceive+0x3c>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <xQueueReceive+0x40>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <xQueueReceive+0x42>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <xQueueReceive+0x5a>
 8004852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e7fe      	b.n	8004864 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004866:	f001 f823 	bl	80058b0 <xTaskGetSchedulerState>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <xQueueReceive+0x6a>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <xQueueReceive+0x6e>
 8004876:	2301      	movs	r3, #1
 8004878:	e000      	b.n	800487c <xQueueReceive+0x70>
 800487a:	2300      	movs	r3, #0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <xQueueReceive+0x88>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	e7fe      	b.n	8004892 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004894:	f001 fd1a 	bl	80062cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01f      	beq.n	80048e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048a4:	68b9      	ldr	r1, [r7, #8]
 80048a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a8:	f000 f8f6 	bl	8004a98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	1e5a      	subs	r2, r3, #1
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00f      	beq.n	80048dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	3310      	adds	r3, #16
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fe39 	bl	8005538 <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048cc:	4b3c      	ldr	r3, [pc, #240]	; (80049c0 <xQueueReceive+0x1b4>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048dc:	f001 fd24 	bl	8006328 <vPortExitCritical>
				return pdPASS;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e069      	b.n	80049b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ea:	f001 fd1d 	bl	8006328 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e062      	b.n	80049b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048f8:	f107 0310 	add.w	r3, r7, #16
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fe7d 	bl	80055fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004906:	f001 fd0f 	bl	8006328 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490a:	f000 fbf3 	bl	80050f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800490e:	f001 fcdd 	bl	80062cc <vPortEnterCritical>
 8004912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004918:	b25b      	sxtb	r3, r3
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491e:	d103      	bne.n	8004928 <xQueueReceive+0x11c>
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492e:	b25b      	sxtb	r3, r3
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d103      	bne.n	800493e <xQueueReceive+0x132>
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800493e:	f001 fcf3 	bl	8006328 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	f107 0310 	add.w	r3, r7, #16
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fe6c 	bl	8005628 <xTaskCheckForTimeOut>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d123      	bne.n	800499e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004958:	f000 f916 	bl	8004b88 <prvIsQueueEmpty>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d017      	beq.n	8004992 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	3324      	adds	r3, #36	; 0x24
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd96 	bl	800549c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004972:	f000 f8b7 	bl	8004ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004976:	f000 fbcb 	bl	8005110 <xTaskResumeAll>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d189      	bne.n	8004894 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <xQueueReceive+0x1b4>)
 8004982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	e780      	b.n	8004894 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004994:	f000 f8a6 	bl	8004ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004998:	f000 fbba 	bl	8005110 <xTaskResumeAll>
 800499c:	e77a      	b.n	8004894 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800499e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a0:	f000 f8a0 	bl	8004ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a4:	f000 fbb4 	bl	8005110 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f000 f8ed 	bl	8004b88 <prvIsQueueEmpty>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f43f af6f 	beq.w	8004894 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3730      	adds	r7, #48	; 0x30
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d14d      	bne.n	8004a86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 ff7c 	bl	80058ec <xTaskPriorityDisinherit>
 80049f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	605a      	str	r2, [r3, #4]
 80049fc:	e043      	b.n	8004a86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d119      	bne.n	8004a38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6898      	ldr	r0, [r3, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	f001 ff76 	bl	8006900 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1c:	441a      	add	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d32b      	bcc.n	8004a86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	e026      	b.n	8004a86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68d8      	ldr	r0, [r3, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	461a      	mov	r2, r3
 8004a42:	68b9      	ldr	r1, [r7, #8]
 8004a44:	f001 ff5c 	bl	8006900 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	425b      	negs	r3, r3
 8004a52:	441a      	add	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d207      	bcs.n	8004a74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	441a      	add	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d105      	bne.n	8004a86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a8e:	697b      	ldr	r3, [r7, #20]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	441a      	add	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d303      	bcc.n	8004acc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68d9      	ldr	r1, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6838      	ldr	r0, [r7, #0]
 8004ad8:	f001 ff12 	bl	8006900 <memcpy>
	}
}
 8004adc:	bf00      	nop
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004aec:	f001 fbee 	bl	80062cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af8:	e011      	b.n	8004b1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3324      	adds	r3, #36	; 0x24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd16 	bl	8005538 <xTaskRemoveFromEventList>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b12:	f000 fde9 	bl	80056e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dce9      	bgt.n	8004afa <prvUnlockQueue+0x16>
 8004b26:	e000      	b.n	8004b2a <prvUnlockQueue+0x46>
					break;
 8004b28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	22ff      	movs	r2, #255	; 0xff
 8004b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b32:	f001 fbf9 	bl	8006328 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b36:	f001 fbc9 	bl	80062cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b42:	e011      	b.n	8004b68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d012      	beq.n	8004b72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3310      	adds	r3, #16
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fcf1 	bl	8005538 <xTaskRemoveFromEventList>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b5c:	f000 fdc4 	bl	80056e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b60:	7bbb      	ldrb	r3, [r7, #14]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	dce9      	bgt.n	8004b44 <prvUnlockQueue+0x60>
 8004b70:	e000      	b.n	8004b74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	22ff      	movs	r2, #255	; 0xff
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b7c:	f001 fbd4 	bl	8006328 <vPortExitCritical>
}
 8004b80:	bf00      	nop
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b90:	f001 fb9c 	bl	80062cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	e001      	b.n	8004ba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ba6:	f001 fbbf 	bl	8006328 <vPortExitCritical>

	return xReturn;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bbc:	f001 fb86 	bl	80062cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d102      	bne.n	8004bd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	e001      	b.n	8004bd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bd6:	f001 fba7 	bl	8006328 <vPortExitCritical>

	return xReturn;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e014      	b.n	8004c1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bf4:	4a0e      	ldr	r2, [pc, #56]	; (8004c30 <vQueueAddToRegistry+0x4c>)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c00:	490b      	ldr	r1, [pc, #44]	; (8004c30 <vQueueAddToRegistry+0x4c>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <vQueueAddToRegistry+0x4c>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c16:	e005      	b.n	8004c24 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b07      	cmp	r3, #7
 8004c22:	d9e7      	bls.n	8004bf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20008ee4 	.word	0x20008ee4

08004c34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c44:	f001 fb42 	bl	80062cc <vPortEnterCritical>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d103      	bne.n	8004c5e <vQueueWaitForMessageRestricted+0x2a>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d103      	bne.n	8004c74 <vQueueWaitForMessageRestricted+0x40>
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	f001 fb58 	bl	8006328 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3324      	adds	r3, #36	; 0x24
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fc2b 	bl	80054e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c8e:	6978      	ldr	r0, [r7, #20]
 8004c90:	f7ff ff28 	bl	8004ae4 <prvUnlockQueue>
	}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	; 0x38
 8004ca0:	af04      	add	r7, sp, #16
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d109      	bne.n	8004cc4 <xTaskCreateStatic+0x28>
 8004cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb4:	f383 8811 	msr	BASEPRI, r3
 8004cb8:	f3bf 8f6f 	isb	sy
 8004cbc:	f3bf 8f4f 	dsb	sy
 8004cc0:	623b      	str	r3, [r7, #32]
 8004cc2:	e7fe      	b.n	8004cc2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <xTaskCreateStatic+0x42>
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	e7fe      	b.n	8004cdc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cde:	235c      	movs	r3, #92	; 0x5c
 8004ce0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b5c      	cmp	r3, #92	; 0x5c
 8004ce6:	d009      	beq.n	8004cfc <xTaskCreateStatic+0x60>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e7fe      	b.n	8004cfa <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01e      	beq.n	8004d40 <xTaskCreateStatic+0xa4>
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	9302      	str	r3, [sp, #8]
 8004d22:	f107 0314 	add.w	r3, r7, #20
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f850 	bl	8004dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d3a:	f000 f8d3 	bl	8004ee4 <prvAddNewTaskToReadyList>
 8004d3e:	e001      	b.n	8004d44 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d44:	697b      	ldr	r3, [r7, #20]
	}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3728      	adds	r7, #40	; 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b08c      	sub	sp, #48	; 0x30
 8004d52:	af04      	add	r7, sp, #16
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f001 fbcc 	bl	8006500 <pvPortMalloc>
 8004d68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d70:	205c      	movs	r0, #92	; 0x5c
 8004d72:	f001 fbc5 	bl	8006500 <pvPortMalloc>
 8004d76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
 8004d84:	e005      	b.n	8004d92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d86:	6978      	ldr	r0, [r7, #20]
 8004d88:	f001 fc7c 	bl	8006684 <vPortFree>
 8004d8c:	e001      	b.n	8004d92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d017      	beq.n	8004dc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004da0:	88fa      	ldrh	r2, [r7, #6]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 f80e 	bl	8004dd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dbc:	69f8      	ldr	r0, [r7, #28]
 8004dbe:	f000 f891 	bl	8004ee4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61bb      	str	r3, [r7, #24]
 8004dc6:	e002      	b.n	8004dce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dce:	69bb      	ldr	r3, [r7, #24]
	}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	461a      	mov	r2, r3
 8004df0:	21a5      	movs	r1, #165	; 0xa5
 8004df2:	f001 fd90 	bl	8006916 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e00:	3b01      	subs	r3, #1
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	f023 0307 	bic.w	r3, r3, #7
 8004e0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <prvInitialiseNewTask+0x56>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e7fe      	b.n	8004e2c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e012      	b.n	8004e5a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	7819      	ldrb	r1, [r3, #0]
 8004e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	3334      	adds	r3, #52	; 0x34
 8004e44:	460a      	mov	r2, r1
 8004e46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	3301      	adds	r3, #1
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	2b0f      	cmp	r3, #15
 8004e5e:	d9e9      	bls.n	8004e34 <prvInitialiseNewTask+0x5c>
 8004e60:	e000      	b.n	8004e64 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004e62:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b37      	cmp	r3, #55	; 0x37
 8004e70:	d901      	bls.n	8004e76 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e72:	2337      	movs	r3, #55	; 0x37
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2200      	movs	r2, #0
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff f99d 	bl	80041cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e94:	3318      	adds	r3, #24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff f998 	bl	80041cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	69b8      	ldr	r0, [r7, #24]
 8004ec6:	f001 f8db 	bl	8006080 <pxPortInitialiseStack>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004edc:	bf00      	nop
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eec:	f001 f9ee 	bl	80062cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ef0:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4a2c      	ldr	r2, [pc, #176]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004ef8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f02:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <prvAddNewTaskToReadyList+0xc4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d110      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f10:	f000 fc0e 	bl	8005730 <prvInitialiseTaskLists>
 8004f14:	e00d      	b.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f16:	4b26      	ldr	r3, [pc, #152]	; (8004fb0 <prvAddNewTaskToReadyList+0xcc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d109      	bne.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f1e:	4b23      	ldr	r3, [pc, #140]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d802      	bhi.n	8004f32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f2c:	4a1f      	ldr	r2, [pc, #124]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <prvAddNewTaskToReadyList+0xd0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3301      	adds	r3, #1
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <prvAddNewTaskToReadyList+0xd0>)
 8004f3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <prvAddNewTaskToReadyList+0xd0>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4b1b      	ldr	r3, [pc, #108]	; (8004fb8 <prvAddNewTaskToReadyList+0xd4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d903      	bls.n	8004f58 <prvAddNewTaskToReadyList+0x74>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	4a18      	ldr	r2, [pc, #96]	; (8004fb8 <prvAddNewTaskToReadyList+0xd4>)
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <prvAddNewTaskToReadyList+0xd8>)
 8004f66:	441a      	add	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7ff f939 	bl	80041e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f74:	f001 f9d8 	bl	8006328 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <prvAddNewTaskToReadyList+0xcc>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f80:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <prvAddNewTaskToReadyList+0xc8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d207      	bcs.n	8004f9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <prvAddNewTaskToReadyList+0xdc>)
 8004f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	20000c74 	.word	0x20000c74
 8004fac:	200007a0 	.word	0x200007a0
 8004fb0:	20000c80 	.word	0x20000c80
 8004fb4:	20000c90 	.word	0x20000c90
 8004fb8:	20000c7c 	.word	0x20000c7c
 8004fbc:	200007a4 	.word	0x200007a4
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d016      	beq.n	8005004 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <vTaskDelay+0x60>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <vTaskDelay+0x2e>
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	e7fe      	b.n	8004ff0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004ff2:	f000 f87f 	bl	80050f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fce3 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ffe:	f000 f887 	bl	8005110 <xTaskResumeAll>
 8005002:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d107      	bne.n	800501a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <vTaskDelay+0x64>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000c9c 	.word	0x20000c9c
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800503a:	463a      	mov	r2, r7
 800503c:	1d39      	adds	r1, r7, #4
 800503e:	f107 0308 	add.w	r3, r7, #8
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff f86e 	bl	8004124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005048:	6839      	ldr	r1, [r7, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68ba      	ldr	r2, [r7, #8]
 800504e:	9202      	str	r2, [sp, #8]
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	2300      	movs	r3, #0
 8005058:	460a      	mov	r2, r1
 800505a:	4920      	ldr	r1, [pc, #128]	; (80050dc <vTaskStartScheduler+0xb0>)
 800505c:	4820      	ldr	r0, [pc, #128]	; (80050e0 <vTaskStartScheduler+0xb4>)
 800505e:	f7ff fe1d 	bl	8004c9c <xTaskCreateStatic>
 8005062:	4602      	mov	r2, r0
 8005064:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <vTaskStartScheduler+0xb8>)
 8005066:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005068:	4b1e      	ldr	r3, [pc, #120]	; (80050e4 <vTaskStartScheduler+0xb8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d002      	beq.n	8005076 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005070:	2301      	movs	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	e001      	b.n	800507a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d102      	bne.n	8005086 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005080:	f000 fcf4 	bl	8005a6c <xTimerCreateTimerTask>
 8005084:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d115      	bne.n	80050b8 <vTaskStartScheduler+0x8c>
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <vTaskStartScheduler+0xbc>)
 80050a0:	f04f 32ff 	mov.w	r2, #4294967295
 80050a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <vTaskStartScheduler+0xc0>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <vTaskStartScheduler+0xc4>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050b2:	f001 f86d 	bl	8006190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050b6:	e00d      	b.n	80050d4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050be:	d109      	bne.n	80050d4 <vTaskStartScheduler+0xa8>
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e7fe      	b.n	80050d2 <vTaskStartScheduler+0xa6>
}
 80050d4:	bf00      	nop
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08007238 	.word	0x08007238
 80050e0:	08005701 	.word	0x08005701
 80050e4:	20000c98 	.word	0x20000c98
 80050e8:	20000c94 	.word	0x20000c94
 80050ec:	20000c80 	.word	0x20000c80
 80050f0:	20000c78 	.word	0x20000c78

080050f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <vTaskSuspendAll+0x18>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3301      	adds	r3, #1
 80050fe:	4a03      	ldr	r2, [pc, #12]	; (800510c <vTaskSuspendAll+0x18>)
 8005100:	6013      	str	r3, [r2, #0]
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	20000c9c 	.word	0x20000c9c

08005110 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800511e:	4b41      	ldr	r3, [pc, #260]	; (8005224 <xTaskResumeAll+0x114>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d109      	bne.n	800513a <xTaskResumeAll+0x2a>
 8005126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	e7fe      	b.n	8005138 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800513a:	f001 f8c7 	bl	80062cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <xTaskResumeAll+0x114>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3b01      	subs	r3, #1
 8005144:	4a37      	ldr	r2, [pc, #220]	; (8005224 <xTaskResumeAll+0x114>)
 8005146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005148:	4b36      	ldr	r3, [pc, #216]	; (8005224 <xTaskResumeAll+0x114>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d162      	bne.n	8005216 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005150:	4b35      	ldr	r3, [pc, #212]	; (8005228 <xTaskResumeAll+0x118>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d05e      	beq.n	8005216 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005158:	e02f      	b.n	80051ba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800515a:	4b34      	ldr	r3, [pc, #208]	; (800522c <xTaskResumeAll+0x11c>)
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3318      	adds	r3, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff f89a 	bl	80042a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3304      	adds	r3, #4
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff f895 	bl	80042a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <xTaskResumeAll+0x120>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <xTaskResumeAll+0x7a>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <xTaskResumeAll+0x120>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a27      	ldr	r2, [pc, #156]	; (8005234 <xTaskResumeAll+0x124>)
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7ff f820 	bl	80041e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051aa:	4b23      	ldr	r3, [pc, #140]	; (8005238 <xTaskResumeAll+0x128>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d302      	bcc.n	80051ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <xTaskResumeAll+0x12c>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ba:	4b1c      	ldr	r3, [pc, #112]	; (800522c <xTaskResumeAll+0x11c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1cb      	bne.n	800515a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051c8:	f000 fb4c 	bl	8005864 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051cc:	4b1c      	ldr	r3, [pc, #112]	; (8005240 <xTaskResumeAll+0x130>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051d8:	f000 f846 	bl	8005268 <xTaskIncrementTick>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051e2:	4b16      	ldr	r3, [pc, #88]	; (800523c <xTaskResumeAll+0x12c>)
 80051e4:	2201      	movs	r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f1      	bne.n	80051d8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80051f4:	4b12      	ldr	r3, [pc, #72]	; (8005240 <xTaskResumeAll+0x130>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <xTaskResumeAll+0x12c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005202:	2301      	movs	r3, #1
 8005204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005206:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <xTaskResumeAll+0x134>)
 8005208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005216:	f001 f887 	bl	8006328 <vPortExitCritical>

	return xAlreadyYielded;
 800521a:	68bb      	ldr	r3, [r7, #8]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000c9c 	.word	0x20000c9c
 8005228:	20000c74 	.word	0x20000c74
 800522c:	20000c34 	.word	0x20000c34
 8005230:	20000c7c 	.word	0x20000c7c
 8005234:	200007a4 	.word	0x200007a4
 8005238:	200007a0 	.word	0x200007a0
 800523c:	20000c88 	.word	0x20000c88
 8005240:	20000c84 	.word	0x20000c84
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <xTaskGetTickCount+0x1c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005254:	687b      	ldr	r3, [r7, #4]
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000c78 	.word	0x20000c78

08005268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800526e:	2300      	movs	r3, #0
 8005270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005272:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <xTaskIncrementTick+0x150>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 808d 	bne.w	8005396 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <xTaskIncrementTick+0x154>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005284:	4a4d      	ldr	r2, [pc, #308]	; (80053bc <xTaskIncrementTick+0x154>)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d11f      	bne.n	80052d0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005290:	4b4b      	ldr	r3, [pc, #300]	; (80053c0 <xTaskIncrementTick+0x158>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d009      	beq.n	80052ae <xTaskIncrementTick+0x46>
 800529a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	e7fe      	b.n	80052ac <xTaskIncrementTick+0x44>
 80052ae:	4b44      	ldr	r3, [pc, #272]	; (80053c0 <xTaskIncrementTick+0x158>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	4b43      	ldr	r3, [pc, #268]	; (80053c4 <xTaskIncrementTick+0x15c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a41      	ldr	r2, [pc, #260]	; (80053c0 <xTaskIncrementTick+0x158>)
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4a41      	ldr	r2, [pc, #260]	; (80053c4 <xTaskIncrementTick+0x15c>)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b41      	ldr	r3, [pc, #260]	; (80053c8 <xTaskIncrementTick+0x160>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	4a3f      	ldr	r2, [pc, #252]	; (80053c8 <xTaskIncrementTick+0x160>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	f000 faca 	bl	8005864 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052d0:	4b3e      	ldr	r3, [pc, #248]	; (80053cc <xTaskIncrementTick+0x164>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d34e      	bcc.n	8005378 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052da:	4b39      	ldr	r3, [pc, #228]	; (80053c0 <xTaskIncrementTick+0x158>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <xTaskIncrementTick+0x80>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <xTaskIncrementTick+0x82>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ee:	4b37      	ldr	r3, [pc, #220]	; (80053cc <xTaskIncrementTick+0x164>)
 80052f0:	f04f 32ff 	mov.w	r2, #4294967295
 80052f4:	601a      	str	r2, [r3, #0]
					break;
 80052f6:	e03f      	b.n	8005378 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80052f8:	4b31      	ldr	r3, [pc, #196]	; (80053c0 <xTaskIncrementTick+0x158>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d203      	bcs.n	8005318 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005310:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <xTaskIncrementTick+0x164>)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6013      	str	r3, [r2, #0]
						break;
 8005316:	e02f      	b.n	8005378 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3304      	adds	r3, #4
 800531c:	4618      	mov	r0, r3
 800531e:	f7fe ffbf 	bl	80042a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	3318      	adds	r3, #24
 800532e:	4618      	mov	r0, r3
 8005330:	f7fe ffb6 	bl	80042a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4b25      	ldr	r3, [pc, #148]	; (80053d0 <xTaskIncrementTick+0x168>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <xTaskIncrementTick+0xe0>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a22      	ldr	r2, [pc, #136]	; (80053d0 <xTaskIncrementTick+0x168>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <xTaskIncrementTick+0x16c>)
 8005356:	441a      	add	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe ff41 	bl	80041e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005368:	4b1b      	ldr	r3, [pc, #108]	; (80053d8 <xTaskIncrementTick+0x170>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	429a      	cmp	r2, r3
 8005370:	d3b3      	bcc.n	80052da <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005376:	e7b0      	b.n	80052da <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <xTaskIncrementTick+0x170>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4915      	ldr	r1, [pc, #84]	; (80053d4 <xTaskIncrementTick+0x16c>)
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	440b      	add	r3, r1
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d907      	bls.n	80053a0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8005390:	2301      	movs	r3, #1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	e004      	b.n	80053a0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <xTaskIncrementTick+0x174>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3301      	adds	r3, #1
 800539c:	4a0f      	ldr	r2, [pc, #60]	; (80053dc <xTaskIncrementTick+0x174>)
 800539e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <xTaskIncrementTick+0x178>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80053a8:	2301      	movs	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053ac:	697b      	ldr	r3, [r7, #20]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000c9c 	.word	0x20000c9c
 80053bc:	20000c78 	.word	0x20000c78
 80053c0:	20000c2c 	.word	0x20000c2c
 80053c4:	20000c30 	.word	0x20000c30
 80053c8:	20000c8c 	.word	0x20000c8c
 80053cc:	20000c94 	.word	0x20000c94
 80053d0:	20000c7c 	.word	0x20000c7c
 80053d4:	200007a4 	.word	0x200007a4
 80053d8:	200007a0 	.word	0x200007a0
 80053dc:	20000c84 	.word	0x20000c84
 80053e0:	20000c88 	.word	0x20000c88

080053e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ea:	4b27      	ldr	r3, [pc, #156]	; (8005488 <vTaskSwitchContext+0xa4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <vTaskSwitchContext+0xa8>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053f8:	e040      	b.n	800547c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <vTaskSwitchContext+0xa8>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005400:	4b23      	ldr	r3, [pc, #140]	; (8005490 <vTaskSwitchContext+0xac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	e00f      	b.n	8005428 <vTaskSwitchContext+0x44>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d109      	bne.n	8005422 <vTaskSwitchContext+0x3e>
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	e7fe      	b.n	8005420 <vTaskSwitchContext+0x3c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3b01      	subs	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	491a      	ldr	r1, [pc, #104]	; (8005494 <vTaskSwitchContext+0xb0>)
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0e5      	beq.n	8005408 <vTaskSwitchContext+0x24>
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4a13      	ldr	r2, [pc, #76]	; (8005494 <vTaskSwitchContext+0xb0>)
 8005448:	4413      	add	r3, r2
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3308      	adds	r3, #8
 800545e:	429a      	cmp	r2, r3
 8005460:	d104      	bne.n	800546c <vTaskSwitchContext+0x88>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	605a      	str	r2, [r3, #4]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <vTaskSwitchContext+0xb4>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4a06      	ldr	r2, [pc, #24]	; (8005490 <vTaskSwitchContext+0xac>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6013      	str	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	20000c9c 	.word	0x20000c9c
 800548c:	20000c88 	.word	0x20000c88
 8005490:	20000c7c 	.word	0x20000c7c
 8005494:	200007a4 	.word	0x200007a4
 8005498:	200007a0 	.word	0x200007a0

0800549c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <vTaskPlaceOnEventList+0x24>
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	e7fe      	b.n	80054be <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c0:	4b07      	ldr	r3, [pc, #28]	; (80054e0 <vTaskPlaceOnEventList+0x44>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3318      	adds	r3, #24
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f7fe feb0 	bl	800422e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ce:	2101      	movs	r1, #1
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f000 fa77 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
}
 80054d6:	bf00      	nop
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200007a0 	.word	0x200007a0

080054e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <vTaskPlaceOnEventListRestricted+0x26>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e7fe      	b.n	8005508 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800550a:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <vTaskPlaceOnEventListRestricted+0x50>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3318      	adds	r3, #24
 8005510:	4619      	mov	r1, r3
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f7fe fe67 	bl	80041e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
 8005522:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	68b8      	ldr	r0, [r7, #8]
 8005528:	f000 fa4c 	bl	80059c4 <prvAddCurrentTaskToDelayedList>
	}
 800552c:	bf00      	nop
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	200007a0 	.word	0x200007a0

08005538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d109      	bne.n	8005562 <xTaskRemoveFromEventList+0x2a>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e7fe      	b.n	8005560 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3318      	adds	r3, #24
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fe9a 	bl	80042a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <xTaskRemoveFromEventList+0xac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11d      	bne.n	80055b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fe91 	bl	80042a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <xTaskRemoveFromEventList+0xb0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d903      	bls.n	8005592 <xTaskRemoveFromEventList+0x5a>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <xTaskRemoveFromEventList+0xb0>)
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <xTaskRemoveFromEventList+0xb4>)
 80055a0:	441a      	add	r2, r3
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	3304      	adds	r3, #4
 80055a6:	4619      	mov	r1, r3
 80055a8:	4610      	mov	r0, r2
 80055aa:	f7fe fe1c 	bl	80041e6 <vListInsertEnd>
 80055ae:	e005      	b.n	80055bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3318      	adds	r3, #24
 80055b4:	4619      	mov	r1, r3
 80055b6:	480e      	ldr	r0, [pc, #56]	; (80055f0 <xTaskRemoveFromEventList+0xb8>)
 80055b8:	f7fe fe15 	bl	80041e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c0:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <xTaskRemoveFromEventList+0xbc>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d905      	bls.n	80055d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ca:	2301      	movs	r3, #1
 80055cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <xTaskRemoveFromEventList+0xc0>)
 80055d0:	2201      	movs	r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e001      	b.n	80055da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055da:	697b      	ldr	r3, [r7, #20]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000c9c 	.word	0x20000c9c
 80055e8:	20000c7c 	.word	0x20000c7c
 80055ec:	200007a4 	.word	0x200007a4
 80055f0:	20000c34 	.word	0x20000c34
 80055f4:	200007a0 	.word	0x200007a0
 80055f8:	20000c88 	.word	0x20000c88

080055fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <vTaskInternalSetTimeOutState+0x24>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <vTaskInternalSetTimeOutState+0x28>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20000c8c 	.word	0x20000c8c
 8005624:	20000c78 	.word	0x20000c78

08005628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <xTaskCheckForTimeOut+0x24>
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	e7fe      	b.n	800564a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <xTaskCheckForTimeOut+0x3e>
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e7fe      	b.n	8005664 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005666:	f000 fe31 	bl	80062cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <xTaskCheckForTimeOut+0xb8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d102      	bne.n	800568a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	e023      	b.n	80056d2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b15      	ldr	r3, [pc, #84]	; (80056e4 <xTaskCheckForTimeOut+0xbc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d007      	beq.n	80056a6 <xTaskCheckForTimeOut+0x7e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	e015      	b.n	80056d2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d20b      	bcs.n	80056c8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	1ad2      	subs	r2, r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff ff9d 	bl	80055fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	e004      	b.n	80056d2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056d2:	f000 fe29 	bl	8006328 <vPortExitCritical>

	return xReturn;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000c78 	.word	0x20000c78
 80056e4:	20000c8c 	.word	0x20000c8c

080056e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056ec:	4b03      	ldr	r3, [pc, #12]	; (80056fc <vTaskMissedYield+0x14>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000c88 	.word	0x20000c88

08005700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005708:	f000 f852 	bl	80057b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <prvIdleTask+0x28>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d9f9      	bls.n	8005708 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005714:	4b05      	ldr	r3, [pc, #20]	; (800572c <prvIdleTask+0x2c>)
 8005716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005724:	e7f0      	b.n	8005708 <prvIdleTask+0x8>
 8005726:	bf00      	nop
 8005728:	200007a4 	.word	0x200007a4
 800572c:	e000ed04 	.word	0xe000ed04

08005730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005736:	2300      	movs	r3, #0
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	e00c      	b.n	8005756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <prvInitialiseTaskLists+0x60>)
 8005748:	4413      	add	r3, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fd1e 	bl	800418c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	3301      	adds	r3, #1
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b37      	cmp	r3, #55	; 0x37
 800575a:	d9ef      	bls.n	800573c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800575c:	480d      	ldr	r0, [pc, #52]	; (8005794 <prvInitialiseTaskLists+0x64>)
 800575e:	f7fe fd15 	bl	800418c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005762:	480d      	ldr	r0, [pc, #52]	; (8005798 <prvInitialiseTaskLists+0x68>)
 8005764:	f7fe fd12 	bl	800418c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005768:	480c      	ldr	r0, [pc, #48]	; (800579c <prvInitialiseTaskLists+0x6c>)
 800576a:	f7fe fd0f 	bl	800418c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800576e:	480c      	ldr	r0, [pc, #48]	; (80057a0 <prvInitialiseTaskLists+0x70>)
 8005770:	f7fe fd0c 	bl	800418c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005774:	480b      	ldr	r0, [pc, #44]	; (80057a4 <prvInitialiseTaskLists+0x74>)
 8005776:	f7fe fd09 	bl	800418c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <prvInitialiseTaskLists+0x78>)
 800577c:	4a05      	ldr	r2, [pc, #20]	; (8005794 <prvInitialiseTaskLists+0x64>)
 800577e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005780:	4b0a      	ldr	r3, [pc, #40]	; (80057ac <prvInitialiseTaskLists+0x7c>)
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <prvInitialiseTaskLists+0x68>)
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200007a4 	.word	0x200007a4
 8005794:	20000c04 	.word	0x20000c04
 8005798:	20000c18 	.word	0x20000c18
 800579c:	20000c34 	.word	0x20000c34
 80057a0:	20000c48 	.word	0x20000c48
 80057a4:	20000c60 	.word	0x20000c60
 80057a8:	20000c2c 	.word	0x20000c2c
 80057ac:	20000c30 	.word	0x20000c30

080057b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057b6:	e019      	b.n	80057ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b8:	f000 fd88 	bl	80062cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <prvCheckTasksWaitingTermination+0x4c>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fe fd69 	bl	80042a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057ce:	4b0c      	ldr	r3, [pc, #48]	; (8005800 <prvCheckTasksWaitingTermination+0x50>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <prvCheckTasksWaitingTermination+0x50>)
 80057d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <prvCheckTasksWaitingTermination+0x54>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3b01      	subs	r3, #1
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <prvCheckTasksWaitingTermination+0x54>)
 80057e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057e2:	f000 fda1 	bl	8006328 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f80e 	bl	8005808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <prvCheckTasksWaitingTermination+0x54>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e1      	bne.n	80057b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000c48 	.word	0x20000c48
 8005800:	20000c74 	.word	0x20000c74
 8005804:	20000c5c 	.word	0x20000c5c

08005808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005816:	2b00      	cmp	r3, #0
 8005818:	d108      	bne.n	800582c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ff30 	bl	8006684 <vPortFree>
				vPortFree( pxTCB );
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 ff2d 	bl	8006684 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800582a:	e017      	b.n	800585c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005832:	2b01      	cmp	r3, #1
 8005834:	d103      	bne.n	800583e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 ff24 	bl	8006684 <vPortFree>
	}
 800583c:	e00e      	b.n	800585c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005844:	2b02      	cmp	r3, #2
 8005846:	d009      	beq.n	800585c <prvDeleteTCB+0x54>
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	e7fe      	b.n	800585a <prvDeleteTCB+0x52>
	}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <prvResetNextTaskUnblockTime+0x44>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <prvResetNextTaskUnblockTime+0x14>
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <prvResetNextTaskUnblockTime+0x16>
 8005878:	2300      	movs	r3, #0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <prvResetNextTaskUnblockTime+0x48>)
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005886:	e008      	b.n	800589a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005888:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <prvResetNextTaskUnblockTime+0x44>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	4a05      	ldr	r2, [pc, #20]	; (80058ac <prvResetNextTaskUnblockTime+0x48>)
 8005898:	6013      	str	r3, [r2, #0]
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20000c2c 	.word	0x20000c2c
 80058ac:	20000c94 	.word	0x20000c94

080058b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <xTaskGetSchedulerState+0x34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058be:	2301      	movs	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e008      	b.n	80058d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c4:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <xTaskGetSchedulerState+0x38>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058cc:	2302      	movs	r3, #2
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	e001      	b.n	80058d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058d6:	687b      	ldr	r3, [r7, #4]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	20000c80 	.word	0x20000c80
 80058e8:	20000c9c 	.word	0x20000c9c

080058ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d054      	beq.n	80059ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005902:	4b2d      	ldr	r3, [pc, #180]	; (80059b8 <xTaskPriorityDisinherit+0xcc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d009      	beq.n	8005920 <xTaskPriorityDisinherit+0x34>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e7fe      	b.n	800591e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005924:	2b00      	cmp	r3, #0
 8005926:	d109      	bne.n	800593c <xTaskPriorityDisinherit+0x50>
 8005928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	e7fe      	b.n	800593a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005940:	1e5a      	subs	r2, r3, #1
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	429a      	cmp	r2, r3
 8005950:	d02c      	beq.n	80059ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005956:	2b00      	cmp	r3, #0
 8005958:	d128      	bne.n	80059ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3304      	adds	r3, #4
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fc9e 	bl	80042a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005970:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <xTaskPriorityDisinherit+0xd0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <xTaskPriorityDisinherit+0xa0>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	4a0c      	ldr	r2, [pc, #48]	; (80059bc <xTaskPriorityDisinherit+0xd0>)
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <xTaskPriorityDisinherit+0xd4>)
 800599a:	441a      	add	r2, r3
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	4610      	mov	r0, r2
 80059a4:	f7fe fc1f 	bl	80041e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059ac:	697b      	ldr	r3, [r7, #20]
	}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	200007a0 	.word	0x200007a0
 80059bc:	20000c7c 	.word	0x20000c7c
 80059c0:	200007a4 	.word	0x200007a4

080059c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059ce:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <prvAddCurrentTaskToDelayedList+0x90>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059d4:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fc60 	bl	80042a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d10a      	bne.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059ee:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4819      	ldr	r0, [pc, #100]	; (8005a5c <prvAddCurrentTaskToDelayedList+0x98>)
 80059f8:	f7fe fbf5 	bl	80041e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059fc:	e026      	b.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4413      	add	r3, r2
 8005a04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d209      	bcs.n	8005a2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a16:	4b12      	ldr	r3, [pc, #72]	; (8005a60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	4619      	mov	r1, r3
 8005a22:	4610      	mov	r0, r2
 8005a24:	f7fe fc03 	bl	800422e <vListInsert>
}
 8005a28:	e010      	b.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a2a:	4b0e      	ldr	r3, [pc, #56]	; (8005a64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b0a      	ldr	r3, [pc, #40]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f7fe fbf9 	bl	800422e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d202      	bcs.n	8005a4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6013      	str	r3, [r2, #0]
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	20000c78 	.word	0x20000c78
 8005a58:	200007a0 	.word	0x200007a0
 8005a5c:	20000c60 	.word	0x20000c60
 8005a60:	20000c30 	.word	0x20000c30
 8005a64:	20000c2c 	.word	0x20000c2c
 8005a68:	20000c94 	.word	0x20000c94

08005a6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a76:	f000 fac3 	bl	8006000 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	; (8005aec <xTimerCreateTimerTask+0x80>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d021      	beq.n	8005ac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a8a:	1d3a      	adds	r2, r7, #4
 8005a8c:	f107 0108 	add.w	r1, r7, #8
 8005a90:	f107 030c 	add.w	r3, r7, #12
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fb5f 	bl	8004158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	9202      	str	r2, [sp, #8]
 8005aa2:	9301      	str	r3, [sp, #4]
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	460a      	mov	r2, r1
 8005aac:	4910      	ldr	r1, [pc, #64]	; (8005af0 <xTimerCreateTimerTask+0x84>)
 8005aae:	4811      	ldr	r0, [pc, #68]	; (8005af4 <xTimerCreateTimerTask+0x88>)
 8005ab0:	f7ff f8f4 	bl	8004c9c <xTaskCreateStatic>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <xTimerCreateTimerTask+0x8c>)
 8005ab8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <xTimerCreateTimerTask+0x8c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d001      	beq.n	8005ac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <xTimerCreateTimerTask+0x74>
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	e7fe      	b.n	8005ade <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005ae0:	697b      	ldr	r3, [r7, #20]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	20000cd0 	.word	0x20000cd0
 8005af0:	08007240 	.word	0x08007240
 8005af4:	08005c15 	.word	0x08005c15
 8005af8:	20000cd4 	.word	0x20000cd4

08005afc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d109      	bne.n	8005b28 <xTimerGenericCommand+0x2c>
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	e7fe      	b.n	8005b26 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b28:	4b19      	ldr	r3, [pc, #100]	; (8005b90 <xTimerGenericCommand+0x94>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d02a      	beq.n	8005b86 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	dc18      	bgt.n	8005b74 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b42:	f7ff feb5 	bl	80058b0 <xTaskGetSchedulerState>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d109      	bne.n	8005b60 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b4c:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <xTimerGenericCommand+0x94>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	f107 0110 	add.w	r1, r7, #16
 8005b54:	2300      	movs	r3, #0
 8005b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b58:	f7fe fcca 	bl	80044f0 <xQueueGenericSend>
 8005b5c:	6278      	str	r0, [r7, #36]	; 0x24
 8005b5e:	e012      	b.n	8005b86 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <xTimerGenericCommand+0x94>)
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	f107 0110 	add.w	r1, r7, #16
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f7fe fcc0 	bl	80044f0 <xQueueGenericSend>
 8005b70:	6278      	str	r0, [r7, #36]	; 0x24
 8005b72:	e008      	b.n	8005b86 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b74:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <xTimerGenericCommand+0x94>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	f107 0110 	add.w	r1, r7, #16
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	f7fe fdb0 	bl	80046e4 <xQueueGenericSendFromISR>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3728      	adds	r7, #40	; 0x28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000cd0 	.word	0x20000cd0

08005b94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <prvProcessExpiredTimer+0x7c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe fb77 	bl	80042a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d121      	bne.n	8005bfe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	18d1      	adds	r1, r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	6978      	ldr	r0, [r7, #20]
 8005bc8:	f000 f8c8 	bl	8005d5c <prvInsertTimerInActiveList>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d015      	beq.n	8005bfe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	2100      	movs	r1, #0
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f7ff ff8d 	bl	8005afc <xTimerGenericCommand>
 8005be2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <prvProcessExpiredTimer+0x6a>
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	e7fe      	b.n	8005bfc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	6978      	ldr	r0, [r7, #20]
 8005c04:	4798      	blx	r3
}
 8005c06:	bf00      	nop
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000cc8 	.word	0x20000cc8

08005c14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c1c:	f107 0308 	add.w	r3, r7, #8
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f857 	bl	8005cd4 <prvGetNextExpireTime>
 8005c26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f803 	bl	8005c38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c32:	f000 f8d5 	bl	8005de0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c36:	e7f1      	b.n	8005c1c <prvTimerTask+0x8>

08005c38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c42:	f7ff fa57 	bl	80050f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f866 	bl	8005d1c <prvSampleTimeNow>
 8005c50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d130      	bne.n	8005cba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <prvProcessTimerOrBlockTask+0x3c>
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d806      	bhi.n	8005c74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c66:	f7ff fa53 	bl	8005110 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c6a:	68f9      	ldr	r1, [r7, #12]
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7ff ff91 	bl	8005b94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c72:	e024      	b.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c7a:	4b13      	ldr	r3, [pc, #76]	; (8005cc8 <prvProcessTimerOrBlockTask+0x90>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c8c:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <prvProcessTimerOrBlockTask+0x94>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fe ffcb 	bl	8004c34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c9e:	f7ff fa37 	bl	8005110 <xTaskResumeAll>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <prvProcessTimerOrBlockTask+0x98>)
 8005caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	f3bf 8f6f 	isb	sy
}
 8005cb8:	e001      	b.n	8005cbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cba:	f7ff fa29 	bl	8005110 <xTaskResumeAll>
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	20000ccc 	.word	0x20000ccc
 8005ccc:	20000cd0 	.word	0x20000cd0
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cdc:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <prvGetNextExpireTime+0x44>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	bf0c      	ite	eq
 8005ce6:	2301      	moveq	r3, #1
 8005ce8:	2300      	movne	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d105      	bne.n	8005d06 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005cfa:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <prvGetNextExpireTime+0x44>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e001      	b.n	8005d0a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000cc8 	.word	0x20000cc8

08005d1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d24:	f7ff fa90 	bl	8005248 <xTaskGetTickCount>
 8005d28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <prvSampleTimeNow+0x3c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d205      	bcs.n	8005d40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d34:	f000 f904 	bl	8005f40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e002      	b.n	8005d46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d46:	4a04      	ldr	r2, [pc, #16]	; (8005d58 <prvSampleTimeNow+0x3c>)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000cd8 	.word	0x20000cd8

08005d5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d812      	bhi.n	8005da8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d302      	bcc.n	8005d96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e01b      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <prvInsertTimerInActiveList+0x7c>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fe fa44 	bl	800422e <vListInsert>
 8005da6:	e012      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d206      	bcs.n	8005dbe <prvInsertTimerInActiveList+0x62>
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	617b      	str	r3, [r7, #20]
 8005dbc:	e007      	b.n	8005dce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dbe:	4b07      	ldr	r3, [pc, #28]	; (8005ddc <prvInsertTimerInActiveList+0x80>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4610      	mov	r0, r2
 8005dca:	f7fe fa30 	bl	800422e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dce:	697b      	ldr	r3, [r7, #20]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000ccc 	.word	0x20000ccc
 8005ddc:	20000cc8 	.word	0x20000cc8

08005de0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08e      	sub	sp, #56	; 0x38
 8005de4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005de6:	e099      	b.n	8005f1c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da17      	bge.n	8005e1e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	3304      	adds	r3, #4
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <prvProcessReceivedCommands+0x2e>
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	e7fe      	b.n	8005e0c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e14:	6850      	ldr	r0, [r2, #4]
 8005e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e18:	6892      	ldr	r2, [r2, #8]
 8005e1a:	4611      	mov	r1, r2
 8005e1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	db7a      	blt.n	8005f1a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d004      	beq.n	8005e3a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe fa33 	bl	80042a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff ff6d 	bl	8005d1c <prvSampleTimeNow>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b09      	cmp	r3, #9
 8005e48:	d868      	bhi.n	8005f1c <prvProcessReceivedCommands+0x13c>
 8005e4a:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <prvProcessReceivedCommands+0x70>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e79 	.word	0x08005e79
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e79 	.word	0x08005e79
 8005e5c:	08005f1d 	.word	0x08005f1d
 8005e60:	08005ed3 	.word	0x08005ed3
 8005e64:	08005f09 	.word	0x08005f09
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e79 	.word	0x08005e79
 8005e70:	08005f1d 	.word	0x08005f1d
 8005e74:	08005ed3 	.word	0x08005ed3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	18d1      	adds	r1, r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e86:	f7ff ff69 	bl	8005d5c <prvInsertTimerInActiveList>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d045      	beq.n	8005f1c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d13d      	bne.n	8005f1c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	441a      	add	r2, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	2300      	movs	r3, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eb2:	f7ff fe23 	bl	8005afc <xTimerGenericCommand>
 8005eb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d12e      	bne.n	8005f1c <prvProcessReceivedCommands+0x13c>
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	61bb      	str	r3, [r7, #24]
 8005ed0:	e7fe      	b.n	8005ed0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <prvProcessReceivedCommands+0x114>
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	e7fe      	b.n	8005ef2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	18d1      	adds	r1, r2, r3
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f02:	f7ff ff2b 	bl	8005d5c <prvInsertTimerInActiveList>
					break;
 8005f06:	e009      	b.n	8005f1c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f14:	f000 fbb6 	bl	8006684 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f18:	e000      	b.n	8005f1c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f1a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f1c:	4b07      	ldr	r3, [pc, #28]	; (8005f3c <prvProcessReceivedCommands+0x15c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	1d39      	adds	r1, r7, #4
 8005f22:	2200      	movs	r2, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe fc71 	bl	800480c <xQueueReceive>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f47f af5b 	bne.w	8005de8 <prvProcessReceivedCommands+0x8>
	}
}
 8005f32:	bf00      	nop
 8005f34:	3730      	adds	r7, #48	; 0x30
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000cd0 	.word	0x20000cd0

08005f40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f46:	e044      	b.n	8005fd2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f52:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fe f99d 	bl	80042a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d12d      	bne.n	8005fd2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d90e      	bls.n	8005fa6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe f945 	bl	800422e <vListInsert>
 8005fa4:	e015      	b.n	8005fd2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f7ff fda3 	bl	8005afc <xTimerGenericCommand>
 8005fb6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <prvSwitchTimerLists+0x92>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	e7fe      	b.n	8005fd0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1b5      	bne.n	8005f48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fdc:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a04      	ldr	r2, [pc, #16]	; (8005ff8 <prvSwitchTimerLists+0xb8>)
 8005fe8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fea:	4a04      	ldr	r2, [pc, #16]	; (8005ffc <prvSwitchTimerLists+0xbc>)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6013      	str	r3, [r2, #0]
}
 8005ff0:	bf00      	nop
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000cc8 	.word	0x20000cc8
 8005ffc:	20000ccc 	.word	0x20000ccc

08006000 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006006:	f000 f961 	bl	80062cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800600a:	4b15      	ldr	r3, [pc, #84]	; (8006060 <prvCheckForValidListAndQueue+0x60>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d120      	bne.n	8006054 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006012:	4814      	ldr	r0, [pc, #80]	; (8006064 <prvCheckForValidListAndQueue+0x64>)
 8006014:	f7fe f8ba 	bl	800418c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006018:	4813      	ldr	r0, [pc, #76]	; (8006068 <prvCheckForValidListAndQueue+0x68>)
 800601a:	f7fe f8b7 	bl	800418c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <prvCheckForValidListAndQueue+0x6c>)
 8006020:	4a10      	ldr	r2, [pc, #64]	; (8006064 <prvCheckForValidListAndQueue+0x64>)
 8006022:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006024:	4b12      	ldr	r3, [pc, #72]	; (8006070 <prvCheckForValidListAndQueue+0x70>)
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <prvCheckForValidListAndQueue+0x68>)
 8006028:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800602a:	2300      	movs	r3, #0
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	4b11      	ldr	r3, [pc, #68]	; (8006074 <prvCheckForValidListAndQueue+0x74>)
 8006030:	4a11      	ldr	r2, [pc, #68]	; (8006078 <prvCheckForValidListAndQueue+0x78>)
 8006032:	2110      	movs	r1, #16
 8006034:	200a      	movs	r0, #10
 8006036:	f7fe f9c5 	bl	80043c4 <xQueueGenericCreateStatic>
 800603a:	4602      	mov	r2, r0
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <prvCheckForValidListAndQueue+0x60>)
 800603e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <prvCheckForValidListAndQueue+0x60>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006048:	4b05      	ldr	r3, [pc, #20]	; (8006060 <prvCheckForValidListAndQueue+0x60>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	490b      	ldr	r1, [pc, #44]	; (800607c <prvCheckForValidListAndQueue+0x7c>)
 800604e:	4618      	mov	r0, r3
 8006050:	f7fe fdc8 	bl	8004be4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006054:	f000 f968 	bl	8006328 <vPortExitCritical>
}
 8006058:	bf00      	nop
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000cd0 	.word	0x20000cd0
 8006064:	20000ca0 	.word	0x20000ca0
 8006068:	20000cb4 	.word	0x20000cb4
 800606c:	20000cc8 	.word	0x20000cc8
 8006070:	20000ccc 	.word	0x20000ccc
 8006074:	20000d7c 	.word	0x20000d7c
 8006078:	20000cdc 	.word	0x20000cdc
 800607c:	08007248 	.word	0x08007248

08006080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3b04      	subs	r3, #4
 8006090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b04      	subs	r3, #4
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b04      	subs	r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060b0:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <pxPortInitialiseStack+0x64>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3b14      	subs	r3, #20
 80060ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f06f 0202 	mvn.w	r2, #2
 80060ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3b20      	subs	r3, #32
 80060d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060d6:	68fb      	ldr	r3, [r7, #12]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	080060e9 	.word	0x080060e9

080060e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060f2:	4b11      	ldr	r3, [pc, #68]	; (8006138 <prvTaskExitError+0x50>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d009      	beq.n	8006110 <prvTaskExitError+0x28>
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e7fe      	b.n	800610e <prvTaskExitError+0x26>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006122:	bf00      	nop
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0fc      	beq.n	8006124 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000040 	.word	0x20000040
 800613c:	00000000 	.word	0x00000000

08006140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <pxCurrentTCBConst2>)
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	6808      	ldr	r0, [r1, #0]
 8006146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	f380 8809 	msr	PSP, r0
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	4770      	bx	lr
 800615c:	f3af 8000 	nop.w

08006160 <pxCurrentTCBConst2>:
 8006160:	200007a0 	.word	0x200007a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006168:	4808      	ldr	r0, [pc, #32]	; (800618c <prvPortStartFirstTask+0x24>)
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f380 8808 	msr	MSP, r0
 8006172:	f04f 0000 	mov.w	r0, #0
 8006176:	f380 8814 	msr	CONTROL, r0
 800617a:	b662      	cpsie	i
 800617c:	b661      	cpsie	f
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	df00      	svc	0
 8006188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800618a:	bf00      	nop
 800618c:	e000ed08 	.word	0xe000ed08

08006190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006196:	4b44      	ldr	r3, [pc, #272]	; (80062a8 <xPortStartScheduler+0x118>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a44      	ldr	r2, [pc, #272]	; (80062ac <xPortStartScheduler+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d109      	bne.n	80061b4 <xPortStartScheduler+0x24>
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e7fe      	b.n	80061b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061b4:	4b3c      	ldr	r3, [pc, #240]	; (80062a8 <xPortStartScheduler+0x118>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a3d      	ldr	r2, [pc, #244]	; (80062b0 <xPortStartScheduler+0x120>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d109      	bne.n	80061d2 <xPortStartScheduler+0x42>
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e7fe      	b.n	80061d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061d2:	4b38      	ldr	r3, [pc, #224]	; (80062b4 <xPortStartScheduler+0x124>)
 80061d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	22ff      	movs	r2, #255	; 0xff
 80061e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4b30      	ldr	r3, [pc, #192]	; (80062b8 <xPortStartScheduler+0x128>)
 80061f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061fa:	4b30      	ldr	r3, [pc, #192]	; (80062bc <xPortStartScheduler+0x12c>)
 80061fc:	2207      	movs	r2, #7
 80061fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006200:	e009      	b.n	8006216 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006202:	4b2e      	ldr	r3, [pc, #184]	; (80062bc <xPortStartScheduler+0x12c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3b01      	subs	r3, #1
 8006208:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <xPortStartScheduler+0x12c>)
 800620a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	b2db      	uxtb	r3, r3
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	b2db      	uxtb	r3, r3
 8006214:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d0ef      	beq.n	8006202 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006222:	4b26      	ldr	r3, [pc, #152]	; (80062bc <xPortStartScheduler+0x12c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1c3 0307 	rsb	r3, r3, #7
 800622a:	2b04      	cmp	r3, #4
 800622c:	d009      	beq.n	8006242 <xPortStartScheduler+0xb2>
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	e7fe      	b.n	8006240 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006242:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <xPortStartScheduler+0x12c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	4a1c      	ldr	r2, [pc, #112]	; (80062bc <xPortStartScheduler+0x12c>)
 800624a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <xPortStartScheduler+0x12c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006254:	4a19      	ldr	r2, [pc, #100]	; (80062bc <xPortStartScheduler+0x12c>)
 8006256:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006260:	4b17      	ldr	r3, [pc, #92]	; (80062c0 <xPortStartScheduler+0x130>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <xPortStartScheduler+0x130>)
 8006266:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800626a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800626c:	4b14      	ldr	r3, [pc, #80]	; (80062c0 <xPortStartScheduler+0x130>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <xPortStartScheduler+0x130>)
 8006272:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006276:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006278:	f000 f8d6 	bl	8006428 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800627c:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <xPortStartScheduler+0x134>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006282:	f000 f8f5 	bl	8006470 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006286:	4b10      	ldr	r3, [pc, #64]	; (80062c8 <xPortStartScheduler+0x138>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <xPortStartScheduler+0x138>)
 800628c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006290:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006292:	f7ff ff69 	bl	8006168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006296:	f7ff f8a5 	bl	80053e4 <vTaskSwitchContext>
	prvTaskExitError();
 800629a:	f7ff ff25 	bl	80060e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	e000ed00 	.word	0xe000ed00
 80062ac:	410fc271 	.word	0x410fc271
 80062b0:	410fc270 	.word	0x410fc270
 80062b4:	e000e400 	.word	0xe000e400
 80062b8:	20000dcc 	.word	0x20000dcc
 80062bc:	20000dd0 	.word	0x20000dd0
 80062c0:	e000ed20 	.word	0xe000ed20
 80062c4:	20000040 	.word	0x20000040
 80062c8:	e000ef34 	.word	0xe000ef34

080062cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <vPortEnterCritical+0x54>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <vPortEnterCritical+0x54>)
 80062ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <vPortEnterCritical+0x54>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d10e      	bne.n	8006314 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f6:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <vPortEnterCritical+0x58>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <vPortEnterCritical+0x48>
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	e7fe      	b.n	8006312 <vPortEnterCritical+0x46>
	}
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000040 	.word	0x20000040
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <vPortExitCritical+0x4c>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <vPortExitCritical+0x22>
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e7fe      	b.n	8006348 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortExitCritical+0x4c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3b01      	subs	r3, #1
 8006350:	4a08      	ldr	r2, [pc, #32]	; (8006374 <vPortExitCritical+0x4c>)
 8006352:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <vPortExitCritical+0x4c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d104      	bne.n	8006366 <vPortExitCritical+0x3e>
 800635c:	2300      	movs	r3, #0
 800635e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000040 	.word	0x20000040
	...

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b15      	ldr	r3, [pc, #84]	; (80063e0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f01e 0f10 	tst.w	lr, #16
 8006390:	bf08      	it	eq
 8006392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063a4:	f380 8811 	msr	BASEPRI, r0
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f7ff f818 	bl	80053e4 <vTaskSwitchContext>
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f380 8811 	msr	BASEPRI, r0
 80063bc:	bc09      	pop	{r0, r3}
 80063be:	6819      	ldr	r1, [r3, #0]
 80063c0:	6808      	ldr	r0, [r1, #0]
 80063c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c6:	f01e 0f10 	tst.w	lr, #16
 80063ca:	bf08      	it	eq
 80063cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063d0:	f380 8809 	msr	PSP, r0
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	f3af 8000 	nop.w

080063e0 <pxCurrentTCBConst>:
 80063e0:	200007a0 	.word	0x200007a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006400:	f7fe ff32 	bl	8005268 <xTaskIncrementTick>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <SysTick_Handler+0x3c>)
 800640c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006410:	601a      	str	r2, [r3, #0]
 8006412:	2300      	movs	r3, #0
 8006414:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800641c:	bf00      	nop
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800642c:	4b0b      	ldr	r3, [pc, #44]	; (800645c <vPortSetupTimerInterrupt+0x34>)
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortSetupTimerInterrupt+0x38>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <vPortSetupTimerInterrupt+0x3c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <vPortSetupTimerInterrupt+0x40>)
 800643e:	fba2 2303 	umull	r2, r3, r2, r3
 8006442:	099b      	lsrs	r3, r3, #6
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <vPortSetupTimerInterrupt+0x44>)
 8006446:	3b01      	subs	r3, #1
 8006448:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644a:	4b04      	ldr	r3, [pc, #16]	; (800645c <vPortSetupTimerInterrupt+0x34>)
 800644c:	2207      	movs	r2, #7
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	e000e010 	.word	0xe000e010
 8006460:	e000e018 	.word	0xe000e018
 8006464:	20000000 	.word	0x20000000
 8006468:	10624dd3 	.word	0x10624dd3
 800646c:	e000e014 	.word	0xe000e014

08006470 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006470:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006480 <vPortEnableVFP+0x10>
 8006474:	6801      	ldr	r1, [r0, #0]
 8006476:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800647a:	6001      	str	r1, [r0, #0]
 800647c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800647e:	bf00      	nop
 8006480:	e000ed88 	.word	0xe000ed88

08006484 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648a:	f3ef 8305 	mrs	r3, IPSR
 800648e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d913      	bls.n	80064be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006496:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <vPortValidateInterruptPriority+0x6c>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064a0:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <vPortValidateInterruptPriority+0x70>)
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	7afa      	ldrb	r2, [r7, #11]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d209      	bcs.n	80064be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	607b      	str	r3, [r7, #4]
 80064bc:	e7fe      	b.n	80064bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064be:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <vPortValidateInterruptPriority+0x74>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064c6:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <vPortValidateInterruptPriority+0x78>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d909      	bls.n	80064e2 <vPortValidateInterruptPriority+0x5e>
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	e7fe      	b.n	80064e0 <vPortValidateInterruptPriority+0x5c>
	}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	e000e3f0 	.word	0xe000e3f0
 80064f4:	20000dcc 	.word	0x20000dcc
 80064f8:	e000ed0c 	.word	0xe000ed0c
 80064fc:	20000dd0 	.word	0x20000dd0

08006500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08a      	sub	sp, #40	; 0x28
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800650c:	f7fe fdf2 	bl	80050f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006510:	4b57      	ldr	r3, [pc, #348]	; (8006670 <pvPortMalloc+0x170>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006518:	f000 f90c 	bl	8006734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800651c:	4b55      	ldr	r3, [pc, #340]	; (8006674 <pvPortMalloc+0x174>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4013      	ands	r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 808c 	bne.w	8006642 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01c      	beq.n	800656a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006530:	2208      	movs	r2, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b00      	cmp	r3, #0
 8006540:	d013      	beq.n	800656a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f023 0307 	bic.w	r3, r3, #7
 8006548:	3308      	adds	r3, #8
 800654a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	2b00      	cmp	r3, #0
 8006554:	d009      	beq.n	800656a <pvPortMalloc+0x6a>
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e7fe      	b.n	8006568 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d068      	beq.n	8006642 <pvPortMalloc+0x142>
 8006570:	4b41      	ldr	r3, [pc, #260]	; (8006678 <pvPortMalloc+0x178>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d863      	bhi.n	8006642 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800657a:	4b40      	ldr	r3, [pc, #256]	; (800667c <pvPortMalloc+0x17c>)
 800657c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800657e:	4b3f      	ldr	r3, [pc, #252]	; (800667c <pvPortMalloc+0x17c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	e004      	b.n	8006590 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <pvPortMalloc+0xa2>
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f1      	bne.n	8006586 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065a2:	4b33      	ldr	r3, [pc, #204]	; (8006670 <pvPortMalloc+0x170>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d04a      	beq.n	8006642 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	4413      	add	r3, r2
 80065b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	2308      	movs	r3, #8
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d91e      	bls.n	800660c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <pvPortMalloc+0xf4>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e7fe      	b.n	80065f2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006606:	69b8      	ldr	r0, [r7, #24]
 8006608:	f000 f8f6 	bl	80067f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800660c:	4b1a      	ldr	r3, [pc, #104]	; (8006678 <pvPortMalloc+0x178>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	4a18      	ldr	r2, [pc, #96]	; (8006678 <pvPortMalloc+0x178>)
 8006618:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800661a:	4b17      	ldr	r3, [pc, #92]	; (8006678 <pvPortMalloc+0x178>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b18      	ldr	r3, [pc, #96]	; (8006680 <pvPortMalloc+0x180>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	429a      	cmp	r2, r3
 8006624:	d203      	bcs.n	800662e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <pvPortMalloc+0x178>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a15      	ldr	r2, [pc, #84]	; (8006680 <pvPortMalloc+0x180>)
 800662c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	4b10      	ldr	r3, [pc, #64]	; (8006674 <pvPortMalloc+0x174>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	431a      	orrs	r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006642:	f7fe fd65 	bl	8005110 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <pvPortMalloc+0x164>
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e7fe      	b.n	8006662 <pvPortMalloc+0x162>
	return pvReturn;
 8006664:	69fb      	ldr	r3, [r7, #28]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3728      	adds	r7, #40	; 0x28
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20008ddc 	.word	0x20008ddc
 8006674:	20008de8 	.word	0x20008de8
 8006678:	20008de0 	.word	0x20008de0
 800667c:	20008dd4 	.word	0x20008dd4
 8006680:	20008de4 	.word	0x20008de4

08006684 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d046      	beq.n	8006724 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006696:	2308      	movs	r3, #8
 8006698:	425b      	negs	r3, r3
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4413      	add	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	4b20      	ldr	r3, [pc, #128]	; (800672c <vPortFree+0xa8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <vPortFree+0x42>
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e7fe      	b.n	80066c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <vPortFree+0x5e>
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
 80066e0:	e7fe      	b.n	80066e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <vPortFree+0xa8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d019      	beq.n	8006724 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d115      	bne.n	8006724 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <vPortFree+0xa8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006708:	f7fe fcf4 	bl	80050f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <vPortFree+0xac>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4413      	add	r3, r2
 8006716:	4a06      	ldr	r2, [pc, #24]	; (8006730 <vPortFree+0xac>)
 8006718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800671a:	6938      	ldr	r0, [r7, #16]
 800671c:	f000 f86c 	bl	80067f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006720:	f7fe fcf6 	bl	8005110 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006724:	bf00      	nop
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20008de8 	.word	0x20008de8
 8006730:	20008de0 	.word	0x20008de0

08006734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800673a:	f647 73fd 	movw	r3, #32765	; 0x7ffd
 800673e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006740:	4b27      	ldr	r3, [pc, #156]	; (80067e0 <prvHeapInit+0xac>)
 8006742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00c      	beq.n	8006768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3307      	adds	r3, #7
 8006752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <prvHeapInit+0xac>)
 8006764:	4413      	add	r3, r2
 8006766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800676c:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <prvHeapInit+0xb0>)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006772:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <prvHeapInit+0xb0>)
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	4413      	add	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006780:	2208      	movs	r2, #8
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	1a9b      	subs	r3, r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a15      	ldr	r2, [pc, #84]	; (80067e8 <prvHeapInit+0xb4>)
 8006794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <prvHeapInit+0xb4>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2200      	movs	r2, #0
 800679c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800679e:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <prvHeapInit+0xb4>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	1ad2      	subs	r2, r2, r3
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <prvHeapInit+0xb4>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <prvHeapInit+0xb8>)
 80067c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <prvHeapInit+0xbc>)
 80067ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067cc:	4b09      	ldr	r3, [pc, #36]	; (80067f4 <prvHeapInit+0xc0>)
 80067ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067d2:	601a      	str	r2, [r3, #0]
}
 80067d4:	bf00      	nop
 80067d6:	3714      	adds	r7, #20
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	20000dd4 	.word	0x20000dd4
 80067e4:	20008dd4 	.word	0x20008dd4
 80067e8:	20008ddc 	.word	0x20008ddc
 80067ec:	20008de4 	.word	0x20008de4
 80067f0:	20008de0 	.word	0x20008de0
 80067f4:	20008de8 	.word	0x20008de8

080067f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <prvInsertBlockIntoFreeList+0xac>)
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <prvInsertBlockIntoFreeList+0x14>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	429a      	cmp	r2, r3
 8006814:	d8f7      	bhi.n	8006806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	4413      	add	r3, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d108      	bne.n	800683a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	441a      	add	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	441a      	add	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d118      	bne.n	8006880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d00d      	beq.n	8006876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	441a      	add	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	e008      	b.n	8006888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e003      	b.n	8006888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d002      	beq.n	8006896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006896:	bf00      	nop
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	20008dd4 	.word	0x20008dd4
 80068a8:	20008ddc 	.word	0x20008ddc

080068ac <__errno>:
 80068ac:	4b01      	ldr	r3, [pc, #4]	; (80068b4 <__errno+0x8>)
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	20000044 	.word	0x20000044

080068b8 <__libc_init_array>:
 80068b8:	b570      	push	{r4, r5, r6, lr}
 80068ba:	4e0d      	ldr	r6, [pc, #52]	; (80068f0 <__libc_init_array+0x38>)
 80068bc:	4c0d      	ldr	r4, [pc, #52]	; (80068f4 <__libc_init_array+0x3c>)
 80068be:	1ba4      	subs	r4, r4, r6
 80068c0:	10a4      	asrs	r4, r4, #2
 80068c2:	2500      	movs	r5, #0
 80068c4:	42a5      	cmp	r5, r4
 80068c6:	d109      	bne.n	80068dc <__libc_init_array+0x24>
 80068c8:	4e0b      	ldr	r6, [pc, #44]	; (80068f8 <__libc_init_array+0x40>)
 80068ca:	4c0c      	ldr	r4, [pc, #48]	; (80068fc <__libc_init_array+0x44>)
 80068cc:	f000 fc94 	bl	80071f8 <_init>
 80068d0:	1ba4      	subs	r4, r4, r6
 80068d2:	10a4      	asrs	r4, r4, #2
 80068d4:	2500      	movs	r5, #0
 80068d6:	42a5      	cmp	r5, r4
 80068d8:	d105      	bne.n	80068e6 <__libc_init_array+0x2e>
 80068da:	bd70      	pop	{r4, r5, r6, pc}
 80068dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068e0:	4798      	blx	r3
 80068e2:	3501      	adds	r5, #1
 80068e4:	e7ee      	b.n	80068c4 <__libc_init_array+0xc>
 80068e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068ea:	4798      	blx	r3
 80068ec:	3501      	adds	r5, #1
 80068ee:	e7f2      	b.n	80068d6 <__libc_init_array+0x1e>
 80068f0:	080072d4 	.word	0x080072d4
 80068f4:	080072d4 	.word	0x080072d4
 80068f8:	080072d4 	.word	0x080072d4
 80068fc:	080072d8 	.word	0x080072d8

08006900 <memcpy>:
 8006900:	b510      	push	{r4, lr}
 8006902:	1e43      	subs	r3, r0, #1
 8006904:	440a      	add	r2, r1
 8006906:	4291      	cmp	r1, r2
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	bd10      	pop	{r4, pc}
 800690c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006910:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006914:	e7f7      	b.n	8006906 <memcpy+0x6>

08006916 <memset>:
 8006916:	4402      	add	r2, r0
 8006918:	4603      	mov	r3, r0
 800691a:	4293      	cmp	r3, r2
 800691c:	d100      	bne.n	8006920 <memset+0xa>
 800691e:	4770      	bx	lr
 8006920:	f803 1b01 	strb.w	r1, [r3], #1
 8006924:	e7f9      	b.n	800691a <memset+0x4>
	...

08006928 <_puts_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	460e      	mov	r6, r1
 800692c:	4605      	mov	r5, r0
 800692e:	b118      	cbz	r0, 8006938 <_puts_r+0x10>
 8006930:	6983      	ldr	r3, [r0, #24]
 8006932:	b90b      	cbnz	r3, 8006938 <_puts_r+0x10>
 8006934:	f000 fa0c 	bl	8006d50 <__sinit>
 8006938:	69ab      	ldr	r3, [r5, #24]
 800693a:	68ac      	ldr	r4, [r5, #8]
 800693c:	b913      	cbnz	r3, 8006944 <_puts_r+0x1c>
 800693e:	4628      	mov	r0, r5
 8006940:	f000 fa06 	bl	8006d50 <__sinit>
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <_puts_r+0xac>)
 8006946:	429c      	cmp	r4, r3
 8006948:	d117      	bne.n	800697a <_puts_r+0x52>
 800694a:	686c      	ldr	r4, [r5, #4]
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	071b      	lsls	r3, r3, #28
 8006950:	d51d      	bpl.n	800698e <_puts_r+0x66>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	b1db      	cbz	r3, 800698e <_puts_r+0x66>
 8006956:	3e01      	subs	r6, #1
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800695e:	3b01      	subs	r3, #1
 8006960:	60a3      	str	r3, [r4, #8]
 8006962:	b9e9      	cbnz	r1, 80069a0 <_puts_r+0x78>
 8006964:	2b00      	cmp	r3, #0
 8006966:	da2e      	bge.n	80069c6 <_puts_r+0x9e>
 8006968:	4622      	mov	r2, r4
 800696a:	210a      	movs	r1, #10
 800696c:	4628      	mov	r0, r5
 800696e:	f000 f83f 	bl	80069f0 <__swbuf_r>
 8006972:	3001      	adds	r0, #1
 8006974:	d011      	beq.n	800699a <_puts_r+0x72>
 8006976:	200a      	movs	r0, #10
 8006978:	e011      	b.n	800699e <_puts_r+0x76>
 800697a:	4b17      	ldr	r3, [pc, #92]	; (80069d8 <_puts_r+0xb0>)
 800697c:	429c      	cmp	r4, r3
 800697e:	d101      	bne.n	8006984 <_puts_r+0x5c>
 8006980:	68ac      	ldr	r4, [r5, #8]
 8006982:	e7e3      	b.n	800694c <_puts_r+0x24>
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <_puts_r+0xb4>)
 8006986:	429c      	cmp	r4, r3
 8006988:	bf08      	it	eq
 800698a:	68ec      	ldreq	r4, [r5, #12]
 800698c:	e7de      	b.n	800694c <_puts_r+0x24>
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 f87f 	bl	8006a94 <__swsetup_r>
 8006996:	2800      	cmp	r0, #0
 8006998:	d0dd      	beq.n	8006956 <_puts_r+0x2e>
 800699a:	f04f 30ff 	mov.w	r0, #4294967295
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	da04      	bge.n	80069ae <_puts_r+0x86>
 80069a4:	69a2      	ldr	r2, [r4, #24]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	dc06      	bgt.n	80069b8 <_puts_r+0x90>
 80069aa:	290a      	cmp	r1, #10
 80069ac:	d004      	beq.n	80069b8 <_puts_r+0x90>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	6022      	str	r2, [r4, #0]
 80069b4:	7019      	strb	r1, [r3, #0]
 80069b6:	e7cf      	b.n	8006958 <_puts_r+0x30>
 80069b8:	4622      	mov	r2, r4
 80069ba:	4628      	mov	r0, r5
 80069bc:	f000 f818 	bl	80069f0 <__swbuf_r>
 80069c0:	3001      	adds	r0, #1
 80069c2:	d1c9      	bne.n	8006958 <_puts_r+0x30>
 80069c4:	e7e9      	b.n	800699a <_puts_r+0x72>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	200a      	movs	r0, #10
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	7018      	strb	r0, [r3, #0]
 80069d0:	e7e5      	b.n	800699e <_puts_r+0x76>
 80069d2:	bf00      	nop
 80069d4:	0800728c 	.word	0x0800728c
 80069d8:	080072ac 	.word	0x080072ac
 80069dc:	0800726c 	.word	0x0800726c

080069e0 <puts>:
 80069e0:	4b02      	ldr	r3, [pc, #8]	; (80069ec <puts+0xc>)
 80069e2:	4601      	mov	r1, r0
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	f7ff bf9f 	b.w	8006928 <_puts_r>
 80069ea:	bf00      	nop
 80069ec:	20000044 	.word	0x20000044

080069f0 <__swbuf_r>:
 80069f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f2:	460e      	mov	r6, r1
 80069f4:	4614      	mov	r4, r2
 80069f6:	4605      	mov	r5, r0
 80069f8:	b118      	cbz	r0, 8006a02 <__swbuf_r+0x12>
 80069fa:	6983      	ldr	r3, [r0, #24]
 80069fc:	b90b      	cbnz	r3, 8006a02 <__swbuf_r+0x12>
 80069fe:	f000 f9a7 	bl	8006d50 <__sinit>
 8006a02:	4b21      	ldr	r3, [pc, #132]	; (8006a88 <__swbuf_r+0x98>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d12a      	bne.n	8006a5e <__swbuf_r+0x6e>
 8006a08:	686c      	ldr	r4, [r5, #4]
 8006a0a:	69a3      	ldr	r3, [r4, #24]
 8006a0c:	60a3      	str	r3, [r4, #8]
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	071a      	lsls	r2, r3, #28
 8006a12:	d52e      	bpl.n	8006a72 <__swbuf_r+0x82>
 8006a14:	6923      	ldr	r3, [r4, #16]
 8006a16:	b363      	cbz	r3, 8006a72 <__swbuf_r+0x82>
 8006a18:	6923      	ldr	r3, [r4, #16]
 8006a1a:	6820      	ldr	r0, [r4, #0]
 8006a1c:	1ac0      	subs	r0, r0, r3
 8006a1e:	6963      	ldr	r3, [r4, #20]
 8006a20:	b2f6      	uxtb	r6, r6
 8006a22:	4283      	cmp	r3, r0
 8006a24:	4637      	mov	r7, r6
 8006a26:	dc04      	bgt.n	8006a32 <__swbuf_r+0x42>
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f000 f926 	bl	8006c7c <_fflush_r>
 8006a30:	bb28      	cbnz	r0, 8006a7e <__swbuf_r+0x8e>
 8006a32:	68a3      	ldr	r3, [r4, #8]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	60a3      	str	r3, [r4, #8]
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	1c5a      	adds	r2, r3, #1
 8006a3c:	6022      	str	r2, [r4, #0]
 8006a3e:	701e      	strb	r6, [r3, #0]
 8006a40:	6963      	ldr	r3, [r4, #20]
 8006a42:	3001      	adds	r0, #1
 8006a44:	4283      	cmp	r3, r0
 8006a46:	d004      	beq.n	8006a52 <__swbuf_r+0x62>
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d519      	bpl.n	8006a82 <__swbuf_r+0x92>
 8006a4e:	2e0a      	cmp	r6, #10
 8006a50:	d117      	bne.n	8006a82 <__swbuf_r+0x92>
 8006a52:	4621      	mov	r1, r4
 8006a54:	4628      	mov	r0, r5
 8006a56:	f000 f911 	bl	8006c7c <_fflush_r>
 8006a5a:	b190      	cbz	r0, 8006a82 <__swbuf_r+0x92>
 8006a5c:	e00f      	b.n	8006a7e <__swbuf_r+0x8e>
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <__swbuf_r+0x9c>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d101      	bne.n	8006a68 <__swbuf_r+0x78>
 8006a64:	68ac      	ldr	r4, [r5, #8]
 8006a66:	e7d0      	b.n	8006a0a <__swbuf_r+0x1a>
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <__swbuf_r+0xa0>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	bf08      	it	eq
 8006a6e:	68ec      	ldreq	r4, [r5, #12]
 8006a70:	e7cb      	b.n	8006a0a <__swbuf_r+0x1a>
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f80d 	bl	8006a94 <__swsetup_r>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d0cc      	beq.n	8006a18 <__swbuf_r+0x28>
 8006a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8006a82:	4638      	mov	r0, r7
 8006a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a86:	bf00      	nop
 8006a88:	0800728c 	.word	0x0800728c
 8006a8c:	080072ac 	.word	0x080072ac
 8006a90:	0800726c 	.word	0x0800726c

08006a94 <__swsetup_r>:
 8006a94:	4b32      	ldr	r3, [pc, #200]	; (8006b60 <__swsetup_r+0xcc>)
 8006a96:	b570      	push	{r4, r5, r6, lr}
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	4606      	mov	r6, r0
 8006a9c:	460c      	mov	r4, r1
 8006a9e:	b125      	cbz	r5, 8006aaa <__swsetup_r+0x16>
 8006aa0:	69ab      	ldr	r3, [r5, #24]
 8006aa2:	b913      	cbnz	r3, 8006aaa <__swsetup_r+0x16>
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f953 	bl	8006d50 <__sinit>
 8006aaa:	4b2e      	ldr	r3, [pc, #184]	; (8006b64 <__swsetup_r+0xd0>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d10f      	bne.n	8006ad0 <__swsetup_r+0x3c>
 8006ab0:	686c      	ldr	r4, [r5, #4]
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	0715      	lsls	r5, r2, #28
 8006aba:	d42c      	bmi.n	8006b16 <__swsetup_r+0x82>
 8006abc:	06d0      	lsls	r0, r2, #27
 8006abe:	d411      	bmi.n	8006ae4 <__swsetup_r+0x50>
 8006ac0:	2209      	movs	r2, #9
 8006ac2:	6032      	str	r2, [r6, #0]
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	e03e      	b.n	8006b4e <__swsetup_r+0xba>
 8006ad0:	4b25      	ldr	r3, [pc, #148]	; (8006b68 <__swsetup_r+0xd4>)
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	d101      	bne.n	8006ada <__swsetup_r+0x46>
 8006ad6:	68ac      	ldr	r4, [r5, #8]
 8006ad8:	e7eb      	b.n	8006ab2 <__swsetup_r+0x1e>
 8006ada:	4b24      	ldr	r3, [pc, #144]	; (8006b6c <__swsetup_r+0xd8>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	bf08      	it	eq
 8006ae0:	68ec      	ldreq	r4, [r5, #12]
 8006ae2:	e7e6      	b.n	8006ab2 <__swsetup_r+0x1e>
 8006ae4:	0751      	lsls	r1, r2, #29
 8006ae6:	d512      	bpl.n	8006b0e <__swsetup_r+0x7a>
 8006ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aea:	b141      	cbz	r1, 8006afe <__swsetup_r+0x6a>
 8006aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006af0:	4299      	cmp	r1, r3
 8006af2:	d002      	beq.n	8006afa <__swsetup_r+0x66>
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 fa19 	bl	8006f2c <_free_r>
 8006afa:	2300      	movs	r3, #0
 8006afc:	6363      	str	r3, [r4, #52]	; 0x34
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	2300      	movs	r3, #0
 8006b08:	6063      	str	r3, [r4, #4]
 8006b0a:	6923      	ldr	r3, [r4, #16]
 8006b0c:	6023      	str	r3, [r4, #0]
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	f043 0308 	orr.w	r3, r3, #8
 8006b14:	81a3      	strh	r3, [r4, #12]
 8006b16:	6923      	ldr	r3, [r4, #16]
 8006b18:	b94b      	cbnz	r3, 8006b2e <__swsetup_r+0x9a>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b24:	d003      	beq.n	8006b2e <__swsetup_r+0x9a>
 8006b26:	4621      	mov	r1, r4
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f000 f9bf 	bl	8006eac <__smakebuf_r>
 8006b2e:	89a2      	ldrh	r2, [r4, #12]
 8006b30:	f012 0301 	ands.w	r3, r2, #1
 8006b34:	d00c      	beq.n	8006b50 <__swsetup_r+0xbc>
 8006b36:	2300      	movs	r3, #0
 8006b38:	60a3      	str	r3, [r4, #8]
 8006b3a:	6963      	ldr	r3, [r4, #20]
 8006b3c:	425b      	negs	r3, r3
 8006b3e:	61a3      	str	r3, [r4, #24]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	b953      	cbnz	r3, 8006b5a <__swsetup_r+0xc6>
 8006b44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b48:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006b4c:	d1ba      	bne.n	8006ac4 <__swsetup_r+0x30>
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	0792      	lsls	r2, r2, #30
 8006b52:	bf58      	it	pl
 8006b54:	6963      	ldrpl	r3, [r4, #20]
 8006b56:	60a3      	str	r3, [r4, #8]
 8006b58:	e7f2      	b.n	8006b40 <__swsetup_r+0xac>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e7f7      	b.n	8006b4e <__swsetup_r+0xba>
 8006b5e:	bf00      	nop
 8006b60:	20000044 	.word	0x20000044
 8006b64:	0800728c 	.word	0x0800728c
 8006b68:	080072ac 	.word	0x080072ac
 8006b6c:	0800726c 	.word	0x0800726c

08006b70 <__sflush_r>:
 8006b70:	898a      	ldrh	r2, [r1, #12]
 8006b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b76:	4605      	mov	r5, r0
 8006b78:	0710      	lsls	r0, r2, #28
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	d458      	bmi.n	8006c30 <__sflush_r+0xc0>
 8006b7e:	684b      	ldr	r3, [r1, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dc05      	bgt.n	8006b90 <__sflush_r+0x20>
 8006b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dc02      	bgt.n	8006b90 <__sflush_r+0x20>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b92:	2e00      	cmp	r6, #0
 8006b94:	d0f9      	beq.n	8006b8a <__sflush_r+0x1a>
 8006b96:	2300      	movs	r3, #0
 8006b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b9c:	682f      	ldr	r7, [r5, #0]
 8006b9e:	6a21      	ldr	r1, [r4, #32]
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	d032      	beq.n	8006c0a <__sflush_r+0x9a>
 8006ba4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	075a      	lsls	r2, r3, #29
 8006baa:	d505      	bpl.n	8006bb8 <__sflush_r+0x48>
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	1ac0      	subs	r0, r0, r3
 8006bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb2:	b10b      	cbz	r3, 8006bb8 <__sflush_r+0x48>
 8006bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb6:	1ac0      	subs	r0, r0, r3
 8006bb8:	2300      	movs	r3, #0
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bbe:	6a21      	ldr	r1, [r4, #32]
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	47b0      	blx	r6
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	d106      	bne.n	8006bd8 <__sflush_r+0x68>
 8006bca:	6829      	ldr	r1, [r5, #0]
 8006bcc:	291d      	cmp	r1, #29
 8006bce:	d848      	bhi.n	8006c62 <__sflush_r+0xf2>
 8006bd0:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <__sflush_r+0x108>)
 8006bd2:	40ca      	lsrs	r2, r1
 8006bd4:	07d6      	lsls	r6, r2, #31
 8006bd6:	d544      	bpl.n	8006c62 <__sflush_r+0xf2>
 8006bd8:	2200      	movs	r2, #0
 8006bda:	6062      	str	r2, [r4, #4]
 8006bdc:	04d9      	lsls	r1, r3, #19
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	6022      	str	r2, [r4, #0]
 8006be2:	d504      	bpl.n	8006bee <__sflush_r+0x7e>
 8006be4:	1c42      	adds	r2, r0, #1
 8006be6:	d101      	bne.n	8006bec <__sflush_r+0x7c>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b903      	cbnz	r3, 8006bee <__sflush_r+0x7e>
 8006bec:	6560      	str	r0, [r4, #84]	; 0x54
 8006bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf0:	602f      	str	r7, [r5, #0]
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	d0c9      	beq.n	8006b8a <__sflush_r+0x1a>
 8006bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bfa:	4299      	cmp	r1, r3
 8006bfc:	d002      	beq.n	8006c04 <__sflush_r+0x94>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f994 	bl	8006f2c <_free_r>
 8006c04:	2000      	movs	r0, #0
 8006c06:	6360      	str	r0, [r4, #52]	; 0x34
 8006c08:	e7c0      	b.n	8006b8c <__sflush_r+0x1c>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b0      	blx	r6
 8006c10:	1c41      	adds	r1, r0, #1
 8006c12:	d1c8      	bne.n	8006ba6 <__sflush_r+0x36>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d0c5      	beq.n	8006ba6 <__sflush_r+0x36>
 8006c1a:	2b1d      	cmp	r3, #29
 8006c1c:	d001      	beq.n	8006c22 <__sflush_r+0xb2>
 8006c1e:	2b16      	cmp	r3, #22
 8006c20:	d101      	bne.n	8006c26 <__sflush_r+0xb6>
 8006c22:	602f      	str	r7, [r5, #0]
 8006c24:	e7b1      	b.n	8006b8a <__sflush_r+0x1a>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	e7ad      	b.n	8006b8c <__sflush_r+0x1c>
 8006c30:	690f      	ldr	r7, [r1, #16]
 8006c32:	2f00      	cmp	r7, #0
 8006c34:	d0a9      	beq.n	8006b8a <__sflush_r+0x1a>
 8006c36:	0793      	lsls	r3, r2, #30
 8006c38:	680e      	ldr	r6, [r1, #0]
 8006c3a:	bf08      	it	eq
 8006c3c:	694b      	ldreq	r3, [r1, #20]
 8006c3e:	600f      	str	r7, [r1, #0]
 8006c40:	bf18      	it	ne
 8006c42:	2300      	movne	r3, #0
 8006c44:	eba6 0807 	sub.w	r8, r6, r7
 8006c48:	608b      	str	r3, [r1, #8]
 8006c4a:	f1b8 0f00 	cmp.w	r8, #0
 8006c4e:	dd9c      	ble.n	8006b8a <__sflush_r+0x1a>
 8006c50:	4643      	mov	r3, r8
 8006c52:	463a      	mov	r2, r7
 8006c54:	6a21      	ldr	r1, [r4, #32]
 8006c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b0      	blx	r6
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	dc06      	bgt.n	8006c6e <__sflush_r+0xfe>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c66:	81a3      	strh	r3, [r4, #12]
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	e78e      	b.n	8006b8c <__sflush_r+0x1c>
 8006c6e:	4407      	add	r7, r0
 8006c70:	eba8 0800 	sub.w	r8, r8, r0
 8006c74:	e7e9      	b.n	8006c4a <__sflush_r+0xda>
 8006c76:	bf00      	nop
 8006c78:	20400001 	.word	0x20400001

08006c7c <_fflush_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	690b      	ldr	r3, [r1, #16]
 8006c80:	4605      	mov	r5, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	b1db      	cbz	r3, 8006cbe <_fflush_r+0x42>
 8006c86:	b118      	cbz	r0, 8006c90 <_fflush_r+0x14>
 8006c88:	6983      	ldr	r3, [r0, #24]
 8006c8a:	b90b      	cbnz	r3, 8006c90 <_fflush_r+0x14>
 8006c8c:	f000 f860 	bl	8006d50 <__sinit>
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <_fflush_r+0x48>)
 8006c92:	429c      	cmp	r4, r3
 8006c94:	d109      	bne.n	8006caa <_fflush_r+0x2e>
 8006c96:	686c      	ldr	r4, [r5, #4]
 8006c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c9c:	b17b      	cbz	r3, 8006cbe <_fflush_r+0x42>
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca6:	f7ff bf63 	b.w	8006b70 <__sflush_r>
 8006caa:	4b07      	ldr	r3, [pc, #28]	; (8006cc8 <_fflush_r+0x4c>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d101      	bne.n	8006cb4 <_fflush_r+0x38>
 8006cb0:	68ac      	ldr	r4, [r5, #8]
 8006cb2:	e7f1      	b.n	8006c98 <_fflush_r+0x1c>
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <_fflush_r+0x50>)
 8006cb6:	429c      	cmp	r4, r3
 8006cb8:	bf08      	it	eq
 8006cba:	68ec      	ldreq	r4, [r5, #12]
 8006cbc:	e7ec      	b.n	8006c98 <_fflush_r+0x1c>
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	bd38      	pop	{r3, r4, r5, pc}
 8006cc2:	bf00      	nop
 8006cc4:	0800728c 	.word	0x0800728c
 8006cc8:	080072ac 	.word	0x080072ac
 8006ccc:	0800726c 	.word	0x0800726c

08006cd0 <std>:
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	b510      	push	{r4, lr}
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	e9c0 3300 	strd	r3, r3, [r0]
 8006cda:	6083      	str	r3, [r0, #8]
 8006cdc:	8181      	strh	r1, [r0, #12]
 8006cde:	6643      	str	r3, [r0, #100]	; 0x64
 8006ce0:	81c2      	strh	r2, [r0, #14]
 8006ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ce6:	6183      	str	r3, [r0, #24]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	2208      	movs	r2, #8
 8006cec:	305c      	adds	r0, #92	; 0x5c
 8006cee:	f7ff fe12 	bl	8006916 <memset>
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <std+0x38>)
 8006cf4:	6263      	str	r3, [r4, #36]	; 0x24
 8006cf6:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <std+0x3c>)
 8006cf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <std+0x40>)
 8006cfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <std+0x44>)
 8006d00:	6224      	str	r4, [r4, #32]
 8006d02:	6323      	str	r3, [r4, #48]	; 0x30
 8006d04:	bd10      	pop	{r4, pc}
 8006d06:	bf00      	nop
 8006d08:	0800709d 	.word	0x0800709d
 8006d0c:	080070bf 	.word	0x080070bf
 8006d10:	080070f7 	.word	0x080070f7
 8006d14:	0800711b 	.word	0x0800711b

08006d18 <_cleanup_r>:
 8006d18:	4901      	ldr	r1, [pc, #4]	; (8006d20 <_cleanup_r+0x8>)
 8006d1a:	f000 b885 	b.w	8006e28 <_fwalk_reent>
 8006d1e:	bf00      	nop
 8006d20:	08006c7d 	.word	0x08006c7d

08006d24 <__sfmoreglue>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	1e4a      	subs	r2, r1, #1
 8006d28:	2568      	movs	r5, #104	; 0x68
 8006d2a:	4355      	muls	r5, r2
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d32:	f000 f949 	bl	8006fc8 <_malloc_r>
 8006d36:	4604      	mov	r4, r0
 8006d38:	b140      	cbz	r0, 8006d4c <__sfmoreglue+0x28>
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d40:	300c      	adds	r0, #12
 8006d42:	60a0      	str	r0, [r4, #8]
 8006d44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d48:	f7ff fde5 	bl	8006916 <memset>
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}

08006d50 <__sinit>:
 8006d50:	6983      	ldr	r3, [r0, #24]
 8006d52:	b510      	push	{r4, lr}
 8006d54:	4604      	mov	r4, r0
 8006d56:	bb33      	cbnz	r3, 8006da6 <__sinit+0x56>
 8006d58:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006d5c:	6503      	str	r3, [r0, #80]	; 0x50
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <__sinit+0x58>)
 8006d60:	4a12      	ldr	r2, [pc, #72]	; (8006dac <__sinit+0x5c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6282      	str	r2, [r0, #40]	; 0x28
 8006d66:	4298      	cmp	r0, r3
 8006d68:	bf04      	itt	eq
 8006d6a:	2301      	moveq	r3, #1
 8006d6c:	6183      	streq	r3, [r0, #24]
 8006d6e:	f000 f81f 	bl	8006db0 <__sfp>
 8006d72:	6060      	str	r0, [r4, #4]
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f81b 	bl	8006db0 <__sfp>
 8006d7a:	60a0      	str	r0, [r4, #8]
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f817 	bl	8006db0 <__sfp>
 8006d82:	2200      	movs	r2, #0
 8006d84:	60e0      	str	r0, [r4, #12]
 8006d86:	2104      	movs	r1, #4
 8006d88:	6860      	ldr	r0, [r4, #4]
 8006d8a:	f7ff ffa1 	bl	8006cd0 <std>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2109      	movs	r1, #9
 8006d92:	68a0      	ldr	r0, [r4, #8]
 8006d94:	f7ff ff9c 	bl	8006cd0 <std>
 8006d98:	2202      	movs	r2, #2
 8006d9a:	2112      	movs	r1, #18
 8006d9c:	68e0      	ldr	r0, [r4, #12]
 8006d9e:	f7ff ff97 	bl	8006cd0 <std>
 8006da2:	2301      	movs	r3, #1
 8006da4:	61a3      	str	r3, [r4, #24]
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	08007268 	.word	0x08007268
 8006dac:	08006d19 	.word	0x08006d19

08006db0 <__sfp>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <__sfp+0x70>)
 8006db4:	681e      	ldr	r6, [r3, #0]
 8006db6:	69b3      	ldr	r3, [r6, #24]
 8006db8:	4607      	mov	r7, r0
 8006dba:	b913      	cbnz	r3, 8006dc2 <__sfp+0x12>
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff ffc7 	bl	8006d50 <__sinit>
 8006dc2:	3648      	adds	r6, #72	; 0x48
 8006dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	d503      	bpl.n	8006dd4 <__sfp+0x24>
 8006dcc:	6833      	ldr	r3, [r6, #0]
 8006dce:	b133      	cbz	r3, 8006dde <__sfp+0x2e>
 8006dd0:	6836      	ldr	r6, [r6, #0]
 8006dd2:	e7f7      	b.n	8006dc4 <__sfp+0x14>
 8006dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006dd8:	b16d      	cbz	r5, 8006df6 <__sfp+0x46>
 8006dda:	3468      	adds	r4, #104	; 0x68
 8006ddc:	e7f4      	b.n	8006dc8 <__sfp+0x18>
 8006dde:	2104      	movs	r1, #4
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff9f 	bl	8006d24 <__sfmoreglue>
 8006de6:	6030      	str	r0, [r6, #0]
 8006de8:	2800      	cmp	r0, #0
 8006dea:	d1f1      	bne.n	8006dd0 <__sfp+0x20>
 8006dec:	230c      	movs	r3, #12
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4604      	mov	r4, r0
 8006df2:	4620      	mov	r0, r4
 8006df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df6:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <__sfp+0x74>)
 8006df8:	6665      	str	r5, [r4, #100]	; 0x64
 8006dfa:	e9c4 5500 	strd	r5, r5, [r4]
 8006dfe:	60a5      	str	r5, [r4, #8]
 8006e00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006e04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006e08:	2208      	movs	r2, #8
 8006e0a:	4629      	mov	r1, r5
 8006e0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e10:	f7ff fd81 	bl	8006916 <memset>
 8006e14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e1c:	e7e9      	b.n	8006df2 <__sfp+0x42>
 8006e1e:	bf00      	nop
 8006e20:	08007268 	.word	0x08007268
 8006e24:	ffff0001 	.word	0xffff0001

08006e28 <_fwalk_reent>:
 8006e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e2c:	4680      	mov	r8, r0
 8006e2e:	4689      	mov	r9, r1
 8006e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e34:	2600      	movs	r6, #0
 8006e36:	b914      	cbnz	r4, 8006e3e <_fwalk_reent+0x16>
 8006e38:	4630      	mov	r0, r6
 8006e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006e42:	3f01      	subs	r7, #1
 8006e44:	d501      	bpl.n	8006e4a <_fwalk_reent+0x22>
 8006e46:	6824      	ldr	r4, [r4, #0]
 8006e48:	e7f5      	b.n	8006e36 <_fwalk_reent+0xe>
 8006e4a:	89ab      	ldrh	r3, [r5, #12]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d907      	bls.n	8006e60 <_fwalk_reent+0x38>
 8006e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e54:	3301      	adds	r3, #1
 8006e56:	d003      	beq.n	8006e60 <_fwalk_reent+0x38>
 8006e58:	4629      	mov	r1, r5
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	47c8      	blx	r9
 8006e5e:	4306      	orrs	r6, r0
 8006e60:	3568      	adds	r5, #104	; 0x68
 8006e62:	e7ee      	b.n	8006e42 <_fwalk_reent+0x1a>

08006e64 <__swhatbuf_r>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	460e      	mov	r6, r1
 8006e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	b096      	sub	sp, #88	; 0x58
 8006e70:	4614      	mov	r4, r2
 8006e72:	461d      	mov	r5, r3
 8006e74:	da07      	bge.n	8006e86 <__swhatbuf_r+0x22>
 8006e76:	2300      	movs	r3, #0
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	89b3      	ldrh	r3, [r6, #12]
 8006e7c:	061a      	lsls	r2, r3, #24
 8006e7e:	d410      	bmi.n	8006ea2 <__swhatbuf_r+0x3e>
 8006e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e84:	e00e      	b.n	8006ea4 <__swhatbuf_r+0x40>
 8006e86:	466a      	mov	r2, sp
 8006e88:	f000 f96e 	bl	8007168 <_fstat_r>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	dbf2      	blt.n	8006e76 <__swhatbuf_r+0x12>
 8006e90:	9a01      	ldr	r2, [sp, #4]
 8006e92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e9a:	425a      	negs	r2, r3
 8006e9c:	415a      	adcs	r2, r3
 8006e9e:	602a      	str	r2, [r5, #0]
 8006ea0:	e7ee      	b.n	8006e80 <__swhatbuf_r+0x1c>
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	b016      	add	sp, #88	; 0x58
 8006eaa:	bd70      	pop	{r4, r5, r6, pc}

08006eac <__smakebuf_r>:
 8006eac:	898b      	ldrh	r3, [r1, #12]
 8006eae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006eb0:	079d      	lsls	r5, r3, #30
 8006eb2:	4606      	mov	r6, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	d507      	bpl.n	8006ec8 <__smakebuf_r+0x1c>
 8006eb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	6163      	str	r3, [r4, #20]
 8006ec4:	b002      	add	sp, #8
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	ab01      	add	r3, sp, #4
 8006eca:	466a      	mov	r2, sp
 8006ecc:	f7ff ffca 	bl	8006e64 <__swhatbuf_r>
 8006ed0:	9900      	ldr	r1, [sp, #0]
 8006ed2:	4605      	mov	r5, r0
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f877 	bl	8006fc8 <_malloc_r>
 8006eda:	b948      	cbnz	r0, 8006ef0 <__smakebuf_r+0x44>
 8006edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d4ef      	bmi.n	8006ec4 <__smakebuf_r+0x18>
 8006ee4:	f023 0303 	bic.w	r3, r3, #3
 8006ee8:	f043 0302 	orr.w	r3, r3, #2
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	e7e3      	b.n	8006eb8 <__smakebuf_r+0xc>
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <__smakebuf_r+0x7c>)
 8006ef2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ef4:	89a3      	ldrh	r3, [r4, #12]
 8006ef6:	6020      	str	r0, [r4, #0]
 8006ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006efc:	81a3      	strh	r3, [r4, #12]
 8006efe:	9b00      	ldr	r3, [sp, #0]
 8006f00:	6163      	str	r3, [r4, #20]
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	6120      	str	r0, [r4, #16]
 8006f06:	b15b      	cbz	r3, 8006f20 <__smakebuf_r+0x74>
 8006f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f93d 	bl	800718c <_isatty_r>
 8006f12:	b128      	cbz	r0, 8006f20 <__smakebuf_r+0x74>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	431d      	orrs	r5, r3
 8006f24:	81a5      	strh	r5, [r4, #12]
 8006f26:	e7cd      	b.n	8006ec4 <__smakebuf_r+0x18>
 8006f28:	08006d19 	.word	0x08006d19

08006f2c <_free_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4605      	mov	r5, r0
 8006f30:	2900      	cmp	r1, #0
 8006f32:	d045      	beq.n	8006fc0 <_free_r+0x94>
 8006f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f38:	1f0c      	subs	r4, r1, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfb8      	it	lt
 8006f3e:	18e4      	addlt	r4, r4, r3
 8006f40:	f000 f946 	bl	80071d0 <__malloc_lock>
 8006f44:	4a1f      	ldr	r2, [pc, #124]	; (8006fc4 <_free_r+0x98>)
 8006f46:	6813      	ldr	r3, [r2, #0]
 8006f48:	4610      	mov	r0, r2
 8006f4a:	b933      	cbnz	r3, 8006f5a <_free_r+0x2e>
 8006f4c:	6063      	str	r3, [r4, #4]
 8006f4e:	6014      	str	r4, [r2, #0]
 8006f50:	4628      	mov	r0, r5
 8006f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f56:	f000 b93c 	b.w	80071d2 <__malloc_unlock>
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	d90c      	bls.n	8006f78 <_free_r+0x4c>
 8006f5e:	6821      	ldr	r1, [r4, #0]
 8006f60:	1862      	adds	r2, r4, r1
 8006f62:	4293      	cmp	r3, r2
 8006f64:	bf04      	itt	eq
 8006f66:	681a      	ldreq	r2, [r3, #0]
 8006f68:	685b      	ldreq	r3, [r3, #4]
 8006f6a:	6063      	str	r3, [r4, #4]
 8006f6c:	bf04      	itt	eq
 8006f6e:	1852      	addeq	r2, r2, r1
 8006f70:	6022      	streq	r2, [r4, #0]
 8006f72:	6004      	str	r4, [r0, #0]
 8006f74:	e7ec      	b.n	8006f50 <_free_r+0x24>
 8006f76:	4613      	mov	r3, r2
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	b10a      	cbz	r2, 8006f80 <_free_r+0x54>
 8006f7c:	42a2      	cmp	r2, r4
 8006f7e:	d9fa      	bls.n	8006f76 <_free_r+0x4a>
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	1858      	adds	r0, r3, r1
 8006f84:	42a0      	cmp	r0, r4
 8006f86:	d10b      	bne.n	8006fa0 <_free_r+0x74>
 8006f88:	6820      	ldr	r0, [r4, #0]
 8006f8a:	4401      	add	r1, r0
 8006f8c:	1858      	adds	r0, r3, r1
 8006f8e:	4282      	cmp	r2, r0
 8006f90:	6019      	str	r1, [r3, #0]
 8006f92:	d1dd      	bne.n	8006f50 <_free_r+0x24>
 8006f94:	6810      	ldr	r0, [r2, #0]
 8006f96:	6852      	ldr	r2, [r2, #4]
 8006f98:	605a      	str	r2, [r3, #4]
 8006f9a:	4401      	add	r1, r0
 8006f9c:	6019      	str	r1, [r3, #0]
 8006f9e:	e7d7      	b.n	8006f50 <_free_r+0x24>
 8006fa0:	d902      	bls.n	8006fa8 <_free_r+0x7c>
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	602b      	str	r3, [r5, #0]
 8006fa6:	e7d3      	b.n	8006f50 <_free_r+0x24>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	1821      	adds	r1, r4, r0
 8006fac:	428a      	cmp	r2, r1
 8006fae:	bf04      	itt	eq
 8006fb0:	6811      	ldreq	r1, [r2, #0]
 8006fb2:	6852      	ldreq	r2, [r2, #4]
 8006fb4:	6062      	str	r2, [r4, #4]
 8006fb6:	bf04      	itt	eq
 8006fb8:	1809      	addeq	r1, r1, r0
 8006fba:	6021      	streq	r1, [r4, #0]
 8006fbc:	605c      	str	r4, [r3, #4]
 8006fbe:	e7c7      	b.n	8006f50 <_free_r+0x24>
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20008dec 	.word	0x20008dec

08006fc8 <_malloc_r>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	1ccd      	adds	r5, r1, #3
 8006fcc:	f025 0503 	bic.w	r5, r5, #3
 8006fd0:	3508      	adds	r5, #8
 8006fd2:	2d0c      	cmp	r5, #12
 8006fd4:	bf38      	it	cc
 8006fd6:	250c      	movcc	r5, #12
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	4606      	mov	r6, r0
 8006fdc:	db01      	blt.n	8006fe2 <_malloc_r+0x1a>
 8006fde:	42a9      	cmp	r1, r5
 8006fe0:	d903      	bls.n	8006fea <_malloc_r+0x22>
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	6033      	str	r3, [r6, #0]
 8006fe6:	2000      	movs	r0, #0
 8006fe8:	bd70      	pop	{r4, r5, r6, pc}
 8006fea:	f000 f8f1 	bl	80071d0 <__malloc_lock>
 8006fee:	4a21      	ldr	r2, [pc, #132]	; (8007074 <_malloc_r+0xac>)
 8006ff0:	6814      	ldr	r4, [r2, #0]
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	b991      	cbnz	r1, 800701c <_malloc_r+0x54>
 8006ff6:	4c20      	ldr	r4, [pc, #128]	; (8007078 <_malloc_r+0xb0>)
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	b91b      	cbnz	r3, 8007004 <_malloc_r+0x3c>
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f000 f83d 	bl	800707c <_sbrk_r>
 8007002:	6020      	str	r0, [r4, #0]
 8007004:	4629      	mov	r1, r5
 8007006:	4630      	mov	r0, r6
 8007008:	f000 f838 	bl	800707c <_sbrk_r>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d124      	bne.n	800705a <_malloc_r+0x92>
 8007010:	230c      	movs	r3, #12
 8007012:	6033      	str	r3, [r6, #0]
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f8dc 	bl	80071d2 <__malloc_unlock>
 800701a:	e7e4      	b.n	8006fe6 <_malloc_r+0x1e>
 800701c:	680b      	ldr	r3, [r1, #0]
 800701e:	1b5b      	subs	r3, r3, r5
 8007020:	d418      	bmi.n	8007054 <_malloc_r+0x8c>
 8007022:	2b0b      	cmp	r3, #11
 8007024:	d90f      	bls.n	8007046 <_malloc_r+0x7e>
 8007026:	600b      	str	r3, [r1, #0]
 8007028:	50cd      	str	r5, [r1, r3]
 800702a:	18cc      	adds	r4, r1, r3
 800702c:	4630      	mov	r0, r6
 800702e:	f000 f8d0 	bl	80071d2 <__malloc_unlock>
 8007032:	f104 000b 	add.w	r0, r4, #11
 8007036:	1d23      	adds	r3, r4, #4
 8007038:	f020 0007 	bic.w	r0, r0, #7
 800703c:	1ac3      	subs	r3, r0, r3
 800703e:	d0d3      	beq.n	8006fe8 <_malloc_r+0x20>
 8007040:	425a      	negs	r2, r3
 8007042:	50e2      	str	r2, [r4, r3]
 8007044:	e7d0      	b.n	8006fe8 <_malloc_r+0x20>
 8007046:	428c      	cmp	r4, r1
 8007048:	684b      	ldr	r3, [r1, #4]
 800704a:	bf16      	itet	ne
 800704c:	6063      	strne	r3, [r4, #4]
 800704e:	6013      	streq	r3, [r2, #0]
 8007050:	460c      	movne	r4, r1
 8007052:	e7eb      	b.n	800702c <_malloc_r+0x64>
 8007054:	460c      	mov	r4, r1
 8007056:	6849      	ldr	r1, [r1, #4]
 8007058:	e7cc      	b.n	8006ff4 <_malloc_r+0x2c>
 800705a:	1cc4      	adds	r4, r0, #3
 800705c:	f024 0403 	bic.w	r4, r4, #3
 8007060:	42a0      	cmp	r0, r4
 8007062:	d005      	beq.n	8007070 <_malloc_r+0xa8>
 8007064:	1a21      	subs	r1, r4, r0
 8007066:	4630      	mov	r0, r6
 8007068:	f000 f808 	bl	800707c <_sbrk_r>
 800706c:	3001      	adds	r0, #1
 800706e:	d0cf      	beq.n	8007010 <_malloc_r+0x48>
 8007070:	6025      	str	r5, [r4, #0]
 8007072:	e7db      	b.n	800702c <_malloc_r+0x64>
 8007074:	20008dec 	.word	0x20008dec
 8007078:	20008df0 	.word	0x20008df0

0800707c <_sbrk_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4c06      	ldr	r4, [pc, #24]	; (8007098 <_sbrk_r+0x1c>)
 8007080:	2300      	movs	r3, #0
 8007082:	4605      	mov	r5, r0
 8007084:	4608      	mov	r0, r1
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	f7f9 fed2 	bl	8000e30 <_sbrk>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_sbrk_r+0x1a>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	b103      	cbz	r3, 8007096 <_sbrk_r+0x1a>
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20008f24 	.word	0x20008f24

0800709c <__sread>:
 800709c:	b510      	push	{r4, lr}
 800709e:	460c      	mov	r4, r1
 80070a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a4:	f000 f896 	bl	80071d4 <_read_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	bfab      	itete	ge
 80070ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ae:	89a3      	ldrhlt	r3, [r4, #12]
 80070b0:	181b      	addge	r3, r3, r0
 80070b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070b6:	bfac      	ite	ge
 80070b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80070ba:	81a3      	strhlt	r3, [r4, #12]
 80070bc:	bd10      	pop	{r4, pc}

080070be <__swrite>:
 80070be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c2:	461f      	mov	r7, r3
 80070c4:	898b      	ldrh	r3, [r1, #12]
 80070c6:	05db      	lsls	r3, r3, #23
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4616      	mov	r6, r2
 80070ce:	d505      	bpl.n	80070dc <__swrite+0x1e>
 80070d0:	2302      	movs	r3, #2
 80070d2:	2200      	movs	r2, #0
 80070d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d8:	f000 f868 	bl	80071ac <_lseek_r>
 80070dc:	89a3      	ldrh	r3, [r4, #12]
 80070de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070e6:	81a3      	strh	r3, [r4, #12]
 80070e8:	4632      	mov	r2, r6
 80070ea:	463b      	mov	r3, r7
 80070ec:	4628      	mov	r0, r5
 80070ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070f2:	f000 b817 	b.w	8007124 <_write_r>

080070f6 <__sseek>:
 80070f6:	b510      	push	{r4, lr}
 80070f8:	460c      	mov	r4, r1
 80070fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070fe:	f000 f855 	bl	80071ac <_lseek_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	bf15      	itete	ne
 8007108:	6560      	strne	r0, [r4, #84]	; 0x54
 800710a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800710e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007112:	81a3      	strheq	r3, [r4, #12]
 8007114:	bf18      	it	ne
 8007116:	81a3      	strhne	r3, [r4, #12]
 8007118:	bd10      	pop	{r4, pc}

0800711a <__sclose>:
 800711a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800711e:	f000 b813 	b.w	8007148 <_close_r>
	...

08007124 <_write_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4c07      	ldr	r4, [pc, #28]	; (8007144 <_write_r+0x20>)
 8007128:	4605      	mov	r5, r0
 800712a:	4608      	mov	r0, r1
 800712c:	4611      	mov	r1, r2
 800712e:	2200      	movs	r2, #0
 8007130:	6022      	str	r2, [r4, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	f7f9 fe2b 	bl	8000d8e <_write>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d102      	bne.n	8007142 <_write_r+0x1e>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	b103      	cbz	r3, 8007142 <_write_r+0x1e>
 8007140:	602b      	str	r3, [r5, #0]
 8007142:	bd38      	pop	{r3, r4, r5, pc}
 8007144:	20008f24 	.word	0x20008f24

08007148 <_close_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	4c06      	ldr	r4, [pc, #24]	; (8007164 <_close_r+0x1c>)
 800714c:	2300      	movs	r3, #0
 800714e:	4605      	mov	r5, r0
 8007150:	4608      	mov	r0, r1
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	f7f9 fe37 	bl	8000dc6 <_close>
 8007158:	1c43      	adds	r3, r0, #1
 800715a:	d102      	bne.n	8007162 <_close_r+0x1a>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	b103      	cbz	r3, 8007162 <_close_r+0x1a>
 8007160:	602b      	str	r3, [r5, #0]
 8007162:	bd38      	pop	{r3, r4, r5, pc}
 8007164:	20008f24 	.word	0x20008f24

08007168 <_fstat_r>:
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4c07      	ldr	r4, [pc, #28]	; (8007188 <_fstat_r+0x20>)
 800716c:	2300      	movs	r3, #0
 800716e:	4605      	mov	r5, r0
 8007170:	4608      	mov	r0, r1
 8007172:	4611      	mov	r1, r2
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	f7f9 fe32 	bl	8000dde <_fstat>
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	d102      	bne.n	8007184 <_fstat_r+0x1c>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	b103      	cbz	r3, 8007184 <_fstat_r+0x1c>
 8007182:	602b      	str	r3, [r5, #0]
 8007184:	bd38      	pop	{r3, r4, r5, pc}
 8007186:	bf00      	nop
 8007188:	20008f24 	.word	0x20008f24

0800718c <_isatty_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4c06      	ldr	r4, [pc, #24]	; (80071a8 <_isatty_r+0x1c>)
 8007190:	2300      	movs	r3, #0
 8007192:	4605      	mov	r5, r0
 8007194:	4608      	mov	r0, r1
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	f7f9 fe31 	bl	8000dfe <_isatty>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_isatty_r+0x1a>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_isatty_r+0x1a>
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20008f24 	.word	0x20008f24

080071ac <_lseek_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4c07      	ldr	r4, [pc, #28]	; (80071cc <_lseek_r+0x20>)
 80071b0:	4605      	mov	r5, r0
 80071b2:	4608      	mov	r0, r1
 80071b4:	4611      	mov	r1, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f7f9 fe2a 	bl	8000e14 <_lseek>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_lseek_r+0x1e>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_lseek_r+0x1e>
 80071c8:	602b      	str	r3, [r5, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20008f24 	.word	0x20008f24

080071d0 <__malloc_lock>:
 80071d0:	4770      	bx	lr

080071d2 <__malloc_unlock>:
 80071d2:	4770      	bx	lr

080071d4 <_read_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c07      	ldr	r4, [pc, #28]	; (80071f4 <_read_r+0x20>)
 80071d8:	4605      	mov	r5, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	4611      	mov	r1, r2
 80071de:	2200      	movs	r2, #0
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f7f9 fdb6 	bl	8000d54 <_read>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_read_r+0x1e>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_read_r+0x1e>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	20008f24 	.word	0x20008f24

080071f8 <_init>:
 80071f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fa:	bf00      	nop
 80071fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071fe:	bc08      	pop	{r3}
 8007200:	469e      	mov	lr, r3
 8007202:	4770      	bx	lr

08007204 <_fini>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	bf00      	nop
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr
